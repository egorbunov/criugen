// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vma.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vma.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* vma_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vma_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vma_2eproto() {
  protobuf_AddDesc_vma_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vma.proto");
  GOOGLE_CHECK(file != NULL);
  vma_entry_descriptor_ = file->message_type(0);
  static const int vma_entry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, pgoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, shmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, prot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, madv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, fdflags_),
  };
  vma_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vma_entry_descriptor_,
      vma_entry::default_instance_,
      vma_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vma_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vma_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vma_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vma_entry_descriptor_, &vma_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vma_2eproto() {
  delete vma_entry::default_instance_;
  delete vma_entry_reflection_;
}

void protobuf_AddDesc_vma_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_opts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvma.proto\032\nopts.proto\"\354\001\n\tvma_entry\022\024\n"
    "\005start\030\001 \002(\004B\005\322\?\002\010\001\022\022\n\003end\030\002 \002(\004B\005\322\?\002\010\001\022"
    "\r\n\005pgoff\030\003 \002(\004\022\r\n\005shmid\030\004 \002(\004\022\034\n\004prot\030\005 "
    "\002(\rB\016\322\?\013\032\tmmap.prot\022\036\n\005flags\030\006 \002(\rB\017\322\?\014\032"
    "\nmmap.flags\022 \n\006status\030\007 \002(\rB\020\322\?\r\032\013mmap.s"
    "tatus\022\n\n\002fd\030\010 \002(\022\022\023\n\004madv\030\t \001(\004B\005\322\?\002\010\001\022\026"
    "\n\007fdflags\030\n \001(\rB\005\322\?\002\010\001", 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vma.proto", &protobuf_RegisterTypes);
  vma_entry::default_instance_ = new vma_entry();
  vma_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vma_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vma_2eproto {
  StaticDescriptorInitializer_vma_2eproto() {
    protobuf_AddDesc_vma_2eproto();
  }
} static_descriptor_initializer_vma_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int vma_entry::kStartFieldNumber;
const int vma_entry::kEndFieldNumber;
const int vma_entry::kPgoffFieldNumber;
const int vma_entry::kShmidFieldNumber;
const int vma_entry::kProtFieldNumber;
const int vma_entry::kFlagsFieldNumber;
const int vma_entry::kStatusFieldNumber;
const int vma_entry::kFdFieldNumber;
const int vma_entry::kMadvFieldNumber;
const int vma_entry::kFdflagsFieldNumber;
#endif  // !_MSC_VER

vma_entry::vma_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vma_entry)
}

void vma_entry::InitAsDefaultInstance() {
}

vma_entry::vma_entry(const vma_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vma_entry)
}

void vma_entry::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  pgoff_ = GOOGLE_ULONGLONG(0);
  shmid_ = GOOGLE_ULONGLONG(0);
  prot_ = 0u;
  flags_ = 0u;
  status_ = 0u;
  fd_ = GOOGLE_LONGLONG(0);
  madv_ = GOOGLE_ULONGLONG(0);
  fdflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vma_entry::~vma_entry() {
  // @@protoc_insertion_point(destructor:vma_entry)
  SharedDtor();
}

void vma_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vma_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vma_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vma_entry_descriptor_;
}

const vma_entry& vma_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vma_2eproto();
  return *default_instance_;
}

vma_entry* vma_entry::default_instance_ = NULL;

vma_entry* vma_entry::New() const {
  return new vma_entry;
}

void vma_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<vma_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_, status_);
  }
  ZR_(fdflags_, madv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vma_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vma_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required uint64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pgoff;
        break;
      }

      // required uint64 pgoff = 3;
      case 3: {
        if (tag == 24) {
         parse_pgoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pgoff_)));
          set_has_pgoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shmid;
        break;
      }

      // required uint64 shmid = 4;
      case 4: {
        if (tag == 32) {
         parse_shmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shmid_)));
          set_has_shmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prot;
        break;
      }

      // required uint32 prot = 5;
      case 5: {
        if (tag == 40) {
         parse_prot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prot_)));
          set_has_prot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }

      // required uint32 flags = 6;
      case 6: {
        if (tag == 48) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required uint32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fd;
        break;
      }

      // required sint64 fd = 8;
      case 8: {
        if (tag == 64) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_madv;
        break;
      }

      // optional uint64 madv = 9;
      case 9: {
        if (tag == 72) {
         parse_madv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &madv_)));
          set_has_madv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fdflags;
        break;
      }

      // optional uint32 fdflags = 10;
      case 10: {
        if (tag == 80) {
         parse_fdflags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fdflags_)));
          set_has_fdflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vma_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vma_entry)
  return false;
#undef DO_
}

void vma_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vma_entry)
  // required uint64 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // required uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  // required uint64 pgoff = 3;
  if (has_pgoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pgoff(), output);
  }

  // required uint64 shmid = 4;
  if (has_shmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->shmid(), output);
  }

  // required uint32 prot = 5;
  if (has_prot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prot(), output);
  }

  // required uint32 flags = 6;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // required uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // required sint64 fd = 8;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->fd(), output);
  }

  // optional uint64 madv = 9;
  if (has_madv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->madv(), output);
  }

  // optional uint32 fdflags = 10;
  if (has_fdflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fdflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vma_entry)
}

::google::protobuf::uint8* vma_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vma_entry)
  // required uint64 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // required uint64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  // required uint64 pgoff = 3;
  if (has_pgoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pgoff(), target);
  }

  // required uint64 shmid = 4;
  if (has_shmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->shmid(), target);
  }

  // required uint32 prot = 5;
  if (has_prot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prot(), target);
  }

  // required uint32 flags = 6;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // required uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // required sint64 fd = 8;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->fd(), target);
  }

  // optional uint64 madv = 9;
  if (has_madv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->madv(), target);
  }

  // optional uint32 fdflags = 10;
  if (has_fdflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fdflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vma_entry)
  return target;
}

int vma_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // required uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

    // required uint64 pgoff = 3;
    if (has_pgoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pgoff());
    }

    // required uint64 shmid = 4;
    if (has_shmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shmid());
    }

    // required uint32 prot = 5;
    if (has_prot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prot());
    }

    // required uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required sint64 fd = 8;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->fd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 madv = 9;
    if (has_madv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->madv());
    }

    // optional uint32 fdflags = 10;
    if (has_fdflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fdflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vma_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vma_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vma_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vma_entry::MergeFrom(const vma_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_pgoff()) {
      set_pgoff(from.pgoff());
    }
    if (from.has_shmid()) {
      set_shmid(from.shmid());
    }
    if (from.has_prot()) {
      set_prot(from.prot());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_madv()) {
      set_madv(from.madv());
    }
    if (from.has_fdflags()) {
      set_fdflags(from.fdflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vma_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vma_entry::CopyFrom(const vma_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vma_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void vma_entry::Swap(vma_entry* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(pgoff_, other->pgoff_);
    std::swap(shmid_, other->shmid_);
    std::swap(prot_, other->prot_);
    std::swap(flags_, other->flags_);
    std::swap(status_, other->status_);
    std::swap(fd_, other->fd_);
    std::swap(madv_, other->madv_);
    std::swap(fdflags_, other->fdflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vma_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vma_entry_descriptor_;
  metadata.reflection = vma_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
