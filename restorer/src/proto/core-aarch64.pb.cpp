// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core-aarch64.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core-aarch64.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* user_aarch64_regs_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_aarch64_regs_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_aarch64_fpsimd_context_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_aarch64_fpsimd_context_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_info_aarch64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_info_aarch64_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2daarch64_2eproto() {
  protobuf_AddDesc_core_2daarch64_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core-aarch64.proto");
  GOOGLE_CHECK(file != NULL);
  user_aarch64_regs_entry_descriptor_ = file->message_type(0);
  static const int user_aarch64_regs_entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, regs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, pstate_),
  };
  user_aarch64_regs_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_aarch64_regs_entry_descriptor_,
      user_aarch64_regs_entry::default_instance_,
      user_aarch64_regs_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_regs_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_aarch64_regs_entry));
  user_aarch64_fpsimd_context_entry_descriptor_ = file->message_type(1);
  static const int user_aarch64_fpsimd_context_entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_fpsimd_context_entry, vregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_fpsimd_context_entry, fpsr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_fpsimd_context_entry, fpcr_),
  };
  user_aarch64_fpsimd_context_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_aarch64_fpsimd_context_entry_descriptor_,
      user_aarch64_fpsimd_context_entry::default_instance_,
      user_aarch64_fpsimd_context_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_fpsimd_context_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_aarch64_fpsimd_context_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_aarch64_fpsimd_context_entry));
  thread_info_aarch64_descriptor_ = file->message_type(2);
  static const int thread_info_aarch64_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, clear_tid_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, tls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, gpregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, fpsimd_),
  };
  thread_info_aarch64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_info_aarch64_descriptor_,
      thread_info_aarch64::default_instance_,
      thread_info_aarch64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_aarch64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_info_aarch64));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2daarch64_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_aarch64_regs_entry_descriptor_, &user_aarch64_regs_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_aarch64_fpsimd_context_entry_descriptor_, &user_aarch64_fpsimd_context_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_info_aarch64_descriptor_, &thread_info_aarch64::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2daarch64_2eproto() {
  delete user_aarch64_regs_entry::default_instance_;
  delete user_aarch64_regs_entry_reflection_;
  delete user_aarch64_fpsimd_context_entry::default_instance_;
  delete user_aarch64_fpsimd_context_entry_reflection_;
  delete thread_info_aarch64::default_instance_;
  delete thread_info_aarch64_reflection_;
}

void protobuf_AddDesc_core_2daarch64_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022core-aarch64.proto\"O\n\027user_aarch64_reg"
    "s_entry\022\014\n\004regs\030\001 \003(\004\022\n\n\002sp\030\002 \002(\004\022\n\n\002pc\030"
    "\003 \002(\004\022\016\n\006pstate\030\004 \002(\004\"N\n!user_aarch64_fp"
    "simd_context_entry\022\r\n\005vregs\030\001 \003(\004\022\014\n\004fps"
    "r\030\002 \002(\r\022\014\n\004fpcr\030\003 \002(\r\"\230\001\n\023thread_info_aa"
    "rch64\022\026\n\016clear_tid_addr\030\001 \002(\004\022\013\n\003tls\030\002 \002"
    "(\004\022(\n\006gpregs\030\003 \002(\0132\030.user_aarch64_regs_e"
    "ntry\0222\n\006fpsimd\030\004 \002(\0132\".user_aarch64_fpsi"
    "md_context_entry", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core-aarch64.proto", &protobuf_RegisterTypes);
  user_aarch64_regs_entry::default_instance_ = new user_aarch64_regs_entry();
  user_aarch64_fpsimd_context_entry::default_instance_ = new user_aarch64_fpsimd_context_entry();
  thread_info_aarch64::default_instance_ = new thread_info_aarch64();
  user_aarch64_regs_entry::default_instance_->InitAsDefaultInstance();
  user_aarch64_fpsimd_context_entry::default_instance_->InitAsDefaultInstance();
  thread_info_aarch64::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2daarch64_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2daarch64_2eproto {
  StaticDescriptorInitializer_core_2daarch64_2eproto() {
    protobuf_AddDesc_core_2daarch64_2eproto();
  }
} static_descriptor_initializer_core_2daarch64_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int user_aarch64_regs_entry::kRegsFieldNumber;
const int user_aarch64_regs_entry::kSpFieldNumber;
const int user_aarch64_regs_entry::kPcFieldNumber;
const int user_aarch64_regs_entry::kPstateFieldNumber;
#endif  // !_MSC_VER

user_aarch64_regs_entry::user_aarch64_regs_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_aarch64_regs_entry)
}

void user_aarch64_regs_entry::InitAsDefaultInstance() {
}

user_aarch64_regs_entry::user_aarch64_regs_entry(const user_aarch64_regs_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_aarch64_regs_entry)
}

void user_aarch64_regs_entry::SharedCtor() {
  _cached_size_ = 0;
  sp_ = GOOGLE_ULONGLONG(0);
  pc_ = GOOGLE_ULONGLONG(0);
  pstate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_aarch64_regs_entry::~user_aarch64_regs_entry() {
  // @@protoc_insertion_point(destructor:user_aarch64_regs_entry)
  SharedDtor();
}

void user_aarch64_regs_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_aarch64_regs_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_aarch64_regs_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_aarch64_regs_entry_descriptor_;
}

const user_aarch64_regs_entry& user_aarch64_regs_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2daarch64_2eproto();
  return *default_instance_;
}

user_aarch64_regs_entry* user_aarch64_regs_entry::default_instance_ = NULL;

user_aarch64_regs_entry* user_aarch64_regs_entry::New() const {
  return new user_aarch64_regs_entry;
}

void user_aarch64_regs_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_aarch64_regs_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sp_, pstate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  regs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_aarch64_regs_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_aarch64_regs_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 regs = 1;
      case 1: {
        if (tag == 8) {
         parse_regs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_regs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_regs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_regs;
        if (input->ExpectTag(16)) goto parse_sp;
        break;
      }

      // required uint64 sp = 2;
      case 2: {
        if (tag == 16) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pc;
        break;
      }

      // required uint64 pc = 3;
      case 3: {
        if (tag == 24) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pstate;
        break;
      }

      // required uint64 pstate = 4;
      case 4: {
        if (tag == 32) {
         parse_pstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pstate_)));
          set_has_pstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_aarch64_regs_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_aarch64_regs_entry)
  return false;
#undef DO_
}

void user_aarch64_regs_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_aarch64_regs_entry)
  // repeated uint64 regs = 1;
  for (int i = 0; i < this->regs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->regs(i), output);
  }

  // required uint64 sp = 2;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sp(), output);
  }

  // required uint64 pc = 3;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pc(), output);
  }

  // required uint64 pstate = 4;
  if (has_pstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_aarch64_regs_entry)
}

::google::protobuf::uint8* user_aarch64_regs_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_aarch64_regs_entry)
  // repeated uint64 regs = 1;
  for (int i = 0; i < this->regs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->regs(i), target);
  }

  // required uint64 sp = 2;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sp(), target);
  }

  // required uint64 pc = 3;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pc(), target);
  }

  // required uint64 pstate = 4;
  if (has_pstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_aarch64_regs_entry)
  return target;
}

int user_aarch64_regs_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 sp = 2;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sp());
    }

    // required uint64 pc = 3;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

    // required uint64 pstate = 4;
    if (has_pstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pstate());
    }

  }
  // repeated uint64 regs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->regs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->regs(i));
    }
    total_size += 1 * this->regs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_aarch64_regs_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_aarch64_regs_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_aarch64_regs_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_aarch64_regs_entry::MergeFrom(const user_aarch64_regs_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  regs_.MergeFrom(from.regs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_pstate()) {
      set_pstate(from.pstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_aarch64_regs_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_aarch64_regs_entry::CopyFrom(const user_aarch64_regs_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_aarch64_regs_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void user_aarch64_regs_entry::Swap(user_aarch64_regs_entry* other) {
  if (other != this) {
    regs_.Swap(&other->regs_);
    std::swap(sp_, other->sp_);
    std::swap(pc_, other->pc_);
    std::swap(pstate_, other->pstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_aarch64_regs_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_aarch64_regs_entry_descriptor_;
  metadata.reflection = user_aarch64_regs_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_aarch64_fpsimd_context_entry::kVregsFieldNumber;
const int user_aarch64_fpsimd_context_entry::kFpsrFieldNumber;
const int user_aarch64_fpsimd_context_entry::kFpcrFieldNumber;
#endif  // !_MSC_VER

user_aarch64_fpsimd_context_entry::user_aarch64_fpsimd_context_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_aarch64_fpsimd_context_entry)
}

void user_aarch64_fpsimd_context_entry::InitAsDefaultInstance() {
}

user_aarch64_fpsimd_context_entry::user_aarch64_fpsimd_context_entry(const user_aarch64_fpsimd_context_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_aarch64_fpsimd_context_entry)
}

void user_aarch64_fpsimd_context_entry::SharedCtor() {
  _cached_size_ = 0;
  fpsr_ = 0u;
  fpcr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_aarch64_fpsimd_context_entry::~user_aarch64_fpsimd_context_entry() {
  // @@protoc_insertion_point(destructor:user_aarch64_fpsimd_context_entry)
  SharedDtor();
}

void user_aarch64_fpsimd_context_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_aarch64_fpsimd_context_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_aarch64_fpsimd_context_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_aarch64_fpsimd_context_entry_descriptor_;
}

const user_aarch64_fpsimd_context_entry& user_aarch64_fpsimd_context_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2daarch64_2eproto();
  return *default_instance_;
}

user_aarch64_fpsimd_context_entry* user_aarch64_fpsimd_context_entry::default_instance_ = NULL;

user_aarch64_fpsimd_context_entry* user_aarch64_fpsimd_context_entry::New() const {
  return new user_aarch64_fpsimd_context_entry;
}

void user_aarch64_fpsimd_context_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_aarch64_fpsimd_context_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fpsr_, fpcr_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  vregs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_aarch64_fpsimd_context_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_aarch64_fpsimd_context_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 vregs = 1;
      case 1: {
        if (tag == 8) {
         parse_vregs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_vregs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vregs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_vregs;
        if (input->ExpectTag(16)) goto parse_fpsr;
        break;
      }

      // required uint32 fpsr = 2;
      case 2: {
        if (tag == 16) {
         parse_fpsr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpsr_)));
          set_has_fpsr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fpcr;
        break;
      }

      // required uint32 fpcr = 3;
      case 3: {
        if (tag == 24) {
         parse_fpcr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpcr_)));
          set_has_fpcr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_aarch64_fpsimd_context_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_aarch64_fpsimd_context_entry)
  return false;
#undef DO_
}

void user_aarch64_fpsimd_context_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_aarch64_fpsimd_context_entry)
  // repeated uint64 vregs = 1;
  for (int i = 0; i < this->vregs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->vregs(i), output);
  }

  // required uint32 fpsr = 2;
  if (has_fpsr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fpsr(), output);
  }

  // required uint32 fpcr = 3;
  if (has_fpcr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fpcr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_aarch64_fpsimd_context_entry)
}

::google::protobuf::uint8* user_aarch64_fpsimd_context_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_aarch64_fpsimd_context_entry)
  // repeated uint64 vregs = 1;
  for (int i = 0; i < this->vregs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->vregs(i), target);
  }

  // required uint32 fpsr = 2;
  if (has_fpsr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fpsr(), target);
  }

  // required uint32 fpcr = 3;
  if (has_fpcr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fpcr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_aarch64_fpsimd_context_entry)
  return target;
}

int user_aarch64_fpsimd_context_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 fpsr = 2;
    if (has_fpsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpsr());
    }

    // required uint32 fpcr = 3;
    if (has_fpcr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpcr());
    }

  }
  // repeated uint64 vregs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vregs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vregs(i));
    }
    total_size += 1 * this->vregs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_aarch64_fpsimd_context_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_aarch64_fpsimd_context_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_aarch64_fpsimd_context_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_aarch64_fpsimd_context_entry::MergeFrom(const user_aarch64_fpsimd_context_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  vregs_.MergeFrom(from.vregs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fpsr()) {
      set_fpsr(from.fpsr());
    }
    if (from.has_fpcr()) {
      set_fpcr(from.fpcr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_aarch64_fpsimd_context_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_aarch64_fpsimd_context_entry::CopyFrom(const user_aarch64_fpsimd_context_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_aarch64_fpsimd_context_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void user_aarch64_fpsimd_context_entry::Swap(user_aarch64_fpsimd_context_entry* other) {
  if (other != this) {
    vregs_.Swap(&other->vregs_);
    std::swap(fpsr_, other->fpsr_);
    std::swap(fpcr_, other->fpcr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_aarch64_fpsimd_context_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_aarch64_fpsimd_context_entry_descriptor_;
  metadata.reflection = user_aarch64_fpsimd_context_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_info_aarch64::kClearTidAddrFieldNumber;
const int thread_info_aarch64::kTlsFieldNumber;
const int thread_info_aarch64::kGpregsFieldNumber;
const int thread_info_aarch64::kFpsimdFieldNumber;
#endif  // !_MSC_VER

thread_info_aarch64::thread_info_aarch64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_info_aarch64)
}

void thread_info_aarch64::InitAsDefaultInstance() {
  gpregs_ = const_cast< ::user_aarch64_regs_entry*>(&::user_aarch64_regs_entry::default_instance());
  fpsimd_ = const_cast< ::user_aarch64_fpsimd_context_entry*>(&::user_aarch64_fpsimd_context_entry::default_instance());
}

thread_info_aarch64::thread_info_aarch64(const thread_info_aarch64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_info_aarch64)
}

void thread_info_aarch64::SharedCtor() {
  _cached_size_ = 0;
  clear_tid_addr_ = GOOGLE_ULONGLONG(0);
  tls_ = GOOGLE_ULONGLONG(0);
  gpregs_ = NULL;
  fpsimd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_info_aarch64::~thread_info_aarch64() {
  // @@protoc_insertion_point(destructor:thread_info_aarch64)
  SharedDtor();
}

void thread_info_aarch64::SharedDtor() {
  if (this != default_instance_) {
    delete gpregs_;
    delete fpsimd_;
  }
}

void thread_info_aarch64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_info_aarch64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_info_aarch64_descriptor_;
}

const thread_info_aarch64& thread_info_aarch64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2daarch64_2eproto();
  return *default_instance_;
}

thread_info_aarch64* thread_info_aarch64::default_instance_ = NULL;

thread_info_aarch64* thread_info_aarch64::New() const {
  return new thread_info_aarch64;
}

void thread_info_aarch64::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<thread_info_aarch64*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(clear_tid_addr_, tls_);
    if (has_gpregs()) {
      if (gpregs_ != NULL) gpregs_->::user_aarch64_regs_entry::Clear();
    }
    if (has_fpsimd()) {
      if (fpsimd_ != NULL) fpsimd_->::user_aarch64_fpsimd_context_entry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_info_aarch64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_info_aarch64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clear_tid_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clear_tid_addr_)));
          set_has_clear_tid_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tls;
        break;
      }

      // required uint64 tls = 2;
      case 2: {
        if (tag == 16) {
         parse_tls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tls_)));
          set_has_tls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gpregs;
        break;
      }

      // required .user_aarch64_regs_entry gpregs = 3;
      case 3: {
        if (tag == 26) {
         parse_gpregs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpregs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fpsimd;
        break;
      }

      // required .user_aarch64_fpsimd_context_entry fpsimd = 4;
      case 4: {
        if (tag == 34) {
         parse_fpsimd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpsimd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_info_aarch64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_info_aarch64)
  return false;
#undef DO_
}

void thread_info_aarch64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_info_aarch64)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clear_tid_addr(), output);
  }

  // required uint64 tls = 2;
  if (has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tls(), output);
  }

  // required .user_aarch64_regs_entry gpregs = 3;
  if (has_gpregs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gpregs(), output);
  }

  // required .user_aarch64_fpsimd_context_entry fpsimd = 4;
  if (has_fpsimd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fpsimd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_info_aarch64)
}

::google::protobuf::uint8* thread_info_aarch64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_info_aarch64)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clear_tid_addr(), target);
  }

  // required uint64 tls = 2;
  if (has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tls(), target);
  }

  // required .user_aarch64_regs_entry gpregs = 3;
  if (has_gpregs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gpregs(), target);
  }

  // required .user_aarch64_fpsimd_context_entry fpsimd = 4;
  if (has_fpsimd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fpsimd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_info_aarch64)
  return target;
}

int thread_info_aarch64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 clear_tid_addr = 1;
    if (has_clear_tid_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clear_tid_addr());
    }

    // required uint64 tls = 2;
    if (has_tls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tls());
    }

    // required .user_aarch64_regs_entry gpregs = 3;
    if (has_gpregs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpregs());
    }

    // required .user_aarch64_fpsimd_context_entry fpsimd = 4;
    if (has_fpsimd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpsimd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_info_aarch64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_info_aarch64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_info_aarch64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_info_aarch64::MergeFrom(const thread_info_aarch64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_tid_addr()) {
      set_clear_tid_addr(from.clear_tid_addr());
    }
    if (from.has_tls()) {
      set_tls(from.tls());
    }
    if (from.has_gpregs()) {
      mutable_gpregs()->::user_aarch64_regs_entry::MergeFrom(from.gpregs());
    }
    if (from.has_fpsimd()) {
      mutable_fpsimd()->::user_aarch64_fpsimd_context_entry::MergeFrom(from.fpsimd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_info_aarch64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_info_aarch64::CopyFrom(const thread_info_aarch64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_info_aarch64::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_gpregs()) {
    if (!this->gpregs().IsInitialized()) return false;
  }
  if (has_fpsimd()) {
    if (!this->fpsimd().IsInitialized()) return false;
  }
  return true;
}

void thread_info_aarch64::Swap(thread_info_aarch64* other) {
  if (other != this) {
    std::swap(clear_tid_addr_, other->clear_tid_addr_);
    std::swap(tls_, other->tls_);
    std::swap(gpregs_, other->gpregs_);
    std::swap(fpsimd_, other->fpsimd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_info_aarch64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_info_aarch64_descriptor_;
  metadata.reflection = thread_info_aarch64_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
