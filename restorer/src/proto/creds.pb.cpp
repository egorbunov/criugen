// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: creds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "creds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* creds_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  creds_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_creds_2eproto() {
  protobuf_AddDesc_creds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "creds.proto");
  GOOGLE_CHECK(file != NULL);
  creds_entry_descriptor_ = file->message_type(0);
  static const int creds_entry_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, egid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, sgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, fsuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, fsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, cap_inh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, cap_prm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, cap_eff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, cap_bnd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, secbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, lsm_profile_),
  };
  creds_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      creds_entry_descriptor_,
      creds_entry::default_instance_,
      creds_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(creds_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(creds_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_creds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    creds_entry_descriptor_, &creds_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_creds_2eproto() {
  delete creds_entry::default_instance_;
  delete creds_entry_reflection_;
}

void protobuf_AddDesc_creds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013creds.proto\"\367\001\n\013creds_entry\022\013\n\003uid\030\001 \002"
    "(\r\022\013\n\003gid\030\002 \002(\r\022\014\n\004euid\030\003 \002(\r\022\014\n\004egid\030\004 "
    "\002(\r\022\014\n\004suid\030\005 \002(\r\022\014\n\004sgid\030\006 \002(\r\022\r\n\005fsuid"
    "\030\007 \002(\r\022\r\n\005fsgid\030\010 \002(\r\022\017\n\007cap_inh\030\t \003(\r\022\017"
    "\n\007cap_prm\030\n \003(\r\022\017\n\007cap_eff\030\013 \003(\r\022\017\n\007cap_"
    "bnd\030\014 \003(\r\022\017\n\007secbits\030\r \002(\r\022\016\n\006groups\030\016 \003"
    "(\r\022\023\n\013lsm_profile\030\017 \001(\t", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "creds.proto", &protobuf_RegisterTypes);
  creds_entry::default_instance_ = new creds_entry();
  creds_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_creds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_creds_2eproto {
  StaticDescriptorInitializer_creds_2eproto() {
    protobuf_AddDesc_creds_2eproto();
  }
} static_descriptor_initializer_creds_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int creds_entry::kUidFieldNumber;
const int creds_entry::kGidFieldNumber;
const int creds_entry::kEuidFieldNumber;
const int creds_entry::kEgidFieldNumber;
const int creds_entry::kSuidFieldNumber;
const int creds_entry::kSgidFieldNumber;
const int creds_entry::kFsuidFieldNumber;
const int creds_entry::kFsgidFieldNumber;
const int creds_entry::kCapInhFieldNumber;
const int creds_entry::kCapPrmFieldNumber;
const int creds_entry::kCapEffFieldNumber;
const int creds_entry::kCapBndFieldNumber;
const int creds_entry::kSecbitsFieldNumber;
const int creds_entry::kGroupsFieldNumber;
const int creds_entry::kLsmProfileFieldNumber;
#endif  // !_MSC_VER

creds_entry::creds_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:creds_entry)
}

void creds_entry::InitAsDefaultInstance() {
}

creds_entry::creds_entry(const creds_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:creds_entry)
}

void creds_entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  gid_ = 0u;
  euid_ = 0u;
  egid_ = 0u;
  suid_ = 0u;
  sgid_ = 0u;
  fsuid_ = 0u;
  fsgid_ = 0u;
  secbits_ = 0u;
  lsm_profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

creds_entry::~creds_entry() {
  // @@protoc_insertion_point(destructor:creds_entry)
  SharedDtor();
}

void creds_entry::SharedDtor() {
  if (lsm_profile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lsm_profile_;
  }
  if (this != default_instance_) {
  }
}

void creds_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* creds_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return creds_entry_descriptor_;
}

const creds_entry& creds_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_creds_2eproto();
  return *default_instance_;
}

creds_entry* creds_entry::default_instance_ = NULL;

creds_entry* creds_entry::New() const {
  return new creds_entry;
}

void creds_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<creds_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, fsgid_);
  }
  if (_has_bits_[8 / 32] & 20480) {
    secbits_ = 0u;
    if (has_lsm_profile()) {
      if (lsm_profile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lsm_profile_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cap_inh_.Clear();
  cap_prm_.Clear();
  cap_eff_.Clear();
  cap_bnd_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool creds_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:creds_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required uint32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_euid;
        break;
      }

      // required uint32 euid = 3;
      case 3: {
        if (tag == 24) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_egid;
        break;
      }

      // required uint32 egid = 4;
      case 4: {
        if (tag == 32) {
         parse_egid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &egid_)));
          set_has_egid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_suid;
        break;
      }

      // required uint32 suid = 5;
      case 5: {
        if (tag == 40) {
         parse_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sgid;
        break;
      }

      // required uint32 sgid = 6;
      case 6: {
        if (tag == 48) {
         parse_sgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sgid_)));
          set_has_sgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fsuid;
        break;
      }

      // required uint32 fsuid = 7;
      case 7: {
        if (tag == 56) {
         parse_fsuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsuid_)));
          set_has_fsuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fsgid;
        break;
      }

      // required uint32 fsgid = 8;
      case 8: {
        if (tag == 64) {
         parse_fsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsgid_)));
          set_has_fsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cap_inh;
        break;
      }

      // repeated uint32 cap_inh = 9;
      case 9: {
        if (tag == 72) {
         parse_cap_inh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_cap_inh())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cap_inh())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cap_inh;
        if (input->ExpectTag(80)) goto parse_cap_prm;
        break;
      }

      // repeated uint32 cap_prm = 10;
      case 10: {
        if (tag == 80) {
         parse_cap_prm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_cap_prm())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cap_prm())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cap_prm;
        if (input->ExpectTag(88)) goto parse_cap_eff;
        break;
      }

      // repeated uint32 cap_eff = 11;
      case 11: {
        if (tag == 88) {
         parse_cap_eff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_cap_eff())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cap_eff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cap_eff;
        if (input->ExpectTag(96)) goto parse_cap_bnd;
        break;
      }

      // repeated uint32 cap_bnd = 12;
      case 12: {
        if (tag == 96) {
         parse_cap_bnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_cap_bnd())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cap_bnd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cap_bnd;
        if (input->ExpectTag(104)) goto parse_secbits;
        break;
      }

      // required uint32 secbits = 13;
      case 13: {
        if (tag == 104) {
         parse_secbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secbits_)));
          set_has_secbits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_groups;
        break;
      }

      // repeated uint32 groups = 14;
      case 14: {
        if (tag == 112) {
         parse_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_groups())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_groups())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_groups;
        if (input->ExpectTag(122)) goto parse_lsm_profile;
        break;
      }

      // optional string lsm_profile = 15;
      case 15: {
        if (tag == 122) {
         parse_lsm_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lsm_profile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lsm_profile().data(), this->lsm_profile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lsm_profile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:creds_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:creds_entry)
  return false;
#undef DO_
}

void creds_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:creds_entry)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->euid(), output);
  }

  // required uint32 egid = 4;
  if (has_egid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->egid(), output);
  }

  // required uint32 suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->suid(), output);
  }

  // required uint32 sgid = 6;
  if (has_sgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sgid(), output);
  }

  // required uint32 fsuid = 7;
  if (has_fsuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fsuid(), output);
  }

  // required uint32 fsgid = 8;
  if (has_fsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fsgid(), output);
  }

  // repeated uint32 cap_inh = 9;
  for (int i = 0; i < this->cap_inh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->cap_inh(i), output);
  }

  // repeated uint32 cap_prm = 10;
  for (int i = 0; i < this->cap_prm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->cap_prm(i), output);
  }

  // repeated uint32 cap_eff = 11;
  for (int i = 0; i < this->cap_eff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->cap_eff(i), output);
  }

  // repeated uint32 cap_bnd = 12;
  for (int i = 0; i < this->cap_bnd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->cap_bnd(i), output);
  }

  // required uint32 secbits = 13;
  if (has_secbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->secbits(), output);
  }

  // repeated uint32 groups = 14;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->groups(i), output);
  }

  // optional string lsm_profile = 15;
  if (has_lsm_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lsm_profile().data(), this->lsm_profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lsm_profile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->lsm_profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:creds_entry)
}

::google::protobuf::uint8* creds_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:creds_entry)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  // required uint32 euid = 3;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->euid(), target);
  }

  // required uint32 egid = 4;
  if (has_egid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->egid(), target);
  }

  // required uint32 suid = 5;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->suid(), target);
  }

  // required uint32 sgid = 6;
  if (has_sgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sgid(), target);
  }

  // required uint32 fsuid = 7;
  if (has_fsuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fsuid(), target);
  }

  // required uint32 fsgid = 8;
  if (has_fsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fsgid(), target);
  }

  // repeated uint32 cap_inh = 9;
  for (int i = 0; i < this->cap_inh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->cap_inh(i), target);
  }

  // repeated uint32 cap_prm = 10;
  for (int i = 0; i < this->cap_prm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->cap_prm(i), target);
  }

  // repeated uint32 cap_eff = 11;
  for (int i = 0; i < this->cap_eff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->cap_eff(i), target);
  }

  // repeated uint32 cap_bnd = 12;
  for (int i = 0; i < this->cap_bnd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->cap_bnd(i), target);
  }

  // required uint32 secbits = 13;
  if (has_secbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->secbits(), target);
  }

  // repeated uint32 groups = 14;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->groups(i), target);
  }

  // optional string lsm_profile = 15;
  if (has_lsm_profile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lsm_profile().data(), this->lsm_profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lsm_profile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->lsm_profile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:creds_entry)
  return target;
}

int creds_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // required uint32 euid = 3;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 egid = 4;
    if (has_egid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->egid());
    }

    // required uint32 suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // required uint32 sgid = 6;
    if (has_sgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sgid());
    }

    // required uint32 fsuid = 7;
    if (has_fsuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsuid());
    }

    // required uint32 fsgid = 8;
    if (has_fsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsgid());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // required uint32 secbits = 13;
    if (has_secbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secbits());
    }

    // optional string lsm_profile = 15;
    if (has_lsm_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lsm_profile());
    }

  }
  // repeated uint32 cap_inh = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cap_inh_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cap_inh(i));
    }
    total_size += 1 * this->cap_inh_size() + data_size;
  }

  // repeated uint32 cap_prm = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cap_prm_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cap_prm(i));
    }
    total_size += 1 * this->cap_prm_size() + data_size;
  }

  // repeated uint32 cap_eff = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->cap_eff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cap_eff(i));
    }
    total_size += 1 * this->cap_eff_size() + data_size;
  }

  // repeated uint32 cap_bnd = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->cap_bnd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cap_bnd(i));
    }
    total_size += 1 * this->cap_bnd_size() + data_size;
  }

  // repeated uint32 groups = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->groups_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->groups(i));
    }
    total_size += 1 * this->groups_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void creds_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const creds_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const creds_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void creds_entry::MergeFrom(const creds_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  cap_inh_.MergeFrom(from.cap_inh_);
  cap_prm_.MergeFrom(from.cap_prm_);
  cap_eff_.MergeFrom(from.cap_eff_);
  cap_bnd_.MergeFrom(from.cap_bnd_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_egid()) {
      set_egid(from.egid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_sgid()) {
      set_sgid(from.sgid());
    }
    if (from.has_fsuid()) {
      set_fsuid(from.fsuid());
    }
    if (from.has_fsgid()) {
      set_fsgid(from.fsgid());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_secbits()) {
      set_secbits(from.secbits());
    }
    if (from.has_lsm_profile()) {
      set_lsm_profile(from.lsm_profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void creds_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void creds_entry::CopyFrom(const creds_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool creds_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000010ff) != 0x000010ff) return false;

  return true;
}

void creds_entry::Swap(creds_entry* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(euid_, other->euid_);
    std::swap(egid_, other->egid_);
    std::swap(suid_, other->suid_);
    std::swap(sgid_, other->sgid_);
    std::swap(fsuid_, other->fsuid_);
    std::swap(fsgid_, other->fsgid_);
    cap_inh_.Swap(&other->cap_inh_);
    cap_prm_.Swap(&other->cap_prm_);
    cap_eff_.Swap(&other->cap_eff_);
    cap_bnd_.Swap(&other->cap_bnd_);
    std::swap(secbits_, other->secbits_);
    groups_.Swap(&other->groups_);
    std::swap(lsm_profile_, other->lsm_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata creds_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = creds_entry_descriptor_;
  metadata.reflection = creds_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
