// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* task_core_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_core_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_kobj_ids_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_kobj_ids_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_sas_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_sas_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_core_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_core_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_rlimits_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_rlimits_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* core_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  core_entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* core_entry_march_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* seccomp_mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2eproto() {
  protobuf_AddDesc_core_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core.proto");
  GOOGLE_CHECK(file != NULL);
  task_core_entry_descriptor_ = file->message_type(0);
  static const int task_core_entry_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, exit_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, personality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, blk_sigset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, comm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, timers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, rlimits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, cg_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, signals_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, seccomp_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, seccomp_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, loginuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, oom_score_adj_),
  };
  task_core_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_core_entry_descriptor_,
      task_core_entry::default_instance_,
      task_core_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_core_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_core_entry));
  task_kobj_ids_entry_descriptor_ = file->message_type(1);
  static const int task_kobj_ids_entry_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, vm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, files_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, fs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, sighand_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, pid_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, net_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, ipc_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, uts_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, mnt_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, user_ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, cgroup_ns_id_),
  };
  task_kobj_ids_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_kobj_ids_entry_descriptor_,
      task_kobj_ids_entry::default_instance_,
      task_kobj_ids_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kobj_ids_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_kobj_ids_entry));
  thread_sas_entry_descriptor_ = file->message_type(2);
  static const int thread_sas_entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_sas_entry, ss_sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_sas_entry, ss_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_sas_entry, ss_flags_),
  };
  thread_sas_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_sas_entry_descriptor_,
      thread_sas_entry::default_instance_,
      thread_sas_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_sas_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_sas_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_sas_entry));
  thread_core_entry_descriptor_ = file->message_type(3);
  static const int thread_core_entry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, futex_rla_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, futex_rla_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, sched_nice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, sched_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, sched_prio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, blk_sigset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, sas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, pdeath_sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, signals_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, creds_),
  };
  thread_core_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_core_entry_descriptor_,
      thread_core_entry::default_instance_,
      thread_core_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_core_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_core_entry));
  task_rlimits_entry_descriptor_ = file->message_type(4);
  static const int task_rlimits_entry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_rlimits_entry, rlimits_),
  };
  task_rlimits_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_rlimits_entry_descriptor_,
      task_rlimits_entry::default_instance_,
      task_rlimits_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_rlimits_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_rlimits_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_rlimits_entry));
  core_entry_descriptor_ = file->message_type(5);
  static const int core_entry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, thread_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, ti_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, ti_aarch64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, ti_ppc64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, tc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, thread_core_),
  };
  core_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      core_entry_descriptor_,
      core_entry::default_instance_,
      core_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(core_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(core_entry));
  core_entry_march_descriptor_ = core_entry_descriptor_->enum_type(0);
  seccomp_mode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_core_entry_descriptor_, &task_core_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_kobj_ids_entry_descriptor_, &task_kobj_ids_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_sas_entry_descriptor_, &thread_sas_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_core_entry_descriptor_, &thread_core_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_rlimits_entry_descriptor_, &task_rlimits_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    core_entry_descriptor_, &core_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2eproto() {
  delete task_core_entry::default_instance_;
  delete task_core_entry_reflection_;
  delete task_kobj_ids_entry::default_instance_;
  delete task_kobj_ids_entry_reflection_;
  delete thread_sas_entry::default_instance_;
  delete thread_sas_entry_reflection_;
  delete thread_core_entry::default_instance_;
  delete thread_core_entry_reflection_;
  delete task_rlimits_entry::default_instance_;
  delete task_rlimits_entry_reflection_;
  delete core_entry::default_instance_;
  delete core_entry_reflection_;
}

void protobuf_AddDesc_core_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_core_2dx86_2eproto();
  ::protobuf_AddDesc_core_2darm_2eproto();
  ::protobuf_AddDesc_core_2daarch64_2eproto();
  ::protobuf_AddDesc_core_2dppc64_2eproto();
  ::protobuf_AddDesc_rlimit_2eproto();
  ::protobuf_AddDesc_timer_2eproto();
  ::protobuf_AddDesc_creds_2eproto();
  ::protobuf_AddDesc_siginfo_2eproto();
  ::protobuf_AddDesc_opts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncore.proto\032\016core-x86.proto\032\016core-arm.p"
    "roto\032\022core-aarch64.proto\032\020core-ppc64.pro"
    "to\032\014rlimit.proto\032\013timer.proto\032\013creds.pro"
    "to\032\rsiginfo.proto\032\nopts.proto\"\355\002\n\017task_c"
    "ore_entry\022\022\n\ntask_state\030\001 \002(\r\022\021\n\texit_co"
    "de\030\002 \002(\r\022\023\n\013personality\030\003 \002(\r\022\r\n\005flags\030\004"
    " \002(\r\022\031\n\nblk_sigset\030\005 \002(\004B\005\322\?\002\010\001\022\014\n\004comm\030"
    "\006 \002(\t\022\"\n\006timers\030\007 \001(\0132\022.task_timers_entr"
    "y\022$\n\007rlimits\030\010 \001(\0132\023.task_rlimits_entry\022"
    "\016\n\006cg_set\030\t \001(\r\022&\n\tsignals_s\030\n \001(\0132\023.sig"
    "nal_queue_entry\022#\n\014seccomp_mode\030\013 \001(\0162\r."
    "seccomp_mode\022\026\n\016seccomp_filter\030\014 \001(\r\022\020\n\010"
    "loginuid\030\r \001(\r\022\025\n\room_score_adj\030\016 \001(\005\"\342\001"
    "\n\023task_kobj_ids_entry\022\r\n\005vm_id\030\001 \002(\r\022\020\n\010"
    "files_id\030\002 \002(\r\022\r\n\005fs_id\030\003 \002(\r\022\022\n\nsighand"
    "_id\030\004 \002(\r\022\021\n\tpid_ns_id\030\005 \001(\r\022\021\n\tnet_ns_i"
    "d\030\006 \001(\r\022\021\n\tipc_ns_id\030\007 \001(\r\022\021\n\tuts_ns_id\030"
    "\010 \001(\r\022\021\n\tmnt_ns_id\030\t \001(\r\022\022\n\nuser_ns_id\030\n"
    " \001(\r\022\024\n\014cgroup_ns_id\030\013 \001(\r\"D\n\020thread_sas"
    "_entry\022\r\n\005ss_sp\030\001 \002(\004\022\017\n\007ss_size\030\002 \002(\004\022\020"
    "\n\010ss_flags\030\003 \002(\r\"\210\002\n\021thread_core_entry\022\021"
    "\n\tfutex_rla\030\001 \002(\004\022\025\n\rfutex_rla_len\030\002 \002(\r"
    "\022\022\n\nsched_nice\030\003 \001(\021\022\024\n\014sched_policy\030\004 \001"
    "(\r\022\022\n\nsched_prio\030\005 \001(\r\022\022\n\nblk_sigset\030\006 \001"
    "(\004\022\036\n\003sas\030\007 \001(\0132\021.thread_sas_entry\022\022\n\npd"
    "eath_sig\030\010 \001(\r\022&\n\tsignals_p\030\t \001(\0132\023.sign"
    "al_queue_entry\022\033\n\005creds\030\n \001(\0132\014.creds_en"
    "try\"4\n\022task_rlimits_entry\022\036\n\007rlimits\030\001 \003"
    "(\0132\r.rlimit_entry\"\364\002\n\ncore_entry\022 \n\005mtyp"
    "e\030\001 \002(\0162\021.core_entry.march\022%\n\013thread_inf"
    "o\030\002 \001(\0132\020.thread_info_x86\022 \n\006ti_arm\030\006 \001("
    "\0132\020.thread_info_arm\022(\n\nti_aarch64\030\010 \001(\0132"
    "\024.thread_info_aarch64\022$\n\010ti_ppc64\030\t \001(\0132"
    "\022.thread_info_ppc64\022\034\n\002tc\030\003 \001(\0132\020.task_c"
    "ore_entry\022!\n\003ids\030\004 \001(\0132\024.task_kobj_ids_e"
    "ntry\022\'\n\013thread_core\030\005 \001(\0132\022.thread_core_"
    "entry\"A\n\005march\022\013\n\007UNKNOWN\020\000\022\n\n\006X86_64\020\001\022"
    "\007\n\003ARM\020\002\022\013\n\007AARCH64\020\003\022\t\n\005PPC64\020\004*4\n\014secc"
    "omp_mode\022\014\n\010disabled\020\000\022\n\n\006strict\020\001\022\n\n\006fi"
    "lter\020\002", 1566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
  task_core_entry::default_instance_ = new task_core_entry();
  task_kobj_ids_entry::default_instance_ = new task_kobj_ids_entry();
  thread_sas_entry::default_instance_ = new thread_sas_entry();
  thread_core_entry::default_instance_ = new thread_core_entry();
  task_rlimits_entry::default_instance_ = new task_rlimits_entry();
  core_entry::default_instance_ = new core_entry();
  task_core_entry::default_instance_->InitAsDefaultInstance();
  task_kobj_ids_entry::default_instance_->InitAsDefaultInstance();
  thread_sas_entry::default_instance_->InitAsDefaultInstance();
  thread_core_entry::default_instance_->InitAsDefaultInstance();
  task_rlimits_entry::default_instance_->InitAsDefaultInstance();
  core_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2eproto {
  StaticDescriptorInitializer_core_2eproto() {
    protobuf_AddDesc_core_2eproto();
  }
} static_descriptor_initializer_core_2eproto_;
const ::google::protobuf::EnumDescriptor* seccomp_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seccomp_mode_descriptor_;
}
bool seccomp_mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int task_core_entry::kTaskStateFieldNumber;
const int task_core_entry::kExitCodeFieldNumber;
const int task_core_entry::kPersonalityFieldNumber;
const int task_core_entry::kFlagsFieldNumber;
const int task_core_entry::kBlkSigsetFieldNumber;
const int task_core_entry::kCommFieldNumber;
const int task_core_entry::kTimersFieldNumber;
const int task_core_entry::kRlimitsFieldNumber;
const int task_core_entry::kCgSetFieldNumber;
const int task_core_entry::kSignalsSFieldNumber;
const int task_core_entry::kSeccompModeFieldNumber;
const int task_core_entry::kSeccompFilterFieldNumber;
const int task_core_entry::kLoginuidFieldNumber;
const int task_core_entry::kOomScoreAdjFieldNumber;
#endif  // !_MSC_VER

task_core_entry::task_core_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_core_entry)
}

void task_core_entry::InitAsDefaultInstance() {
  timers_ = const_cast< ::task_timers_entry*>(&::task_timers_entry::default_instance());
  rlimits_ = const_cast< ::task_rlimits_entry*>(&::task_rlimits_entry::default_instance());
  signals_s_ = const_cast< ::signal_queue_entry*>(&::signal_queue_entry::default_instance());
}

task_core_entry::task_core_entry(const task_core_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_core_entry)
}

void task_core_entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_state_ = 0u;
  exit_code_ = 0u;
  personality_ = 0u;
  flags_ = 0u;
  blk_sigset_ = GOOGLE_ULONGLONG(0);
  comm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timers_ = NULL;
  rlimits_ = NULL;
  cg_set_ = 0u;
  signals_s_ = NULL;
  seccomp_mode_ = 0;
  seccomp_filter_ = 0u;
  loginuid_ = 0u;
  oom_score_adj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_core_entry::~task_core_entry() {
  // @@protoc_insertion_point(destructor:task_core_entry)
  SharedDtor();
}

void task_core_entry::SharedDtor() {
  if (comm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comm_;
  }
  if (this != default_instance_) {
    delete timers_;
    delete rlimits_;
    delete signals_s_;
  }
}

void task_core_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_core_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_core_entry_descriptor_;
}

const task_core_entry& task_core_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

task_core_entry* task_core_entry::default_instance_ = NULL;

task_core_entry* task_core_entry::New() const {
  return new task_core_entry;
}

void task_core_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<task_core_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(task_state_, blk_sigset_);
    if (has_comm()) {
      if (comm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comm_->clear();
      }
    }
    if (has_timers()) {
      if (timers_ != NULL) timers_->::task_timers_entry::Clear();
    }
    if (has_rlimits()) {
      if (rlimits_ != NULL) rlimits_->::task_rlimits_entry::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(cg_set_, oom_score_adj_);
    if (has_signals_s()) {
      if (signals_s_ != NULL) signals_s_->::signal_queue_entry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_core_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_core_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exit_code;
        break;
      }

      // required uint32 exit_code = 2;
      case 2: {
        if (tag == 16) {
         parse_exit_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_code_)));
          set_has_exit_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_personality;
        break;
      }

      // required uint32 personality = 3;
      case 3: {
        if (tag == 24) {
         parse_personality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personality_)));
          set_has_personality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blk_sigset;
        break;
      }

      // required uint64 blk_sigset = 5;
      case 5: {
        if (tag == 40) {
         parse_blk_sigset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_sigset_)));
          set_has_blk_sigset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_comm;
        break;
      }

      // required string comm = 6;
      case 6: {
        if (tag == 50) {
         parse_comm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comm().data(), this->comm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_timers;
        break;
      }

      // optional .task_timers_entry timers = 7;
      case 7: {
        if (tag == 58) {
         parse_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rlimits;
        break;
      }

      // optional .task_rlimits_entry rlimits = 8;
      case 8: {
        if (tag == 66) {
         parse_rlimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rlimits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cg_set;
        break;
      }

      // optional uint32 cg_set = 9;
      case 9: {
        if (tag == 72) {
         parse_cg_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cg_set_)));
          set_has_cg_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_signals_s;
        break;
      }

      // optional .signal_queue_entry signals_s = 10;
      case 10: {
        if (tag == 82) {
         parse_signals_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signals_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_seccomp_mode;
        break;
      }

      // optional .seccomp_mode seccomp_mode = 11;
      case 11: {
        if (tag == 88) {
         parse_seccomp_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::seccomp_mode_IsValid(value)) {
            set_seccomp_mode(static_cast< ::seccomp_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_seccomp_filter;
        break;
      }

      // optional uint32 seccomp_filter = 12;
      case 12: {
        if (tag == 96) {
         parse_seccomp_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seccomp_filter_)));
          set_has_seccomp_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_loginuid;
        break;
      }

      // optional uint32 loginuid = 13;
      case 13: {
        if (tag == 104) {
         parse_loginuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginuid_)));
          set_has_loginuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_oom_score_adj;
        break;
      }

      // optional int32 oom_score_adj = 14;
      case 14: {
        if (tag == 112) {
         parse_oom_score_adj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oom_score_adj_)));
          set_has_oom_score_adj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_core_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_core_entry)
  return false;
#undef DO_
}

void task_core_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_core_entry)
  // required uint32 task_state = 1;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_state(), output);
  }

  // required uint32 exit_code = 2;
  if (has_exit_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exit_code(), output);
  }

  // required uint32 personality = 3;
  if (has_personality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->personality(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // required uint64 blk_sigset = 5;
  if (has_blk_sigset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->blk_sigset(), output);
  }

  // required string comm = 6;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->comm(), output);
  }

  // optional .task_timers_entry timers = 7;
  if (has_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timers(), output);
  }

  // optional .task_rlimits_entry rlimits = 8;
  if (has_rlimits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rlimits(), output);
  }

  // optional uint32 cg_set = 9;
  if (has_cg_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cg_set(), output);
  }

  // optional .signal_queue_entry signals_s = 10;
  if (has_signals_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signals_s(), output);
  }

  // optional .seccomp_mode seccomp_mode = 11;
  if (has_seccomp_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->seccomp_mode(), output);
  }

  // optional uint32 seccomp_filter = 12;
  if (has_seccomp_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seccomp_filter(), output);
  }

  // optional uint32 loginuid = 13;
  if (has_loginuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loginuid(), output);
  }

  // optional int32 oom_score_adj = 14;
  if (has_oom_score_adj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->oom_score_adj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_core_entry)
}

::google::protobuf::uint8* task_core_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_core_entry)
  // required uint32 task_state = 1;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_state(), target);
  }

  // required uint32 exit_code = 2;
  if (has_exit_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exit_code(), target);
  }

  // required uint32 personality = 3;
  if (has_personality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->personality(), target);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  // required uint64 blk_sigset = 5;
  if (has_blk_sigset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->blk_sigset(), target);
  }

  // required string comm = 6;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comm().data(), this->comm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comm(), target);
  }

  // optional .task_timers_entry timers = 7;
  if (has_timers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timers(), target);
  }

  // optional .task_rlimits_entry rlimits = 8;
  if (has_rlimits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rlimits(), target);
  }

  // optional uint32 cg_set = 9;
  if (has_cg_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cg_set(), target);
  }

  // optional .signal_queue_entry signals_s = 10;
  if (has_signals_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signals_s(), target);
  }

  // optional .seccomp_mode seccomp_mode = 11;
  if (has_seccomp_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->seccomp_mode(), target);
  }

  // optional uint32 seccomp_filter = 12;
  if (has_seccomp_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seccomp_filter(), target);
  }

  // optional uint32 loginuid = 13;
  if (has_loginuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loginuid(), target);
  }

  // optional int32 oom_score_adj = 14;
  if (has_oom_score_adj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->oom_score_adj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_core_entry)
  return target;
}

int task_core_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_state = 1;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_state());
    }

    // required uint32 exit_code = 2;
    if (has_exit_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exit_code());
    }

    // required uint32 personality = 3;
    if (has_personality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personality());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint64 blk_sigset = 5;
    if (has_blk_sigset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blk_sigset());
    }

    // required string comm = 6;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comm());
    }

    // optional .task_timers_entry timers = 7;
    if (has_timers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timers());
    }

    // optional .task_rlimits_entry rlimits = 8;
    if (has_rlimits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rlimits());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cg_set = 9;
    if (has_cg_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cg_set());
    }

    // optional .signal_queue_entry signals_s = 10;
    if (has_signals_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signals_s());
    }

    // optional .seccomp_mode seccomp_mode = 11;
    if (has_seccomp_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->seccomp_mode());
    }

    // optional uint32 seccomp_filter = 12;
    if (has_seccomp_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seccomp_filter());
    }

    // optional uint32 loginuid = 13;
    if (has_loginuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginuid());
    }

    // optional int32 oom_score_adj = 14;
    if (has_oom_score_adj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oom_score_adj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_core_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_core_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_core_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_core_entry::MergeFrom(const task_core_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_exit_code()) {
      set_exit_code(from.exit_code());
    }
    if (from.has_personality()) {
      set_personality(from.personality());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_blk_sigset()) {
      set_blk_sigset(from.blk_sigset());
    }
    if (from.has_comm()) {
      set_comm(from.comm());
    }
    if (from.has_timers()) {
      mutable_timers()->::task_timers_entry::MergeFrom(from.timers());
    }
    if (from.has_rlimits()) {
      mutable_rlimits()->::task_rlimits_entry::MergeFrom(from.rlimits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cg_set()) {
      set_cg_set(from.cg_set());
    }
    if (from.has_signals_s()) {
      mutable_signals_s()->::signal_queue_entry::MergeFrom(from.signals_s());
    }
    if (from.has_seccomp_mode()) {
      set_seccomp_mode(from.seccomp_mode());
    }
    if (from.has_seccomp_filter()) {
      set_seccomp_filter(from.seccomp_filter());
    }
    if (from.has_loginuid()) {
      set_loginuid(from.loginuid());
    }
    if (from.has_oom_score_adj()) {
      set_oom_score_adj(from.oom_score_adj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_core_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_core_entry::CopyFrom(const task_core_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_core_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_timers()) {
    if (!this->timers().IsInitialized()) return false;
  }
  if (has_rlimits()) {
    if (!this->rlimits().IsInitialized()) return false;
  }
  if (has_signals_s()) {
    if (!this->signals_s().IsInitialized()) return false;
  }
  return true;
}

void task_core_entry::Swap(task_core_entry* other) {
  if (other != this) {
    std::swap(task_state_, other->task_state_);
    std::swap(exit_code_, other->exit_code_);
    std::swap(personality_, other->personality_);
    std::swap(flags_, other->flags_);
    std::swap(blk_sigset_, other->blk_sigset_);
    std::swap(comm_, other->comm_);
    std::swap(timers_, other->timers_);
    std::swap(rlimits_, other->rlimits_);
    std::swap(cg_set_, other->cg_set_);
    std::swap(signals_s_, other->signals_s_);
    std::swap(seccomp_mode_, other->seccomp_mode_);
    std::swap(seccomp_filter_, other->seccomp_filter_);
    std::swap(loginuid_, other->loginuid_);
    std::swap(oom_score_adj_, other->oom_score_adj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_core_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_core_entry_descriptor_;
  metadata.reflection = task_core_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_kobj_ids_entry::kVmIdFieldNumber;
const int task_kobj_ids_entry::kFilesIdFieldNumber;
const int task_kobj_ids_entry::kFsIdFieldNumber;
const int task_kobj_ids_entry::kSighandIdFieldNumber;
const int task_kobj_ids_entry::kPidNsIdFieldNumber;
const int task_kobj_ids_entry::kNetNsIdFieldNumber;
const int task_kobj_ids_entry::kIpcNsIdFieldNumber;
const int task_kobj_ids_entry::kUtsNsIdFieldNumber;
const int task_kobj_ids_entry::kMntNsIdFieldNumber;
const int task_kobj_ids_entry::kUserNsIdFieldNumber;
const int task_kobj_ids_entry::kCgroupNsIdFieldNumber;
#endif  // !_MSC_VER

task_kobj_ids_entry::task_kobj_ids_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_kobj_ids_entry)
}

void task_kobj_ids_entry::InitAsDefaultInstance() {
}

task_kobj_ids_entry::task_kobj_ids_entry(const task_kobj_ids_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_kobj_ids_entry)
}

void task_kobj_ids_entry::SharedCtor() {
  _cached_size_ = 0;
  vm_id_ = 0u;
  files_id_ = 0u;
  fs_id_ = 0u;
  sighand_id_ = 0u;
  pid_ns_id_ = 0u;
  net_ns_id_ = 0u;
  ipc_ns_id_ = 0u;
  uts_ns_id_ = 0u;
  mnt_ns_id_ = 0u;
  user_ns_id_ = 0u;
  cgroup_ns_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_kobj_ids_entry::~task_kobj_ids_entry() {
  // @@protoc_insertion_point(destructor:task_kobj_ids_entry)
  SharedDtor();
}

void task_kobj_ids_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_kobj_ids_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_kobj_ids_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_kobj_ids_entry_descriptor_;
}

const task_kobj_ids_entry& task_kobj_ids_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

task_kobj_ids_entry* task_kobj_ids_entry::default_instance_ = NULL;

task_kobj_ids_entry* task_kobj_ids_entry::New() const {
  return new task_kobj_ids_entry;
}

void task_kobj_ids_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<task_kobj_ids_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vm_id_, uts_ns_id_);
  }
  ZR_(mnt_ns_id_, cgroup_ns_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_kobj_ids_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_kobj_ids_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vm_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vm_id_)));
          set_has_vm_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_files_id;
        break;
      }

      // required uint32 files_id = 2;
      case 2: {
        if (tag == 16) {
         parse_files_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &files_id_)));
          set_has_files_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fs_id;
        break;
      }

      // required uint32 fs_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fs_id_)));
          set_has_fs_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sighand_id;
        break;
      }

      // required uint32 sighand_id = 4;
      case 4: {
        if (tag == 32) {
         parse_sighand_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sighand_id_)));
          set_has_sighand_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid_ns_id;
        break;
      }

      // optional uint32 pid_ns_id = 5;
      case 5: {
        if (tag == 40) {
         parse_pid_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_ns_id_)));
          set_has_pid_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_net_ns_id;
        break;
      }

      // optional uint32 net_ns_id = 6;
      case 6: {
        if (tag == 48) {
         parse_net_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_ns_id_)));
          set_has_net_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ipc_ns_id;
        break;
      }

      // optional uint32 ipc_ns_id = 7;
      case 7: {
        if (tag == 56) {
         parse_ipc_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipc_ns_id_)));
          set_has_ipc_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_uts_ns_id;
        break;
      }

      // optional uint32 uts_ns_id = 8;
      case 8: {
        if (tag == 64) {
         parse_uts_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uts_ns_id_)));
          set_has_uts_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mnt_ns_id;
        break;
      }

      // optional uint32 mnt_ns_id = 9;
      case 9: {
        if (tag == 72) {
         parse_mnt_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnt_ns_id_)));
          set_has_mnt_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_user_ns_id;
        break;
      }

      // optional uint32 user_ns_id = 10;
      case 10: {
        if (tag == 80) {
         parse_user_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_ns_id_)));
          set_has_user_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cgroup_ns_id;
        break;
      }

      // optional uint32 cgroup_ns_id = 11;
      case 11: {
        if (tag == 88) {
         parse_cgroup_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cgroup_ns_id_)));
          set_has_cgroup_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_kobj_ids_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_kobj_ids_entry)
  return false;
#undef DO_
}

void task_kobj_ids_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_kobj_ids_entry)
  // required uint32 vm_id = 1;
  if (has_vm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vm_id(), output);
  }

  // required uint32 files_id = 2;
  if (has_files_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->files_id(), output);
  }

  // required uint32 fs_id = 3;
  if (has_fs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fs_id(), output);
  }

  // required uint32 sighand_id = 4;
  if (has_sighand_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sighand_id(), output);
  }

  // optional uint32 pid_ns_id = 5;
  if (has_pid_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pid_ns_id(), output);
  }

  // optional uint32 net_ns_id = 6;
  if (has_net_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->net_ns_id(), output);
  }

  // optional uint32 ipc_ns_id = 7;
  if (has_ipc_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ipc_ns_id(), output);
  }

  // optional uint32 uts_ns_id = 8;
  if (has_uts_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uts_ns_id(), output);
  }

  // optional uint32 mnt_ns_id = 9;
  if (has_mnt_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mnt_ns_id(), output);
  }

  // optional uint32 user_ns_id = 10;
  if (has_user_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->user_ns_id(), output);
  }

  // optional uint32 cgroup_ns_id = 11;
  if (has_cgroup_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cgroup_ns_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_kobj_ids_entry)
}

::google::protobuf::uint8* task_kobj_ids_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_kobj_ids_entry)
  // required uint32 vm_id = 1;
  if (has_vm_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vm_id(), target);
  }

  // required uint32 files_id = 2;
  if (has_files_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->files_id(), target);
  }

  // required uint32 fs_id = 3;
  if (has_fs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fs_id(), target);
  }

  // required uint32 sighand_id = 4;
  if (has_sighand_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sighand_id(), target);
  }

  // optional uint32 pid_ns_id = 5;
  if (has_pid_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pid_ns_id(), target);
  }

  // optional uint32 net_ns_id = 6;
  if (has_net_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->net_ns_id(), target);
  }

  // optional uint32 ipc_ns_id = 7;
  if (has_ipc_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ipc_ns_id(), target);
  }

  // optional uint32 uts_ns_id = 8;
  if (has_uts_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uts_ns_id(), target);
  }

  // optional uint32 mnt_ns_id = 9;
  if (has_mnt_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mnt_ns_id(), target);
  }

  // optional uint32 user_ns_id = 10;
  if (has_user_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->user_ns_id(), target);
  }

  // optional uint32 cgroup_ns_id = 11;
  if (has_cgroup_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cgroup_ns_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_kobj_ids_entry)
  return target;
}

int task_kobj_ids_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 vm_id = 1;
    if (has_vm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vm_id());
    }

    // required uint32 files_id = 2;
    if (has_files_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->files_id());
    }

    // required uint32 fs_id = 3;
    if (has_fs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fs_id());
    }

    // required uint32 sighand_id = 4;
    if (has_sighand_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sighand_id());
    }

    // optional uint32 pid_ns_id = 5;
    if (has_pid_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid_ns_id());
    }

    // optional uint32 net_ns_id = 6;
    if (has_net_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_ns_id());
    }

    // optional uint32 ipc_ns_id = 7;
    if (has_ipc_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipc_ns_id());
    }

    // optional uint32 uts_ns_id = 8;
    if (has_uts_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uts_ns_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mnt_ns_id = 9;
    if (has_mnt_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mnt_ns_id());
    }

    // optional uint32 user_ns_id = 10;
    if (has_user_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_ns_id());
    }

    // optional uint32 cgroup_ns_id = 11;
    if (has_cgroup_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cgroup_ns_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_kobj_ids_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_kobj_ids_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_kobj_ids_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_kobj_ids_entry::MergeFrom(const task_kobj_ids_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vm_id()) {
      set_vm_id(from.vm_id());
    }
    if (from.has_files_id()) {
      set_files_id(from.files_id());
    }
    if (from.has_fs_id()) {
      set_fs_id(from.fs_id());
    }
    if (from.has_sighand_id()) {
      set_sighand_id(from.sighand_id());
    }
    if (from.has_pid_ns_id()) {
      set_pid_ns_id(from.pid_ns_id());
    }
    if (from.has_net_ns_id()) {
      set_net_ns_id(from.net_ns_id());
    }
    if (from.has_ipc_ns_id()) {
      set_ipc_ns_id(from.ipc_ns_id());
    }
    if (from.has_uts_ns_id()) {
      set_uts_ns_id(from.uts_ns_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mnt_ns_id()) {
      set_mnt_ns_id(from.mnt_ns_id());
    }
    if (from.has_user_ns_id()) {
      set_user_ns_id(from.user_ns_id());
    }
    if (from.has_cgroup_ns_id()) {
      set_cgroup_ns_id(from.cgroup_ns_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_kobj_ids_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_kobj_ids_entry::CopyFrom(const task_kobj_ids_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_kobj_ids_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void task_kobj_ids_entry::Swap(task_kobj_ids_entry* other) {
  if (other != this) {
    std::swap(vm_id_, other->vm_id_);
    std::swap(files_id_, other->files_id_);
    std::swap(fs_id_, other->fs_id_);
    std::swap(sighand_id_, other->sighand_id_);
    std::swap(pid_ns_id_, other->pid_ns_id_);
    std::swap(net_ns_id_, other->net_ns_id_);
    std::swap(ipc_ns_id_, other->ipc_ns_id_);
    std::swap(uts_ns_id_, other->uts_ns_id_);
    std::swap(mnt_ns_id_, other->mnt_ns_id_);
    std::swap(user_ns_id_, other->user_ns_id_);
    std::swap(cgroup_ns_id_, other->cgroup_ns_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_kobj_ids_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_kobj_ids_entry_descriptor_;
  metadata.reflection = task_kobj_ids_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_sas_entry::kSsSpFieldNumber;
const int thread_sas_entry::kSsSizeFieldNumber;
const int thread_sas_entry::kSsFlagsFieldNumber;
#endif  // !_MSC_VER

thread_sas_entry::thread_sas_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_sas_entry)
}

void thread_sas_entry::InitAsDefaultInstance() {
}

thread_sas_entry::thread_sas_entry(const thread_sas_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_sas_entry)
}

void thread_sas_entry::SharedCtor() {
  _cached_size_ = 0;
  ss_sp_ = GOOGLE_ULONGLONG(0);
  ss_size_ = GOOGLE_ULONGLONG(0);
  ss_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_sas_entry::~thread_sas_entry() {
  // @@protoc_insertion_point(destructor:thread_sas_entry)
  SharedDtor();
}

void thread_sas_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void thread_sas_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_sas_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_sas_entry_descriptor_;
}

const thread_sas_entry& thread_sas_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

thread_sas_entry* thread_sas_entry::default_instance_ = NULL;

thread_sas_entry* thread_sas_entry::New() const {
  return new thread_sas_entry;
}

void thread_sas_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<thread_sas_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ss_sp_, ss_flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_sas_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_sas_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ss_sp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ss_sp_)));
          set_has_ss_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ss_size;
        break;
      }

      // required uint64 ss_size = 2;
      case 2: {
        if (tag == 16) {
         parse_ss_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ss_size_)));
          set_has_ss_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ss_flags;
        break;
      }

      // required uint32 ss_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_ss_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ss_flags_)));
          set_has_ss_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_sas_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_sas_entry)
  return false;
#undef DO_
}

void thread_sas_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_sas_entry)
  // required uint64 ss_sp = 1;
  if (has_ss_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ss_sp(), output);
  }

  // required uint64 ss_size = 2;
  if (has_ss_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ss_size(), output);
  }

  // required uint32 ss_flags = 3;
  if (has_ss_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ss_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_sas_entry)
}

::google::protobuf::uint8* thread_sas_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_sas_entry)
  // required uint64 ss_sp = 1;
  if (has_ss_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ss_sp(), target);
  }

  // required uint64 ss_size = 2;
  if (has_ss_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ss_size(), target);
  }

  // required uint32 ss_flags = 3;
  if (has_ss_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ss_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_sas_entry)
  return target;
}

int thread_sas_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ss_sp = 1;
    if (has_ss_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ss_sp());
    }

    // required uint64 ss_size = 2;
    if (has_ss_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ss_size());
    }

    // required uint32 ss_flags = 3;
    if (has_ss_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ss_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_sas_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_sas_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_sas_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_sas_entry::MergeFrom(const thread_sas_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ss_sp()) {
      set_ss_sp(from.ss_sp());
    }
    if (from.has_ss_size()) {
      set_ss_size(from.ss_size());
    }
    if (from.has_ss_flags()) {
      set_ss_flags(from.ss_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_sas_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_sas_entry::CopyFrom(const thread_sas_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_sas_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void thread_sas_entry::Swap(thread_sas_entry* other) {
  if (other != this) {
    std::swap(ss_sp_, other->ss_sp_);
    std::swap(ss_size_, other->ss_size_);
    std::swap(ss_flags_, other->ss_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_sas_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_sas_entry_descriptor_;
  metadata.reflection = thread_sas_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_core_entry::kFutexRlaFieldNumber;
const int thread_core_entry::kFutexRlaLenFieldNumber;
const int thread_core_entry::kSchedNiceFieldNumber;
const int thread_core_entry::kSchedPolicyFieldNumber;
const int thread_core_entry::kSchedPrioFieldNumber;
const int thread_core_entry::kBlkSigsetFieldNumber;
const int thread_core_entry::kSasFieldNumber;
const int thread_core_entry::kPdeathSigFieldNumber;
const int thread_core_entry::kSignalsPFieldNumber;
const int thread_core_entry::kCredsFieldNumber;
#endif  // !_MSC_VER

thread_core_entry::thread_core_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_core_entry)
}

void thread_core_entry::InitAsDefaultInstance() {
  sas_ = const_cast< ::thread_sas_entry*>(&::thread_sas_entry::default_instance());
  signals_p_ = const_cast< ::signal_queue_entry*>(&::signal_queue_entry::default_instance());
  creds_ = const_cast< ::creds_entry*>(&::creds_entry::default_instance());
}

thread_core_entry::thread_core_entry(const thread_core_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_core_entry)
}

void thread_core_entry::SharedCtor() {
  _cached_size_ = 0;
  futex_rla_ = GOOGLE_ULONGLONG(0);
  futex_rla_len_ = 0u;
  sched_nice_ = 0;
  sched_policy_ = 0u;
  sched_prio_ = 0u;
  blk_sigset_ = GOOGLE_ULONGLONG(0);
  sas_ = NULL;
  pdeath_sig_ = 0u;
  signals_p_ = NULL;
  creds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_core_entry::~thread_core_entry() {
  // @@protoc_insertion_point(destructor:thread_core_entry)
  SharedDtor();
}

void thread_core_entry::SharedDtor() {
  if (this != default_instance_) {
    delete sas_;
    delete signals_p_;
    delete creds_;
  }
}

void thread_core_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_core_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_core_entry_descriptor_;
}

const thread_core_entry& thread_core_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

thread_core_entry* thread_core_entry::default_instance_ = NULL;

thread_core_entry* thread_core_entry::New() const {
  return new thread_core_entry;
}

void thread_core_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<thread_core_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(futex_rla_, blk_sigset_);
    if (has_sas()) {
      if (sas_ != NULL) sas_->::thread_sas_entry::Clear();
    }
    pdeath_sig_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_signals_p()) {
      if (signals_p_ != NULL) signals_p_->::signal_queue_entry::Clear();
    }
    if (has_creds()) {
      if (creds_ != NULL) creds_->::creds_entry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_core_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_core_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 futex_rla = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &futex_rla_)));
          set_has_futex_rla();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_futex_rla_len;
        break;
      }

      // required uint32 futex_rla_len = 2;
      case 2: {
        if (tag == 16) {
         parse_futex_rla_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &futex_rla_len_)));
          set_has_futex_rla_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sched_nice;
        break;
      }

      // optional sint32 sched_nice = 3;
      case 3: {
        if (tag == 24) {
         parse_sched_nice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sched_nice_)));
          set_has_sched_nice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sched_policy;
        break;
      }

      // optional uint32 sched_policy = 4;
      case 4: {
        if (tag == 32) {
         parse_sched_policy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sched_policy_)));
          set_has_sched_policy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sched_prio;
        break;
      }

      // optional uint32 sched_prio = 5;
      case 5: {
        if (tag == 40) {
         parse_sched_prio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sched_prio_)));
          set_has_sched_prio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_blk_sigset;
        break;
      }

      // optional uint64 blk_sigset = 6;
      case 6: {
        if (tag == 48) {
         parse_blk_sigset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blk_sigset_)));
          set_has_blk_sigset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sas;
        break;
      }

      // optional .thread_sas_entry sas = 7;
      case 7: {
        if (tag == 58) {
         parse_sas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pdeath_sig;
        break;
      }

      // optional uint32 pdeath_sig = 8;
      case 8: {
        if (tag == 64) {
         parse_pdeath_sig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdeath_sig_)));
          set_has_pdeath_sig();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_signals_p;
        break;
      }

      // optional .signal_queue_entry signals_p = 9;
      case 9: {
        if (tag == 74) {
         parse_signals_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signals_p()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_creds;
        break;
      }

      // optional .creds_entry creds = 10;
      case 10: {
        if (tag == 82) {
         parse_creds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_core_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_core_entry)
  return false;
#undef DO_
}

void thread_core_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_core_entry)
  // required uint64 futex_rla = 1;
  if (has_futex_rla()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->futex_rla(), output);
  }

  // required uint32 futex_rla_len = 2;
  if (has_futex_rla_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->futex_rla_len(), output);
  }

  // optional sint32 sched_nice = 3;
  if (has_sched_nice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->sched_nice(), output);
  }

  // optional uint32 sched_policy = 4;
  if (has_sched_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sched_policy(), output);
  }

  // optional uint32 sched_prio = 5;
  if (has_sched_prio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sched_prio(), output);
  }

  // optional uint64 blk_sigset = 6;
  if (has_blk_sigset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->blk_sigset(), output);
  }

  // optional .thread_sas_entry sas = 7;
  if (has_sas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sas(), output);
  }

  // optional uint32 pdeath_sig = 8;
  if (has_pdeath_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pdeath_sig(), output);
  }

  // optional .signal_queue_entry signals_p = 9;
  if (has_signals_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->signals_p(), output);
  }

  // optional .creds_entry creds = 10;
  if (has_creds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->creds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_core_entry)
}

::google::protobuf::uint8* thread_core_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_core_entry)
  // required uint64 futex_rla = 1;
  if (has_futex_rla()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->futex_rla(), target);
  }

  // required uint32 futex_rla_len = 2;
  if (has_futex_rla_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->futex_rla_len(), target);
  }

  // optional sint32 sched_nice = 3;
  if (has_sched_nice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->sched_nice(), target);
  }

  // optional uint32 sched_policy = 4;
  if (has_sched_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sched_policy(), target);
  }

  // optional uint32 sched_prio = 5;
  if (has_sched_prio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sched_prio(), target);
  }

  // optional uint64 blk_sigset = 6;
  if (has_blk_sigset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->blk_sigset(), target);
  }

  // optional .thread_sas_entry sas = 7;
  if (has_sas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sas(), target);
  }

  // optional uint32 pdeath_sig = 8;
  if (has_pdeath_sig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pdeath_sig(), target);
  }

  // optional .signal_queue_entry signals_p = 9;
  if (has_signals_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->signals_p(), target);
  }

  // optional .creds_entry creds = 10;
  if (has_creds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->creds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_core_entry)
  return target;
}

int thread_core_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 futex_rla = 1;
    if (has_futex_rla()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->futex_rla());
    }

    // required uint32 futex_rla_len = 2;
    if (has_futex_rla_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->futex_rla_len());
    }

    // optional sint32 sched_nice = 3;
    if (has_sched_nice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sched_nice());
    }

    // optional uint32 sched_policy = 4;
    if (has_sched_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sched_policy());
    }

    // optional uint32 sched_prio = 5;
    if (has_sched_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sched_prio());
    }

    // optional uint64 blk_sigset = 6;
    if (has_blk_sigset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blk_sigset());
    }

    // optional .thread_sas_entry sas = 7;
    if (has_sas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sas());
    }

    // optional uint32 pdeath_sig = 8;
    if (has_pdeath_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdeath_sig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .signal_queue_entry signals_p = 9;
    if (has_signals_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signals_p());
    }

    // optional .creds_entry creds = 10;
    if (has_creds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_core_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_core_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_core_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_core_entry::MergeFrom(const thread_core_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_futex_rla()) {
      set_futex_rla(from.futex_rla());
    }
    if (from.has_futex_rla_len()) {
      set_futex_rla_len(from.futex_rla_len());
    }
    if (from.has_sched_nice()) {
      set_sched_nice(from.sched_nice());
    }
    if (from.has_sched_policy()) {
      set_sched_policy(from.sched_policy());
    }
    if (from.has_sched_prio()) {
      set_sched_prio(from.sched_prio());
    }
    if (from.has_blk_sigset()) {
      set_blk_sigset(from.blk_sigset());
    }
    if (from.has_sas()) {
      mutable_sas()->::thread_sas_entry::MergeFrom(from.sas());
    }
    if (from.has_pdeath_sig()) {
      set_pdeath_sig(from.pdeath_sig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signals_p()) {
      mutable_signals_p()->::signal_queue_entry::MergeFrom(from.signals_p());
    }
    if (from.has_creds()) {
      mutable_creds()->::creds_entry::MergeFrom(from.creds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_core_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_core_entry::CopyFrom(const thread_core_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_core_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sas()) {
    if (!this->sas().IsInitialized()) return false;
  }
  if (has_signals_p()) {
    if (!this->signals_p().IsInitialized()) return false;
  }
  if (has_creds()) {
    if (!this->creds().IsInitialized()) return false;
  }
  return true;
}

void thread_core_entry::Swap(thread_core_entry* other) {
  if (other != this) {
    std::swap(futex_rla_, other->futex_rla_);
    std::swap(futex_rla_len_, other->futex_rla_len_);
    std::swap(sched_nice_, other->sched_nice_);
    std::swap(sched_policy_, other->sched_policy_);
    std::swap(sched_prio_, other->sched_prio_);
    std::swap(blk_sigset_, other->blk_sigset_);
    std::swap(sas_, other->sas_);
    std::swap(pdeath_sig_, other->pdeath_sig_);
    std::swap(signals_p_, other->signals_p_);
    std::swap(creds_, other->creds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_core_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_core_entry_descriptor_;
  metadata.reflection = thread_core_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_rlimits_entry::kRlimitsFieldNumber;
#endif  // !_MSC_VER

task_rlimits_entry::task_rlimits_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_rlimits_entry)
}

void task_rlimits_entry::InitAsDefaultInstance() {
}

task_rlimits_entry::task_rlimits_entry(const task_rlimits_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_rlimits_entry)
}

void task_rlimits_entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_rlimits_entry::~task_rlimits_entry() {
  // @@protoc_insertion_point(destructor:task_rlimits_entry)
  SharedDtor();
}

void task_rlimits_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_rlimits_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_rlimits_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_rlimits_entry_descriptor_;
}

const task_rlimits_entry& task_rlimits_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

task_rlimits_entry* task_rlimits_entry::default_instance_ = NULL;

task_rlimits_entry* task_rlimits_entry::New() const {
  return new task_rlimits_entry;
}

void task_rlimits_entry::Clear() {
  rlimits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_rlimits_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_rlimits_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rlimit_entry rlimits = 1;
      case 1: {
        if (tag == 10) {
         parse_rlimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlimits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rlimits;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_rlimits_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_rlimits_entry)
  return false;
#undef DO_
}

void task_rlimits_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_rlimits_entry)
  // repeated .rlimit_entry rlimits = 1;
  for (int i = 0; i < this->rlimits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rlimits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_rlimits_entry)
}

::google::protobuf::uint8* task_rlimits_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_rlimits_entry)
  // repeated .rlimit_entry rlimits = 1;
  for (int i = 0; i < this->rlimits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rlimits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_rlimits_entry)
  return target;
}

int task_rlimits_entry::ByteSize() const {
  int total_size = 0;

  // repeated .rlimit_entry rlimits = 1;
  total_size += 1 * this->rlimits_size();
  for (int i = 0; i < this->rlimits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rlimits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_rlimits_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_rlimits_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_rlimits_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_rlimits_entry::MergeFrom(const task_rlimits_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  rlimits_.MergeFrom(from.rlimits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_rlimits_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_rlimits_entry::CopyFrom(const task_rlimits_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_rlimits_entry::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rlimits())) return false;
  return true;
}

void task_rlimits_entry::Swap(task_rlimits_entry* other) {
  if (other != this) {
    rlimits_.Swap(&other->rlimits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_rlimits_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_rlimits_entry_descriptor_;
  metadata.reflection = task_rlimits_entry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* core_entry_march_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return core_entry_march_descriptor_;
}
bool core_entry_march_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const core_entry_march core_entry::UNKNOWN;
const core_entry_march core_entry::X86_64;
const core_entry_march core_entry::ARM;
const core_entry_march core_entry::AARCH64;
const core_entry_march core_entry::PPC64;
const core_entry_march core_entry::march_MIN;
const core_entry_march core_entry::march_MAX;
const int core_entry::march_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int core_entry::kMtypeFieldNumber;
const int core_entry::kThreadInfoFieldNumber;
const int core_entry::kTiArmFieldNumber;
const int core_entry::kTiAarch64FieldNumber;
const int core_entry::kTiPpc64FieldNumber;
const int core_entry::kTcFieldNumber;
const int core_entry::kIdsFieldNumber;
const int core_entry::kThreadCoreFieldNumber;
#endif  // !_MSC_VER

core_entry::core_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:core_entry)
}

void core_entry::InitAsDefaultInstance() {
  thread_info_ = const_cast< ::thread_info_x86*>(&::thread_info_x86::default_instance());
  ti_arm_ = const_cast< ::thread_info_arm*>(&::thread_info_arm::default_instance());
  ti_aarch64_ = const_cast< ::thread_info_aarch64*>(&::thread_info_aarch64::default_instance());
  ti_ppc64_ = const_cast< ::thread_info_ppc64*>(&::thread_info_ppc64::default_instance());
  tc_ = const_cast< ::task_core_entry*>(&::task_core_entry::default_instance());
  ids_ = const_cast< ::task_kobj_ids_entry*>(&::task_kobj_ids_entry::default_instance());
  thread_core_ = const_cast< ::thread_core_entry*>(&::thread_core_entry::default_instance());
}

core_entry::core_entry(const core_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:core_entry)
}

void core_entry::SharedCtor() {
  _cached_size_ = 0;
  mtype_ = 0;
  thread_info_ = NULL;
  ti_arm_ = NULL;
  ti_aarch64_ = NULL;
  ti_ppc64_ = NULL;
  tc_ = NULL;
  ids_ = NULL;
  thread_core_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

core_entry::~core_entry() {
  // @@protoc_insertion_point(destructor:core_entry)
  SharedDtor();
}

void core_entry::SharedDtor() {
  if (this != default_instance_) {
    delete thread_info_;
    delete ti_arm_;
    delete ti_aarch64_;
    delete ti_ppc64_;
    delete tc_;
    delete ids_;
    delete thread_core_;
  }
}

void core_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* core_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return core_entry_descriptor_;
}

const core_entry& core_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2eproto();
  return *default_instance_;
}

core_entry* core_entry::default_instance_ = NULL;

core_entry* core_entry::New() const {
  return new core_entry;
}

void core_entry::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    mtype_ = 0;
    if (has_thread_info()) {
      if (thread_info_ != NULL) thread_info_->::thread_info_x86::Clear();
    }
    if (has_ti_arm()) {
      if (ti_arm_ != NULL) ti_arm_->::thread_info_arm::Clear();
    }
    if (has_ti_aarch64()) {
      if (ti_aarch64_ != NULL) ti_aarch64_->::thread_info_aarch64::Clear();
    }
    if (has_ti_ppc64()) {
      if (ti_ppc64_ != NULL) ti_ppc64_->::thread_info_ppc64::Clear();
    }
    if (has_tc()) {
      if (tc_ != NULL) tc_->::task_core_entry::Clear();
    }
    if (has_ids()) {
      if (ids_ != NULL) ids_->::task_kobj_ids_entry::Clear();
    }
    if (has_thread_core()) {
      if (thread_core_ != NULL) thread_core_->::thread_core_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool core_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:core_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .core_entry.march mtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::core_entry_march_IsValid(value)) {
            set_mtype(static_cast< ::core_entry_march >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_thread_info;
        break;
      }

      // optional .thread_info_x86 thread_info = 2;
      case 2: {
        if (tag == 18) {
         parse_thread_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thread_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tc;
        break;
      }

      // optional .task_core_entry tc = 3;
      case 3: {
        if (tag == 26) {
         parse_tc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ids;
        break;
      }

      // optional .task_kobj_ids_entry ids = 4;
      case 4: {
        if (tag == 34) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_thread_core;
        break;
      }

      // optional .thread_core_entry thread_core = 5;
      case 5: {
        if (tag == 42) {
         parse_thread_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thread_core()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ti_arm;
        break;
      }

      // optional .thread_info_arm ti_arm = 6;
      case 6: {
        if (tag == 50) {
         parse_ti_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ti_arm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ti_aarch64;
        break;
      }

      // optional .thread_info_aarch64 ti_aarch64 = 8;
      case 8: {
        if (tag == 66) {
         parse_ti_aarch64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ti_aarch64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ti_ppc64;
        break;
      }

      // optional .thread_info_ppc64 ti_ppc64 = 9;
      case 9: {
        if (tag == 74) {
         parse_ti_ppc64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ti_ppc64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:core_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:core_entry)
  return false;
#undef DO_
}

void core_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:core_entry)
  // required .core_entry.march mtype = 1;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mtype(), output);
  }

  // optional .thread_info_x86 thread_info = 2;
  if (has_thread_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->thread_info(), output);
  }

  // optional .task_core_entry tc = 3;
  if (has_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tc(), output);
  }

  // optional .task_kobj_ids_entry ids = 4;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ids(), output);
  }

  // optional .thread_core_entry thread_core = 5;
  if (has_thread_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->thread_core(), output);
  }

  // optional .thread_info_arm ti_arm = 6;
  if (has_ti_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ti_arm(), output);
  }

  // optional .thread_info_aarch64 ti_aarch64 = 8;
  if (has_ti_aarch64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ti_aarch64(), output);
  }

  // optional .thread_info_ppc64 ti_ppc64 = 9;
  if (has_ti_ppc64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ti_ppc64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:core_entry)
}

::google::protobuf::uint8* core_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_entry)
  // required .core_entry.march mtype = 1;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mtype(), target);
  }

  // optional .thread_info_x86 thread_info = 2;
  if (has_thread_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->thread_info(), target);
  }

  // optional .task_core_entry tc = 3;
  if (has_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tc(), target);
  }

  // optional .task_kobj_ids_entry ids = 4;
  if (has_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ids(), target);
  }

  // optional .thread_core_entry thread_core = 5;
  if (has_thread_core()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->thread_core(), target);
  }

  // optional .thread_info_arm ti_arm = 6;
  if (has_ti_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ti_arm(), target);
  }

  // optional .thread_info_aarch64 ti_aarch64 = 8;
  if (has_ti_aarch64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ti_aarch64(), target);
  }

  // optional .thread_info_ppc64 ti_ppc64 = 9;
  if (has_ti_ppc64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ti_ppc64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_entry)
  return target;
}

int core_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .core_entry.march mtype = 1;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
    }

    // optional .thread_info_x86 thread_info = 2;
    if (has_thread_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thread_info());
    }

    // optional .thread_info_arm ti_arm = 6;
    if (has_ti_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ti_arm());
    }

    // optional .thread_info_aarch64 ti_aarch64 = 8;
    if (has_ti_aarch64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ti_aarch64());
    }

    // optional .thread_info_ppc64 ti_ppc64 = 9;
    if (has_ti_ppc64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ti_ppc64());
    }

    // optional .task_core_entry tc = 3;
    if (has_tc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tc());
    }

    // optional .task_kobj_ids_entry ids = 4;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids());
    }

    // optional .thread_core_entry thread_core = 5;
    if (has_thread_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thread_core());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void core_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const core_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const core_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void core_entry::MergeFrom(const core_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_thread_info()) {
      mutable_thread_info()->::thread_info_x86::MergeFrom(from.thread_info());
    }
    if (from.has_ti_arm()) {
      mutable_ti_arm()->::thread_info_arm::MergeFrom(from.ti_arm());
    }
    if (from.has_ti_aarch64()) {
      mutable_ti_aarch64()->::thread_info_aarch64::MergeFrom(from.ti_aarch64());
    }
    if (from.has_ti_ppc64()) {
      mutable_ti_ppc64()->::thread_info_ppc64::MergeFrom(from.ti_ppc64());
    }
    if (from.has_tc()) {
      mutable_tc()->::task_core_entry::MergeFrom(from.tc());
    }
    if (from.has_ids()) {
      mutable_ids()->::task_kobj_ids_entry::MergeFrom(from.ids());
    }
    if (from.has_thread_core()) {
      mutable_thread_core()->::thread_core_entry::MergeFrom(from.thread_core());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void core_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void core_entry::CopyFrom(const core_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool core_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_thread_info()) {
    if (!this->thread_info().IsInitialized()) return false;
  }
  if (has_ti_arm()) {
    if (!this->ti_arm().IsInitialized()) return false;
  }
  if (has_ti_aarch64()) {
    if (!this->ti_aarch64().IsInitialized()) return false;
  }
  if (has_ti_ppc64()) {
    if (!this->ti_ppc64().IsInitialized()) return false;
  }
  if (has_tc()) {
    if (!this->tc().IsInitialized()) return false;
  }
  if (has_ids()) {
    if (!this->ids().IsInitialized()) return false;
  }
  if (has_thread_core()) {
    if (!this->thread_core().IsInitialized()) return false;
  }
  return true;
}

void core_entry::Swap(core_entry* other) {
  if (other != this) {
    std::swap(mtype_, other->mtype_);
    std::swap(thread_info_, other->thread_info_);
    std::swap(ti_arm_, other->ti_arm_);
    std::swap(ti_aarch64_, other->ti_aarch64_);
    std::swap(ti_ppc64_, other->ti_ppc64_);
    std::swap(tc_, other->tc_);
    std::swap(ids_, other->ids_);
    std::swap(thread_core_, other->thread_core_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata core_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = core_entry_descriptor_;
  metadata.reflection = core_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
