// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core-x86.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core-x86.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* user_x86_regs_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_x86_regs_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_x86_xsave_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_x86_xsave_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_x86_fpregs_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_x86_fpregs_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_desc_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_desc_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_info_x86_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_info_x86_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_x86_regs_mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2dx86_2eproto() {
  protobuf_AddDesc_core_2dx86_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core-x86.proto");
  GOOGLE_CHECK(file != NULL);
  user_x86_regs_entry_descriptor_ = file->message_type(0);
  static const int user_x86_regs_entry_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r15_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, bp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, bx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, r8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, ax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, si_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, di_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, orig_ax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, cs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, ss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, fs_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, gs_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, ds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, es_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, mode_),
  };
  user_x86_regs_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_x86_regs_entry_descriptor_,
      user_x86_regs_entry::default_instance_,
      user_x86_regs_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_regs_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_x86_regs_entry));
  user_x86_xsave_entry_descriptor_ = file->message_type(1);
  static const int user_x86_xsave_entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_xsave_entry, xstate_bv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_xsave_entry, ymmh_space_),
  };
  user_x86_xsave_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_x86_xsave_entry_descriptor_,
      user_x86_xsave_entry::default_instance_,
      user_x86_xsave_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_xsave_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_xsave_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_x86_xsave_entry));
  user_x86_fpregs_entry_descriptor_ = file->message_type(2);
  static const int user_x86_fpregs_entry_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, swd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, twd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, fop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, rip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, rdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, mxcsr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, mxcsr_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, st_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, xmm_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, xsave_),
  };
  user_x86_fpregs_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_x86_fpregs_entry_descriptor_,
      user_x86_fpregs_entry::default_instance_,
      user_x86_fpregs_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_x86_fpregs_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_x86_fpregs_entry));
  user_desc_t_descriptor_ = file->message_type(3);
  static const int user_desc_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, entry_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, base_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, seg_32bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, contents_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, contents_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, read_exec_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, limit_in_pages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, seg_not_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, useable_),
  };
  user_desc_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_desc_t_descriptor_,
      user_desc_t::default_instance_,
      user_desc_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_desc_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_desc_t));
  thread_info_x86_descriptor_ = file->message_type(4);
  static const int thread_info_x86_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, clear_tid_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, gpregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, fpregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, tls_),
  };
  thread_info_x86_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_info_x86_descriptor_,
      thread_info_x86::default_instance_,
      thread_info_x86_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_x86, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_info_x86));
  user_x86_regs_mode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2dx86_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_x86_regs_entry_descriptor_, &user_x86_regs_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_x86_xsave_entry_descriptor_, &user_x86_xsave_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_x86_fpregs_entry_descriptor_, &user_x86_fpregs_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_desc_t_descriptor_, &user_desc_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_info_x86_descriptor_, &thread_info_x86::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2dx86_2eproto() {
  delete user_x86_regs_entry::default_instance_;
  delete user_x86_regs_entry_reflection_;
  delete user_x86_xsave_entry::default_instance_;
  delete user_x86_xsave_entry_reflection_;
  delete user_x86_fpregs_entry::default_instance_;
  delete user_x86_fpregs_entry_reflection_;
  delete user_desc_t::default_instance_;
  delete user_desc_t_reflection_;
  delete thread_info_x86::default_instance_;
  delete thread_info_x86_reflection_;
}

void protobuf_AddDesc_core_2dx86_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_opts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016core-x86.proto\032\nopts.proto\"\234\003\n\023user_x8"
    "6_regs_entry\022\013\n\003r15\030\001 \002(\004\022\013\n\003r14\030\002 \002(\004\022\013"
    "\n\003r13\030\003 \002(\004\022\013\n\003r12\030\004 \002(\004\022\n\n\002bp\030\005 \002(\004\022\n\n\002"
    "bx\030\006 \002(\004\022\013\n\003r11\030\007 \002(\004\022\013\n\003r10\030\010 \002(\004\022\n\n\002r9"
    "\030\t \002(\004\022\n\n\002r8\030\n \002(\004\022\n\n\002ax\030\013 \002(\004\022\n\n\002cx\030\014 \002"
    "(\004\022\n\n\002dx\030\r \002(\004\022\n\n\002si\030\016 \002(\004\022\n\n\002di\030\017 \002(\004\022\017"
    "\n\007orig_ax\030\020 \002(\004\022\n\n\002ip\030\021 \002(\004\022\n\n\002cs\030\022 \002(\004\022"
    "\r\n\005flags\030\023 \002(\004\022\n\n\002sp\030\024 \002(\004\022\n\n\002ss\030\025 \002(\004\022\017"
    "\n\007fs_base\030\026 \002(\004\022\017\n\007gs_base\030\027 \002(\004\022\n\n\002ds\030\030"
    " \002(\004\022\n\n\002es\030\031 \002(\004\022\n\n\002fs\030\032 \002(\004\022\n\n\002gs\030\033 \002(\004"
    "\022)\n\004mode\030\034 \001(\0162\023.user_x86_regs_mode:\006NAT"
    "IVE\"=\n\024user_x86_xsave_entry\022\021\n\txstate_bv"
    "\030\001 \002(\004\022\022\n\nymmh_space\030\002 \003(\r\"\344\001\n\025user_x86_"
    "fpregs_entry\022\013\n\003cwd\030\001 \002(\r\022\013\n\003swd\030\002 \002(\r\022\013"
    "\n\003twd\030\003 \002(\r\022\013\n\003fop\030\004 \002(\r\022\013\n\003rip\030\005 \002(\004\022\013\n"
    "\003rdp\030\006 \002(\004\022\r\n\005mxcsr\030\007 \002(\r\022\022\n\nmxcsr_mask\030"
    "\010 \002(\r\022\020\n\010st_space\030\t \003(\r\022\021\n\txmm_space\030\n \003"
    "(\r\022\017\n\007padding\030\013 \003(\r\022$\n\005xsave\030\r \001(\0132\025.use"
    "r_x86_xsave_entry\"\346\001\n\013user_desc_t\022\024\n\014ent"
    "ry_number\030\001 \002(\r\022\021\n\tbase_addr\030\002 \002(\r\022\r\n\005li"
    "mit\030\003 \002(\r\022\021\n\tseg_32bit\030\004 \002(\010\022\022\n\ncontents"
    "_h\030\005 \002(\010\022\022\n\ncontents_l\030\006 \002(\010\022\034\n\016read_exe"
    "c_only\030\007 \002(\010:\004true\022\026\n\016limit_in_pages\030\010 \002"
    "(\010\022\035\n\017seg_not_present\030\t \002(\010:\004true\022\017\n\007use"
    "able\030\n \002(\010\"\240\001\n\017thread_info_x86\022\035\n\016clear_"
    "tid_addr\030\001 \002(\004B\005\322\?\002\010\001\022+\n\006gpregs\030\002 \002(\0132\024."
    "user_x86_regs_entryB\005\322\?\002\010\001\022&\n\006fpregs\030\003 \002"
    "(\0132\026.user_x86_fpregs_entry\022\031\n\003tls\030\004 \003(\0132"
    "\014.user_desc_t*,\n\022user_x86_regs_mode\022\n\n\006N"
    "ATIVE\020\001\022\n\n\006COMPAT\020\002", 1179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core-x86.proto", &protobuf_RegisterTypes);
  user_x86_regs_entry::default_instance_ = new user_x86_regs_entry();
  user_x86_xsave_entry::default_instance_ = new user_x86_xsave_entry();
  user_x86_fpregs_entry::default_instance_ = new user_x86_fpregs_entry();
  user_desc_t::default_instance_ = new user_desc_t();
  thread_info_x86::default_instance_ = new thread_info_x86();
  user_x86_regs_entry::default_instance_->InitAsDefaultInstance();
  user_x86_xsave_entry::default_instance_->InitAsDefaultInstance();
  user_x86_fpregs_entry::default_instance_->InitAsDefaultInstance();
  user_desc_t::default_instance_->InitAsDefaultInstance();
  thread_info_x86::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2dx86_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2dx86_2eproto {
  StaticDescriptorInitializer_core_2dx86_2eproto() {
    protobuf_AddDesc_core_2dx86_2eproto();
  }
} static_descriptor_initializer_core_2dx86_2eproto_;
const ::google::protobuf::EnumDescriptor* user_x86_regs_mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_x86_regs_mode_descriptor_;
}
bool user_x86_regs_mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int user_x86_regs_entry::kR15FieldNumber;
const int user_x86_regs_entry::kR14FieldNumber;
const int user_x86_regs_entry::kR13FieldNumber;
const int user_x86_regs_entry::kR12FieldNumber;
const int user_x86_regs_entry::kBpFieldNumber;
const int user_x86_regs_entry::kBxFieldNumber;
const int user_x86_regs_entry::kR11FieldNumber;
const int user_x86_regs_entry::kR10FieldNumber;
const int user_x86_regs_entry::kR9FieldNumber;
const int user_x86_regs_entry::kR8FieldNumber;
const int user_x86_regs_entry::kAxFieldNumber;
const int user_x86_regs_entry::kCxFieldNumber;
const int user_x86_regs_entry::kDxFieldNumber;
const int user_x86_regs_entry::kSiFieldNumber;
const int user_x86_regs_entry::kDiFieldNumber;
const int user_x86_regs_entry::kOrigAxFieldNumber;
const int user_x86_regs_entry::kIpFieldNumber;
const int user_x86_regs_entry::kCsFieldNumber;
const int user_x86_regs_entry::kFlagsFieldNumber;
const int user_x86_regs_entry::kSpFieldNumber;
const int user_x86_regs_entry::kSsFieldNumber;
const int user_x86_regs_entry::kFsBaseFieldNumber;
const int user_x86_regs_entry::kGsBaseFieldNumber;
const int user_x86_regs_entry::kDsFieldNumber;
const int user_x86_regs_entry::kEsFieldNumber;
const int user_x86_regs_entry::kFsFieldNumber;
const int user_x86_regs_entry::kGsFieldNumber;
const int user_x86_regs_entry::kModeFieldNumber;
#endif  // !_MSC_VER

user_x86_regs_entry::user_x86_regs_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_x86_regs_entry)
}

void user_x86_regs_entry::InitAsDefaultInstance() {
}

user_x86_regs_entry::user_x86_regs_entry(const user_x86_regs_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_x86_regs_entry)
}

void user_x86_regs_entry::SharedCtor() {
  _cached_size_ = 0;
  r15_ = GOOGLE_ULONGLONG(0);
  r14_ = GOOGLE_ULONGLONG(0);
  r13_ = GOOGLE_ULONGLONG(0);
  r12_ = GOOGLE_ULONGLONG(0);
  bp_ = GOOGLE_ULONGLONG(0);
  bx_ = GOOGLE_ULONGLONG(0);
  r11_ = GOOGLE_ULONGLONG(0);
  r10_ = GOOGLE_ULONGLONG(0);
  r9_ = GOOGLE_ULONGLONG(0);
  r8_ = GOOGLE_ULONGLONG(0);
  ax_ = GOOGLE_ULONGLONG(0);
  cx_ = GOOGLE_ULONGLONG(0);
  dx_ = GOOGLE_ULONGLONG(0);
  si_ = GOOGLE_ULONGLONG(0);
  di_ = GOOGLE_ULONGLONG(0);
  orig_ax_ = GOOGLE_ULONGLONG(0);
  ip_ = GOOGLE_ULONGLONG(0);
  cs_ = GOOGLE_ULONGLONG(0);
  flags_ = GOOGLE_ULONGLONG(0);
  sp_ = GOOGLE_ULONGLONG(0);
  ss_ = GOOGLE_ULONGLONG(0);
  fs_base_ = GOOGLE_ULONGLONG(0);
  gs_base_ = GOOGLE_ULONGLONG(0);
  ds_ = GOOGLE_ULONGLONG(0);
  es_ = GOOGLE_ULONGLONG(0);
  fs_ = GOOGLE_ULONGLONG(0);
  gs_ = GOOGLE_ULONGLONG(0);
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_x86_regs_entry::~user_x86_regs_entry() {
  // @@protoc_insertion_point(destructor:user_x86_regs_entry)
  SharedDtor();
}

void user_x86_regs_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_x86_regs_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_x86_regs_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_x86_regs_entry_descriptor_;
}

const user_x86_regs_entry& user_x86_regs_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dx86_2eproto();
  return *default_instance_;
}

user_x86_regs_entry* user_x86_regs_entry::default_instance_ = NULL;

user_x86_regs_entry* user_x86_regs_entry::New() const {
  return new user_x86_regs_entry;
}

void user_x86_regs_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_x86_regs_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r15_, r10_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(r9_, orig_ax_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(ip_, ds_);
  }
  if (_has_bits_[24 / 32] & 251658240) {
    ZR_(es_, gs_);
    mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_x86_regs_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_x86_regs_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 r15 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r15_)));
          set_has_r15();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r14;
        break;
      }

      // required uint64 r14 = 2;
      case 2: {
        if (tag == 16) {
         parse_r14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r14_)));
          set_has_r14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r13;
        break;
      }

      // required uint64 r13 = 3;
      case 3: {
        if (tag == 24) {
         parse_r13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r13_)));
          set_has_r13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_r12;
        break;
      }

      // required uint64 r12 = 4;
      case 4: {
        if (tag == 32) {
         parse_r12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r12_)));
          set_has_r12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bp;
        break;
      }

      // required uint64 bp = 5;
      case 5: {
        if (tag == 40) {
         parse_bp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bp_)));
          set_has_bp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bx;
        break;
      }

      // required uint64 bx = 6;
      case 6: {
        if (tag == 48) {
         parse_bx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bx_)));
          set_has_bx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_r11;
        break;
      }

      // required uint64 r11 = 7;
      case 7: {
        if (tag == 56) {
         parse_r11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r11_)));
          set_has_r11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_r10;
        break;
      }

      // required uint64 r10 = 8;
      case 8: {
        if (tag == 64) {
         parse_r10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r10_)));
          set_has_r10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_r9;
        break;
      }

      // required uint64 r9 = 9;
      case 9: {
        if (tag == 72) {
         parse_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r9_)));
          set_has_r9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_r8;
        break;
      }

      // required uint64 r8 = 10;
      case 10: {
        if (tag == 80) {
         parse_r8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &r8_)));
          set_has_r8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ax;
        break;
      }

      // required uint64 ax = 11;
      case 11: {
        if (tag == 88) {
         parse_ax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ax_)));
          set_has_ax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cx;
        break;
      }

      // required uint64 cx = 12;
      case 12: {
        if (tag == 96) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dx;
        break;
      }

      // required uint64 dx = 13;
      case 13: {
        if (tag == 104) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dx_)));
          set_has_dx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_si;
        break;
      }

      // required uint64 si = 14;
      case 14: {
        if (tag == 112) {
         parse_si:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &si_)));
          set_has_si();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_di;
        break;
      }

      // required uint64 di = 15;
      case 15: {
        if (tag == 120) {
         parse_di:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &di_)));
          set_has_di();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_orig_ax;
        break;
      }

      // required uint64 orig_ax = 16;
      case 16: {
        if (tag == 128) {
         parse_orig_ax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orig_ax_)));
          set_has_orig_ax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ip;
        break;
      }

      // required uint64 ip = 17;
      case 17: {
        if (tag == 136) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_cs;
        break;
      }

      // required uint64 cs = 18;
      case 18: {
        if (tag == 144) {
         parse_cs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cs_)));
          set_has_cs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_flags;
        break;
      }

      // required uint64 flags = 19;
      case 19: {
        if (tag == 152) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_sp;
        break;
      }

      // required uint64 sp = 20;
      case 20: {
        if (tag == 160) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ss;
        break;
      }

      // required uint64 ss = 21;
      case 21: {
        if (tag == 168) {
         parse_ss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ss_)));
          set_has_ss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_fs_base;
        break;
      }

      // required uint64 fs_base = 22;
      case 22: {
        if (tag == 176) {
         parse_fs_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fs_base_)));
          set_has_fs_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gs_base;
        break;
      }

      // required uint64 gs_base = 23;
      case 23: {
        if (tag == 184) {
         parse_gs_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_base_)));
          set_has_gs_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_ds;
        break;
      }

      // required uint64 ds = 24;
      case 24: {
        if (tag == 192) {
         parse_ds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ds_)));
          set_has_ds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_es;
        break;
      }

      // required uint64 es = 25;
      case 25: {
        if (tag == 200) {
         parse_es:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &es_)));
          set_has_es();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_fs;
        break;
      }

      // required uint64 fs = 26;
      case 26: {
        if (tag == 208) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_gs;
        break;
      }

      // required uint64 gs = 27;
      case 27: {
        if (tag == 216) {
         parse_gs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_)));
          set_has_gs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_mode;
        break;
      }

      // optional .user_x86_regs_mode mode = 28 [default = NATIVE];
      case 28: {
        if (tag == 224) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_x86_regs_mode_IsValid(value)) {
            set_mode(static_cast< ::user_x86_regs_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_x86_regs_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_x86_regs_entry)
  return false;
#undef DO_
}

void user_x86_regs_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_x86_regs_entry)
  // required uint64 r15 = 1;
  if (has_r15()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->r15(), output);
  }

  // required uint64 r14 = 2;
  if (has_r14()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->r14(), output);
  }

  // required uint64 r13 = 3;
  if (has_r13()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->r13(), output);
  }

  // required uint64 r12 = 4;
  if (has_r12()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->r12(), output);
  }

  // required uint64 bp = 5;
  if (has_bp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bp(), output);
  }

  // required uint64 bx = 6;
  if (has_bx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bx(), output);
  }

  // required uint64 r11 = 7;
  if (has_r11()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->r11(), output);
  }

  // required uint64 r10 = 8;
  if (has_r10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->r10(), output);
  }

  // required uint64 r9 = 9;
  if (has_r9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->r9(), output);
  }

  // required uint64 r8 = 10;
  if (has_r8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->r8(), output);
  }

  // required uint64 ax = 11;
  if (has_ax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ax(), output);
  }

  // required uint64 cx = 12;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->cx(), output);
  }

  // required uint64 dx = 13;
  if (has_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->dx(), output);
  }

  // required uint64 si = 14;
  if (has_si()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->si(), output);
  }

  // required uint64 di = 15;
  if (has_di()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->di(), output);
  }

  // required uint64 orig_ax = 16;
  if (has_orig_ax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->orig_ax(), output);
  }

  // required uint64 ip = 17;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->ip(), output);
  }

  // required uint64 cs = 18;
  if (has_cs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->cs(), output);
  }

  // required uint64 flags = 19;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->flags(), output);
  }

  // required uint64 sp = 20;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->sp(), output);
  }

  // required uint64 ss = 21;
  if (has_ss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->ss(), output);
  }

  // required uint64 fs_base = 22;
  if (has_fs_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->fs_base(), output);
  }

  // required uint64 gs_base = 23;
  if (has_gs_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->gs_base(), output);
  }

  // required uint64 ds = 24;
  if (has_ds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->ds(), output);
  }

  // required uint64 es = 25;
  if (has_es()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->es(), output);
  }

  // required uint64 fs = 26;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->fs(), output);
  }

  // required uint64 gs = 27;
  if (has_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->gs(), output);
  }

  // optional .user_x86_regs_mode mode = 28 [default = NATIVE];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_x86_regs_entry)
}

::google::protobuf::uint8* user_x86_regs_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_x86_regs_entry)
  // required uint64 r15 = 1;
  if (has_r15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->r15(), target);
  }

  // required uint64 r14 = 2;
  if (has_r14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->r14(), target);
  }

  // required uint64 r13 = 3;
  if (has_r13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->r13(), target);
  }

  // required uint64 r12 = 4;
  if (has_r12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->r12(), target);
  }

  // required uint64 bp = 5;
  if (has_bp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bp(), target);
  }

  // required uint64 bx = 6;
  if (has_bx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bx(), target);
  }

  // required uint64 r11 = 7;
  if (has_r11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->r11(), target);
  }

  // required uint64 r10 = 8;
  if (has_r10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->r10(), target);
  }

  // required uint64 r9 = 9;
  if (has_r9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->r9(), target);
  }

  // required uint64 r8 = 10;
  if (has_r8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->r8(), target);
  }

  // required uint64 ax = 11;
  if (has_ax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ax(), target);
  }

  // required uint64 cx = 12;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->cx(), target);
  }

  // required uint64 dx = 13;
  if (has_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->dx(), target);
  }

  // required uint64 si = 14;
  if (has_si()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->si(), target);
  }

  // required uint64 di = 15;
  if (has_di()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->di(), target);
  }

  // required uint64 orig_ax = 16;
  if (has_orig_ax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->orig_ax(), target);
  }

  // required uint64 ip = 17;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->ip(), target);
  }

  // required uint64 cs = 18;
  if (has_cs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->cs(), target);
  }

  // required uint64 flags = 19;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->flags(), target);
  }

  // required uint64 sp = 20;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->sp(), target);
  }

  // required uint64 ss = 21;
  if (has_ss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->ss(), target);
  }

  // required uint64 fs_base = 22;
  if (has_fs_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->fs_base(), target);
  }

  // required uint64 gs_base = 23;
  if (has_gs_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->gs_base(), target);
  }

  // required uint64 ds = 24;
  if (has_ds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->ds(), target);
  }

  // required uint64 es = 25;
  if (has_es()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->es(), target);
  }

  // required uint64 fs = 26;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->fs(), target);
  }

  // required uint64 gs = 27;
  if (has_gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->gs(), target);
  }

  // optional .user_x86_regs_mode mode = 28 [default = NATIVE];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_x86_regs_entry)
  return target;
}

int user_x86_regs_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 r15 = 1;
    if (has_r15()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r15());
    }

    // required uint64 r14 = 2;
    if (has_r14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r14());
    }

    // required uint64 r13 = 3;
    if (has_r13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r13());
    }

    // required uint64 r12 = 4;
    if (has_r12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r12());
    }

    // required uint64 bp = 5;
    if (has_bp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bp());
    }

    // required uint64 bx = 6;
    if (has_bx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bx());
    }

    // required uint64 r11 = 7;
    if (has_r11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r11());
    }

    // required uint64 r10 = 8;
    if (has_r10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r10());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 r9 = 9;
    if (has_r9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r9());
    }

    // required uint64 r8 = 10;
    if (has_r8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->r8());
    }

    // required uint64 ax = 11;
    if (has_ax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ax());
    }

    // required uint64 cx = 12;
    if (has_cx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cx());
    }

    // required uint64 dx = 13;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dx());
    }

    // required uint64 si = 14;
    if (has_si()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->si());
    }

    // required uint64 di = 15;
    if (has_di()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->di());
    }

    // required uint64 orig_ax = 16;
    if (has_orig_ax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orig_ax());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 ip = 17;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ip());
    }

    // required uint64 cs = 18;
    if (has_cs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cs());
    }

    // required uint64 flags = 19;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }

    // required uint64 sp = 20;
    if (has_sp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sp());
    }

    // required uint64 ss = 21;
    if (has_ss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ss());
    }

    // required uint64 fs_base = 22;
    if (has_fs_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fs_base());
    }

    // required uint64 gs_base = 23;
    if (has_gs_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_base());
    }

    // required uint64 ds = 24;
    if (has_ds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ds());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint64 es = 25;
    if (has_es()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->es());
    }

    // required uint64 fs = 26;
    if (has_fs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fs());
    }

    // required uint64 gs = 27;
    if (has_gs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs());
    }

    // optional .user_x86_regs_mode mode = 28 [default = NATIVE];
    if (has_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_x86_regs_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_x86_regs_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_x86_regs_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_x86_regs_entry::MergeFrom(const user_x86_regs_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r15()) {
      set_r15(from.r15());
    }
    if (from.has_r14()) {
      set_r14(from.r14());
    }
    if (from.has_r13()) {
      set_r13(from.r13());
    }
    if (from.has_r12()) {
      set_r12(from.r12());
    }
    if (from.has_bp()) {
      set_bp(from.bp());
    }
    if (from.has_bx()) {
      set_bx(from.bx());
    }
    if (from.has_r11()) {
      set_r11(from.r11());
    }
    if (from.has_r10()) {
      set_r10(from.r10());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_r9()) {
      set_r9(from.r9());
    }
    if (from.has_r8()) {
      set_r8(from.r8());
    }
    if (from.has_ax()) {
      set_ax(from.ax());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_dx()) {
      set_dx(from.dx());
    }
    if (from.has_si()) {
      set_si(from.si());
    }
    if (from.has_di()) {
      set_di(from.di());
    }
    if (from.has_orig_ax()) {
      set_orig_ax(from.orig_ax());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_cs()) {
      set_cs(from.cs());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_ss()) {
      set_ss(from.ss());
    }
    if (from.has_fs_base()) {
      set_fs_base(from.fs_base());
    }
    if (from.has_gs_base()) {
      set_gs_base(from.gs_base());
    }
    if (from.has_ds()) {
      set_ds(from.ds());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_es()) {
      set_es(from.es());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_gs()) {
      set_gs(from.gs());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_x86_regs_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_x86_regs_entry::CopyFrom(const user_x86_regs_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_x86_regs_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void user_x86_regs_entry::Swap(user_x86_regs_entry* other) {
  if (other != this) {
    std::swap(r15_, other->r15_);
    std::swap(r14_, other->r14_);
    std::swap(r13_, other->r13_);
    std::swap(r12_, other->r12_);
    std::swap(bp_, other->bp_);
    std::swap(bx_, other->bx_);
    std::swap(r11_, other->r11_);
    std::swap(r10_, other->r10_);
    std::swap(r9_, other->r9_);
    std::swap(r8_, other->r8_);
    std::swap(ax_, other->ax_);
    std::swap(cx_, other->cx_);
    std::swap(dx_, other->dx_);
    std::swap(si_, other->si_);
    std::swap(di_, other->di_);
    std::swap(orig_ax_, other->orig_ax_);
    std::swap(ip_, other->ip_);
    std::swap(cs_, other->cs_);
    std::swap(flags_, other->flags_);
    std::swap(sp_, other->sp_);
    std::swap(ss_, other->ss_);
    std::swap(fs_base_, other->fs_base_);
    std::swap(gs_base_, other->gs_base_);
    std::swap(ds_, other->ds_);
    std::swap(es_, other->es_);
    std::swap(fs_, other->fs_);
    std::swap(gs_, other->gs_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_x86_regs_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_x86_regs_entry_descriptor_;
  metadata.reflection = user_x86_regs_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_x86_xsave_entry::kXstateBvFieldNumber;
const int user_x86_xsave_entry::kYmmhSpaceFieldNumber;
#endif  // !_MSC_VER

user_x86_xsave_entry::user_x86_xsave_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_x86_xsave_entry)
}

void user_x86_xsave_entry::InitAsDefaultInstance() {
}

user_x86_xsave_entry::user_x86_xsave_entry(const user_x86_xsave_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_x86_xsave_entry)
}

void user_x86_xsave_entry::SharedCtor() {
  _cached_size_ = 0;
  xstate_bv_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_x86_xsave_entry::~user_x86_xsave_entry() {
  // @@protoc_insertion_point(destructor:user_x86_xsave_entry)
  SharedDtor();
}

void user_x86_xsave_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_x86_xsave_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_x86_xsave_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_x86_xsave_entry_descriptor_;
}

const user_x86_xsave_entry& user_x86_xsave_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dx86_2eproto();
  return *default_instance_;
}

user_x86_xsave_entry* user_x86_xsave_entry::default_instance_ = NULL;

user_x86_xsave_entry* user_x86_xsave_entry::New() const {
  return new user_x86_xsave_entry;
}

void user_x86_xsave_entry::Clear() {
  xstate_bv_ = GOOGLE_ULONGLONG(0);
  ymmh_space_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_x86_xsave_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_x86_xsave_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 xstate_bv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xstate_bv_)));
          set_has_xstate_bv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ymmh_space;
        break;
      }

      // repeated uint32 ymmh_space = 2;
      case 2: {
        if (tag == 16) {
         parse_ymmh_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_ymmh_space())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ymmh_space())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ymmh_space;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_x86_xsave_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_x86_xsave_entry)
  return false;
#undef DO_
}

void user_x86_xsave_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_x86_xsave_entry)
  // required uint64 xstate_bv = 1;
  if (has_xstate_bv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->xstate_bv(), output);
  }

  // repeated uint32 ymmh_space = 2;
  for (int i = 0; i < this->ymmh_space_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ymmh_space(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_x86_xsave_entry)
}

::google::protobuf::uint8* user_x86_xsave_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_x86_xsave_entry)
  // required uint64 xstate_bv = 1;
  if (has_xstate_bv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->xstate_bv(), target);
  }

  // repeated uint32 ymmh_space = 2;
  for (int i = 0; i < this->ymmh_space_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->ymmh_space(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_x86_xsave_entry)
  return target;
}

int user_x86_xsave_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 xstate_bv = 1;
    if (has_xstate_bv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xstate_bv());
    }

  }
  // repeated uint32 ymmh_space = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ymmh_space_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ymmh_space(i));
    }
    total_size += 1 * this->ymmh_space_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_x86_xsave_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_x86_xsave_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_x86_xsave_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_x86_xsave_entry::MergeFrom(const user_x86_xsave_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  ymmh_space_.MergeFrom(from.ymmh_space_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xstate_bv()) {
      set_xstate_bv(from.xstate_bv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_x86_xsave_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_x86_xsave_entry::CopyFrom(const user_x86_xsave_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_x86_xsave_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_x86_xsave_entry::Swap(user_x86_xsave_entry* other) {
  if (other != this) {
    std::swap(xstate_bv_, other->xstate_bv_);
    ymmh_space_.Swap(&other->ymmh_space_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_x86_xsave_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_x86_xsave_entry_descriptor_;
  metadata.reflection = user_x86_xsave_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_x86_fpregs_entry::kCwdFieldNumber;
const int user_x86_fpregs_entry::kSwdFieldNumber;
const int user_x86_fpregs_entry::kTwdFieldNumber;
const int user_x86_fpregs_entry::kFopFieldNumber;
const int user_x86_fpregs_entry::kRipFieldNumber;
const int user_x86_fpregs_entry::kRdpFieldNumber;
const int user_x86_fpregs_entry::kMxcsrFieldNumber;
const int user_x86_fpregs_entry::kMxcsrMaskFieldNumber;
const int user_x86_fpregs_entry::kStSpaceFieldNumber;
const int user_x86_fpregs_entry::kXmmSpaceFieldNumber;
const int user_x86_fpregs_entry::kPaddingFieldNumber;
const int user_x86_fpregs_entry::kXsaveFieldNumber;
#endif  // !_MSC_VER

user_x86_fpregs_entry::user_x86_fpregs_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_x86_fpregs_entry)
}

void user_x86_fpregs_entry::InitAsDefaultInstance() {
  xsave_ = const_cast< ::user_x86_xsave_entry*>(&::user_x86_xsave_entry::default_instance());
}

user_x86_fpregs_entry::user_x86_fpregs_entry(const user_x86_fpregs_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_x86_fpregs_entry)
}

void user_x86_fpregs_entry::SharedCtor() {
  _cached_size_ = 0;
  cwd_ = 0u;
  swd_ = 0u;
  twd_ = 0u;
  fop_ = 0u;
  rip_ = GOOGLE_ULONGLONG(0);
  rdp_ = GOOGLE_ULONGLONG(0);
  mxcsr_ = 0u;
  mxcsr_mask_ = 0u;
  xsave_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_x86_fpregs_entry::~user_x86_fpregs_entry() {
  // @@protoc_insertion_point(destructor:user_x86_fpregs_entry)
  SharedDtor();
}

void user_x86_fpregs_entry::SharedDtor() {
  if (this != default_instance_) {
    delete xsave_;
  }
}

void user_x86_fpregs_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_x86_fpregs_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_x86_fpregs_entry_descriptor_;
}

const user_x86_fpregs_entry& user_x86_fpregs_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dx86_2eproto();
  return *default_instance_;
}

user_x86_fpregs_entry* user_x86_fpregs_entry::default_instance_ = NULL;

user_x86_fpregs_entry* user_x86_fpregs_entry::New() const {
  return new user_x86_fpregs_entry;
}

void user_x86_fpregs_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_x86_fpregs_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cwd_, mxcsr_mask_);
  }
  if (has_xsave()) {
    if (xsave_ != NULL) xsave_->::user_x86_xsave_entry::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  st_space_.Clear();
  xmm_space_.Clear();
  padding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_x86_fpregs_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_x86_fpregs_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cwd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cwd_)));
          set_has_cwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_swd;
        break;
      }

      // required uint32 swd = 2;
      case 2: {
        if (tag == 16) {
         parse_swd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swd_)));
          set_has_swd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_twd;
        break;
      }

      // required uint32 twd = 3;
      case 3: {
        if (tag == 24) {
         parse_twd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twd_)));
          set_has_twd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fop;
        break;
      }

      // required uint32 fop = 4;
      case 4: {
        if (tag == 32) {
         parse_fop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fop_)));
          set_has_fop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rip;
        break;
      }

      // required uint64 rip = 5;
      case 5: {
        if (tag == 40) {
         parse_rip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rip_)));
          set_has_rip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rdp;
        break;
      }

      // required uint64 rdp = 6;
      case 6: {
        if (tag == 48) {
         parse_rdp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rdp_)));
          set_has_rdp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mxcsr;
        break;
      }

      // required uint32 mxcsr = 7;
      case 7: {
        if (tag == 56) {
         parse_mxcsr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxcsr_)));
          set_has_mxcsr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mxcsr_mask;
        break;
      }

      // required uint32 mxcsr_mask = 8;
      case 8: {
        if (tag == 64) {
         parse_mxcsr_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mxcsr_mask_)));
          set_has_mxcsr_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_st_space;
        break;
      }

      // repeated uint32 st_space = 9;
      case 9: {
        if (tag == 72) {
         parse_st_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_st_space())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_st_space())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_st_space;
        if (input->ExpectTag(80)) goto parse_xmm_space;
        break;
      }

      // repeated uint32 xmm_space = 10;
      case 10: {
        if (tag == 80) {
         parse_xmm_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_xmm_space())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_xmm_space())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_xmm_space;
        if (input->ExpectTag(88)) goto parse_padding;
        break;
      }

      // repeated uint32 padding = 11;
      case 11: {
        if (tag == 88) {
         parse_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_padding())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_padding())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_padding;
        if (input->ExpectTag(106)) goto parse_xsave;
        break;
      }

      // optional .user_x86_xsave_entry xsave = 13;
      case 13: {
        if (tag == 106) {
         parse_xsave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xsave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_x86_fpregs_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_x86_fpregs_entry)
  return false;
#undef DO_
}

void user_x86_fpregs_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_x86_fpregs_entry)
  // required uint32 cwd = 1;
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cwd(), output);
  }

  // required uint32 swd = 2;
  if (has_swd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->swd(), output);
  }

  // required uint32 twd = 3;
  if (has_twd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->twd(), output);
  }

  // required uint32 fop = 4;
  if (has_fop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fop(), output);
  }

  // required uint64 rip = 5;
  if (has_rip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rip(), output);
  }

  // required uint64 rdp = 6;
  if (has_rdp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rdp(), output);
  }

  // required uint32 mxcsr = 7;
  if (has_mxcsr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mxcsr(), output);
  }

  // required uint32 mxcsr_mask = 8;
  if (has_mxcsr_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mxcsr_mask(), output);
  }

  // repeated uint32 st_space = 9;
  for (int i = 0; i < this->st_space_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->st_space(i), output);
  }

  // repeated uint32 xmm_space = 10;
  for (int i = 0; i < this->xmm_space_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->xmm_space(i), output);
  }

  // repeated uint32 padding = 11;
  for (int i = 0; i < this->padding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->padding(i), output);
  }

  // optional .user_x86_xsave_entry xsave = 13;
  if (has_xsave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->xsave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_x86_fpregs_entry)
}

::google::protobuf::uint8* user_x86_fpregs_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_x86_fpregs_entry)
  // required uint32 cwd = 1;
  if (has_cwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cwd(), target);
  }

  // required uint32 swd = 2;
  if (has_swd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->swd(), target);
  }

  // required uint32 twd = 3;
  if (has_twd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->twd(), target);
  }

  // required uint32 fop = 4;
  if (has_fop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fop(), target);
  }

  // required uint64 rip = 5;
  if (has_rip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rip(), target);
  }

  // required uint64 rdp = 6;
  if (has_rdp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rdp(), target);
  }

  // required uint32 mxcsr = 7;
  if (has_mxcsr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mxcsr(), target);
  }

  // required uint32 mxcsr_mask = 8;
  if (has_mxcsr_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mxcsr_mask(), target);
  }

  // repeated uint32 st_space = 9;
  for (int i = 0; i < this->st_space_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->st_space(i), target);
  }

  // repeated uint32 xmm_space = 10;
  for (int i = 0; i < this->xmm_space_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->xmm_space(i), target);
  }

  // repeated uint32 padding = 11;
  for (int i = 0; i < this->padding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->padding(i), target);
  }

  // optional .user_x86_xsave_entry xsave = 13;
  if (has_xsave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->xsave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_x86_fpregs_entry)
  return target;
}

int user_x86_fpregs_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cwd = 1;
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cwd());
    }

    // required uint32 swd = 2;
    if (has_swd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swd());
    }

    // required uint32 twd = 3;
    if (has_twd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->twd());
    }

    // required uint32 fop = 4;
    if (has_fop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fop());
    }

    // required uint64 rip = 5;
    if (has_rip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rip());
    }

    // required uint64 rdp = 6;
    if (has_rdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rdp());
    }

    // required uint32 mxcsr = 7;
    if (has_mxcsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mxcsr());
    }

    // required uint32 mxcsr_mask = 8;
    if (has_mxcsr_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mxcsr_mask());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .user_x86_xsave_entry xsave = 13;
    if (has_xsave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xsave());
    }

  }
  // repeated uint32 st_space = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->st_space_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->st_space(i));
    }
    total_size += 1 * this->st_space_size() + data_size;
  }

  // repeated uint32 xmm_space = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->xmm_space_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->xmm_space(i));
    }
    total_size += 1 * this->xmm_space_size() + data_size;
  }

  // repeated uint32 padding = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->padding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->padding(i));
    }
    total_size += 1 * this->padding_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_x86_fpregs_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_x86_fpregs_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_x86_fpregs_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_x86_fpregs_entry::MergeFrom(const user_x86_fpregs_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  st_space_.MergeFrom(from.st_space_);
  xmm_space_.MergeFrom(from.xmm_space_);
  padding_.MergeFrom(from.padding_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cwd()) {
      set_cwd(from.cwd());
    }
    if (from.has_swd()) {
      set_swd(from.swd());
    }
    if (from.has_twd()) {
      set_twd(from.twd());
    }
    if (from.has_fop()) {
      set_fop(from.fop());
    }
    if (from.has_rip()) {
      set_rip(from.rip());
    }
    if (from.has_rdp()) {
      set_rdp(from.rdp());
    }
    if (from.has_mxcsr()) {
      set_mxcsr(from.mxcsr());
    }
    if (from.has_mxcsr_mask()) {
      set_mxcsr_mask(from.mxcsr_mask());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_xsave()) {
      mutable_xsave()->::user_x86_xsave_entry::MergeFrom(from.xsave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_x86_fpregs_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_x86_fpregs_entry::CopyFrom(const user_x86_fpregs_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_x86_fpregs_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_xsave()) {
    if (!this->xsave().IsInitialized()) return false;
  }
  return true;
}

void user_x86_fpregs_entry::Swap(user_x86_fpregs_entry* other) {
  if (other != this) {
    std::swap(cwd_, other->cwd_);
    std::swap(swd_, other->swd_);
    std::swap(twd_, other->twd_);
    std::swap(fop_, other->fop_);
    std::swap(rip_, other->rip_);
    std::swap(rdp_, other->rdp_);
    std::swap(mxcsr_, other->mxcsr_);
    std::swap(mxcsr_mask_, other->mxcsr_mask_);
    st_space_.Swap(&other->st_space_);
    xmm_space_.Swap(&other->xmm_space_);
    padding_.Swap(&other->padding_);
    std::swap(xsave_, other->xsave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_x86_fpregs_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_x86_fpregs_entry_descriptor_;
  metadata.reflection = user_x86_fpregs_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_desc_t::kEntryNumberFieldNumber;
const int user_desc_t::kBaseAddrFieldNumber;
const int user_desc_t::kLimitFieldNumber;
const int user_desc_t::kSeg32BitFieldNumber;
const int user_desc_t::kContentsHFieldNumber;
const int user_desc_t::kContentsLFieldNumber;
const int user_desc_t::kReadExecOnlyFieldNumber;
const int user_desc_t::kLimitInPagesFieldNumber;
const int user_desc_t::kSegNotPresentFieldNumber;
const int user_desc_t::kUseableFieldNumber;
#endif  // !_MSC_VER

user_desc_t::user_desc_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_desc_t)
}

void user_desc_t::InitAsDefaultInstance() {
}

user_desc_t::user_desc_t(const user_desc_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_desc_t)
}

void user_desc_t::SharedCtor() {
  _cached_size_ = 0;
  entry_number_ = 0u;
  base_addr_ = 0u;
  limit_ = 0u;
  seg_32bit_ = false;
  contents_h_ = false;
  contents_l_ = false;
  read_exec_only_ = true;
  limit_in_pages_ = false;
  seg_not_present_ = true;
  useable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_desc_t::~user_desc_t() {
  // @@protoc_insertion_point(destructor:user_desc_t)
  SharedDtor();
}

void user_desc_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_desc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_desc_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_desc_t_descriptor_;
}

const user_desc_t& user_desc_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dx86_2eproto();
  return *default_instance_;
}

user_desc_t* user_desc_t::default_instance_ = NULL;

user_desc_t* user_desc_t::New() const {
  return new user_desc_t;
}

void user_desc_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_desc_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(entry_number_, contents_l_);
    read_exec_only_ = true;
    limit_in_pages_ = false;
  }
  if (_has_bits_[8 / 32] & 768) {
    seg_not_present_ = true;
    useable_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_desc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_desc_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 entry_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_number_)));
          set_has_entry_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_addr;
        break;
      }

      // required uint32 base_addr = 2;
      case 2: {
        if (tag == 16) {
         parse_base_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_addr_)));
          set_has_base_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seg_32bit;
        break;
      }

      // required bool seg_32bit = 4;
      case 4: {
        if (tag == 32) {
         parse_seg_32bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seg_32bit_)));
          set_has_seg_32bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_contents_h;
        break;
      }

      // required bool contents_h = 5;
      case 5: {
        if (tag == 40) {
         parse_contents_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contents_h_)));
          set_has_contents_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_contents_l;
        break;
      }

      // required bool contents_l = 6;
      case 6: {
        if (tag == 48) {
         parse_contents_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contents_l_)));
          set_has_contents_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_read_exec_only;
        break;
      }

      // required bool read_exec_only = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_read_exec_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_exec_only_)));
          set_has_read_exec_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_limit_in_pages;
        break;
      }

      // required bool limit_in_pages = 8;
      case 8: {
        if (tag == 64) {
         parse_limit_in_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limit_in_pages_)));
          set_has_limit_in_pages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_seg_not_present;
        break;
      }

      // required bool seg_not_present = 9 [default = true];
      case 9: {
        if (tag == 72) {
         parse_seg_not_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seg_not_present_)));
          set_has_seg_not_present();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_useable;
        break;
      }

      // required bool useable = 10;
      case 10: {
        if (tag == 80) {
         parse_useable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useable_)));
          set_has_useable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_desc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_desc_t)
  return false;
#undef DO_
}

void user_desc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_desc_t)
  // required uint32 entry_number = 1;
  if (has_entry_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entry_number(), output);
  }

  // required uint32 base_addr = 2;
  if (has_base_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base_addr(), output);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // required bool seg_32bit = 4;
  if (has_seg_32bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->seg_32bit(), output);
  }

  // required bool contents_h = 5;
  if (has_contents_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->contents_h(), output);
  }

  // required bool contents_l = 6;
  if (has_contents_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contents_l(), output);
  }

  // required bool read_exec_only = 7 [default = true];
  if (has_read_exec_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->read_exec_only(), output);
  }

  // required bool limit_in_pages = 8;
  if (has_limit_in_pages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->limit_in_pages(), output);
  }

  // required bool seg_not_present = 9 [default = true];
  if (has_seg_not_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->seg_not_present(), output);
  }

  // required bool useable = 10;
  if (has_useable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->useable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_desc_t)
}

::google::protobuf::uint8* user_desc_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_desc_t)
  // required uint32 entry_number = 1;
  if (has_entry_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entry_number(), target);
  }

  // required uint32 base_addr = 2;
  if (has_base_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base_addr(), target);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // required bool seg_32bit = 4;
  if (has_seg_32bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->seg_32bit(), target);
  }

  // required bool contents_h = 5;
  if (has_contents_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->contents_h(), target);
  }

  // required bool contents_l = 6;
  if (has_contents_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contents_l(), target);
  }

  // required bool read_exec_only = 7 [default = true];
  if (has_read_exec_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->read_exec_only(), target);
  }

  // required bool limit_in_pages = 8;
  if (has_limit_in_pages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->limit_in_pages(), target);
  }

  // required bool seg_not_present = 9 [default = true];
  if (has_seg_not_present()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->seg_not_present(), target);
  }

  // required bool useable = 10;
  if (has_useable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->useable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_desc_t)
  return target;
}

int user_desc_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 entry_number = 1;
    if (has_entry_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_number());
    }

    // required uint32 base_addr = 2;
    if (has_base_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_addr());
    }

    // required uint32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required bool seg_32bit = 4;
    if (has_seg_32bit()) {
      total_size += 1 + 1;
    }

    // required bool contents_h = 5;
    if (has_contents_h()) {
      total_size += 1 + 1;
    }

    // required bool contents_l = 6;
    if (has_contents_l()) {
      total_size += 1 + 1;
    }

    // required bool read_exec_only = 7 [default = true];
    if (has_read_exec_only()) {
      total_size += 1 + 1;
    }

    // required bool limit_in_pages = 8;
    if (has_limit_in_pages()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool seg_not_present = 9 [default = true];
    if (has_seg_not_present()) {
      total_size += 1 + 1;
    }

    // required bool useable = 10;
    if (has_useable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_desc_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_desc_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_desc_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_desc_t::MergeFrom(const user_desc_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_number()) {
      set_entry_number(from.entry_number());
    }
    if (from.has_base_addr()) {
      set_base_addr(from.base_addr());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_seg_32bit()) {
      set_seg_32bit(from.seg_32bit());
    }
    if (from.has_contents_h()) {
      set_contents_h(from.contents_h());
    }
    if (from.has_contents_l()) {
      set_contents_l(from.contents_l());
    }
    if (from.has_read_exec_only()) {
      set_read_exec_only(from.read_exec_only());
    }
    if (from.has_limit_in_pages()) {
      set_limit_in_pages(from.limit_in_pages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seg_not_present()) {
      set_seg_not_present(from.seg_not_present());
    }
    if (from.has_useable()) {
      set_useable(from.useable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_desc_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_desc_t::CopyFrom(const user_desc_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_desc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void user_desc_t::Swap(user_desc_t* other) {
  if (other != this) {
    std::swap(entry_number_, other->entry_number_);
    std::swap(base_addr_, other->base_addr_);
    std::swap(limit_, other->limit_);
    std::swap(seg_32bit_, other->seg_32bit_);
    std::swap(contents_h_, other->contents_h_);
    std::swap(contents_l_, other->contents_l_);
    std::swap(read_exec_only_, other->read_exec_only_);
    std::swap(limit_in_pages_, other->limit_in_pages_);
    std::swap(seg_not_present_, other->seg_not_present_);
    std::swap(useable_, other->useable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_desc_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_desc_t_descriptor_;
  metadata.reflection = user_desc_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_info_x86::kClearTidAddrFieldNumber;
const int thread_info_x86::kGpregsFieldNumber;
const int thread_info_x86::kFpregsFieldNumber;
const int thread_info_x86::kTlsFieldNumber;
#endif  // !_MSC_VER

thread_info_x86::thread_info_x86()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_info_x86)
}

void thread_info_x86::InitAsDefaultInstance() {
  gpregs_ = const_cast< ::user_x86_regs_entry*>(&::user_x86_regs_entry::default_instance());
  fpregs_ = const_cast< ::user_x86_fpregs_entry*>(&::user_x86_fpregs_entry::default_instance());
}

thread_info_x86::thread_info_x86(const thread_info_x86& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_info_x86)
}

void thread_info_x86::SharedCtor() {
  _cached_size_ = 0;
  clear_tid_addr_ = GOOGLE_ULONGLONG(0);
  gpregs_ = NULL;
  fpregs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_info_x86::~thread_info_x86() {
  // @@protoc_insertion_point(destructor:thread_info_x86)
  SharedDtor();
}

void thread_info_x86::SharedDtor() {
  if (this != default_instance_) {
    delete gpregs_;
    delete fpregs_;
  }
}

void thread_info_x86::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_info_x86::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_info_x86_descriptor_;
}

const thread_info_x86& thread_info_x86::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dx86_2eproto();
  return *default_instance_;
}

thread_info_x86* thread_info_x86::default_instance_ = NULL;

thread_info_x86* thread_info_x86::New() const {
  return new thread_info_x86;
}

void thread_info_x86::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    clear_tid_addr_ = GOOGLE_ULONGLONG(0);
    if (has_gpregs()) {
      if (gpregs_ != NULL) gpregs_->::user_x86_regs_entry::Clear();
    }
    if (has_fpregs()) {
      if (fpregs_ != NULL) fpregs_->::user_x86_fpregs_entry::Clear();
    }
  }
  tls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_info_x86::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_info_x86)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clear_tid_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clear_tid_addr_)));
          set_has_clear_tid_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gpregs;
        break;
      }

      // required .user_x86_regs_entry gpregs = 2;
      case 2: {
        if (tag == 18) {
         parse_gpregs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpregs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fpregs;
        break;
      }

      // required .user_x86_fpregs_entry fpregs = 3;
      case 3: {
        if (tag == 26) {
         parse_fpregs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpregs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tls;
        break;
      }

      // repeated .user_desc_t tls = 4;
      case 4: {
        if (tag == 34) {
         parse_tls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_info_x86)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_info_x86)
  return false;
#undef DO_
}

void thread_info_x86::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_info_x86)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clear_tid_addr(), output);
  }

  // required .user_x86_regs_entry gpregs = 2;
  if (has_gpregs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gpregs(), output);
  }

  // required .user_x86_fpregs_entry fpregs = 3;
  if (has_fpregs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fpregs(), output);
  }

  // repeated .user_desc_t tls = 4;
  for (int i = 0; i < this->tls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_info_x86)
}

::google::protobuf::uint8* thread_info_x86::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_info_x86)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clear_tid_addr(), target);
  }

  // required .user_x86_regs_entry gpregs = 2;
  if (has_gpregs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gpregs(), target);
  }

  // required .user_x86_fpregs_entry fpregs = 3;
  if (has_fpregs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fpregs(), target);
  }

  // repeated .user_desc_t tls = 4;
  for (int i = 0; i < this->tls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_info_x86)
  return target;
}

int thread_info_x86::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 clear_tid_addr = 1;
    if (has_clear_tid_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clear_tid_addr());
    }

    // required .user_x86_regs_entry gpregs = 2;
    if (has_gpregs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpregs());
    }

    // required .user_x86_fpregs_entry fpregs = 3;
    if (has_fpregs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpregs());
    }

  }
  // repeated .user_desc_t tls = 4;
  total_size += 1 * this->tls_size();
  for (int i = 0; i < this->tls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_info_x86::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_info_x86* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_info_x86*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_info_x86::MergeFrom(const thread_info_x86& from) {
  GOOGLE_CHECK_NE(&from, this);
  tls_.MergeFrom(from.tls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_tid_addr()) {
      set_clear_tid_addr(from.clear_tid_addr());
    }
    if (from.has_gpregs()) {
      mutable_gpregs()->::user_x86_regs_entry::MergeFrom(from.gpregs());
    }
    if (from.has_fpregs()) {
      mutable_fpregs()->::user_x86_fpregs_entry::MergeFrom(from.fpregs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_info_x86::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_info_x86::CopyFrom(const thread_info_x86& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_info_x86::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gpregs()) {
    if (!this->gpregs().IsInitialized()) return false;
  }
  if (has_fpregs()) {
    if (!this->fpregs().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tls())) return false;
  return true;
}

void thread_info_x86::Swap(thread_info_x86* other) {
  if (other != this) {
    std::swap(clear_tid_addr_, other->clear_tid_addr_);
    std::swap(gpregs_, other->gpregs_);
    std::swap(fpregs_, other->fpregs_);
    tls_.Swap(&other->tls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_info_x86::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_info_x86_descriptor_;
  metadata.reflection = thread_info_x86_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
