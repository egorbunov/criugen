// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* aio_ring_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  aio_ring_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* mm_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mm_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mm_2eproto() {
  protobuf_AddDesc_mm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mm.proto");
  GOOGLE_CHECK(file != NULL);
  aio_ring_entry_descriptor_ = file->message_type(0);
  static const int aio_ring_entry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aio_ring_entry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aio_ring_entry, nr_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aio_ring_entry, ring_len_),
  };
  aio_ring_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      aio_ring_entry_descriptor_,
      aio_ring_entry::default_instance_,
      aio_ring_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aio_ring_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aio_ring_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(aio_ring_entry));
  mm_entry_descriptor_ = file->message_type(1);
  static const int mm_entry_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_start_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_end_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_start_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_end_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_start_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_start_brk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_brk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_arg_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_arg_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_env_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_env_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, exe_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, mm_saved_auxv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, vmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, dumpable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, aios_),
  };
  mm_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mm_entry_descriptor_,
      mm_entry::default_instance_,
      mm_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mm_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    aio_ring_entry_descriptor_, &aio_ring_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mm_entry_descriptor_, &mm_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mm_2eproto() {
  delete aio_ring_entry::default_instance_;
  delete aio_ring_entry_reflection_;
  delete mm_entry::default_instance_;
  delete mm_entry_reflection_;
}

void protobuf_AddDesc_mm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_opts_2eproto();
  ::protobuf_AddDesc_vma_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010mm.proto\032\nopts.proto\032\tvma.proto\">\n\016aio"
    "_ring_entry\022\n\n\002id\030\001 \002(\004\022\016\n\006nr_req\030\002 \002(\r\022"
    "\020\n\010ring_len\030\003 \002(\r\"\270\003\n\010mm_entry\022\034\n\rmm_sta"
    "rt_code\030\001 \002(\004B\005\322\?\002\010\001\022\032\n\013mm_end_code\030\002 \002("
    "\004B\005\322\?\002\010\001\022\034\n\rmm_start_data\030\003 \002(\004B\005\322\?\002\010\001\022\032"
    "\n\013mm_end_data\030\004 \002(\004B\005\322\?\002\010\001\022\035\n\016mm_start_s"
    "tack\030\005 \002(\004B\005\322\?\002\010\001\022\033\n\014mm_start_brk\030\006 \002(\004B"
    "\005\322\?\002\010\001\022\025\n\006mm_brk\030\007 \002(\004B\005\322\?\002\010\001\022\033\n\014mm_arg_"
    "start\030\010 \002(\004B\005\322\?\002\010\001\022\031\n\nmm_arg_end\030\t \002(\004B\005"
    "\322\?\002\010\001\022\033\n\014mm_env_start\030\n \002(\004B\005\322\?\002\010\001\022\031\n\nmm"
    "_env_end\030\013 \002(\004B\005\322\?\002\010\001\022\023\n\013exe_file_id\030\014 \002"
    "(\r\022\025\n\rmm_saved_auxv\030\r \003(\004\022\030\n\004vmas\030\016 \003(\0132"
    "\n.vma_entry\022\020\n\010dumpable\030\017 \001(\005\022\035\n\004aios\030\020 "
    "\003(\0132\017.aio_ring_entry", 540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mm.proto", &protobuf_RegisterTypes);
  aio_ring_entry::default_instance_ = new aio_ring_entry();
  mm_entry::default_instance_ = new mm_entry();
  aio_ring_entry::default_instance_->InitAsDefaultInstance();
  mm_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mm_2eproto {
  StaticDescriptorInitializer_mm_2eproto() {
    protobuf_AddDesc_mm_2eproto();
  }
} static_descriptor_initializer_mm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int aio_ring_entry::kIdFieldNumber;
const int aio_ring_entry::kNrReqFieldNumber;
const int aio_ring_entry::kRingLenFieldNumber;
#endif  // !_MSC_VER

aio_ring_entry::aio_ring_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aio_ring_entry)
}

void aio_ring_entry::InitAsDefaultInstance() {
}

aio_ring_entry::aio_ring_entry(const aio_ring_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aio_ring_entry)
}

void aio_ring_entry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  nr_req_ = 0u;
  ring_len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

aio_ring_entry::~aio_ring_entry() {
  // @@protoc_insertion_point(destructor:aio_ring_entry)
  SharedDtor();
}

void aio_ring_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void aio_ring_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* aio_ring_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return aio_ring_entry_descriptor_;
}

const aio_ring_entry& aio_ring_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mm_2eproto();
  return *default_instance_;
}

aio_ring_entry* aio_ring_entry::default_instance_ = NULL;

aio_ring_entry* aio_ring_entry::New() const {
  return new aio_ring_entry;
}

void aio_ring_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<aio_ring_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, ring_len_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool aio_ring_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aio_ring_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nr_req;
        break;
      }

      // required uint32 nr_req = 2;
      case 2: {
        if (tag == 16) {
         parse_nr_req:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_req_)));
          set_has_nr_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ring_len;
        break;
      }

      // required uint32 ring_len = 3;
      case 3: {
        if (tag == 24) {
         parse_ring_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_len_)));
          set_has_ring_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aio_ring_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aio_ring_entry)
  return false;
#undef DO_
}

void aio_ring_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aio_ring_entry)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint32 nr_req = 2;
  if (has_nr_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nr_req(), output);
  }

  // required uint32 ring_len = 3;
  if (has_ring_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ring_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aio_ring_entry)
}

::google::protobuf::uint8* aio_ring_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aio_ring_entry)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint32 nr_req = 2;
  if (has_nr_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nr_req(), target);
  }

  // required uint32 ring_len = 3;
  if (has_ring_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ring_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aio_ring_entry)
  return target;
}

int aio_ring_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint32 nr_req = 2;
    if (has_nr_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nr_req());
    }

    // required uint32 ring_len = 3;
    if (has_ring_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ring_len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void aio_ring_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const aio_ring_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const aio_ring_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void aio_ring_entry::MergeFrom(const aio_ring_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nr_req()) {
      set_nr_req(from.nr_req());
    }
    if (from.has_ring_len()) {
      set_ring_len(from.ring_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void aio_ring_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void aio_ring_entry::CopyFrom(const aio_ring_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool aio_ring_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void aio_ring_entry::Swap(aio_ring_entry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nr_req_, other->nr_req_);
    std::swap(ring_len_, other->ring_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata aio_ring_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = aio_ring_entry_descriptor_;
  metadata.reflection = aio_ring_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mm_entry::kMmStartCodeFieldNumber;
const int mm_entry::kMmEndCodeFieldNumber;
const int mm_entry::kMmStartDataFieldNumber;
const int mm_entry::kMmEndDataFieldNumber;
const int mm_entry::kMmStartStackFieldNumber;
const int mm_entry::kMmStartBrkFieldNumber;
const int mm_entry::kMmBrkFieldNumber;
const int mm_entry::kMmArgStartFieldNumber;
const int mm_entry::kMmArgEndFieldNumber;
const int mm_entry::kMmEnvStartFieldNumber;
const int mm_entry::kMmEnvEndFieldNumber;
const int mm_entry::kExeFileIdFieldNumber;
const int mm_entry::kMmSavedAuxvFieldNumber;
const int mm_entry::kVmasFieldNumber;
const int mm_entry::kDumpableFieldNumber;
const int mm_entry::kAiosFieldNumber;
#endif  // !_MSC_VER

mm_entry::mm_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_entry)
}

void mm_entry::InitAsDefaultInstance() {
}

mm_entry::mm_entry(const mm_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mm_entry)
}

void mm_entry::SharedCtor() {
  _cached_size_ = 0;
  mm_start_code_ = GOOGLE_ULONGLONG(0);
  mm_end_code_ = GOOGLE_ULONGLONG(0);
  mm_start_data_ = GOOGLE_ULONGLONG(0);
  mm_end_data_ = GOOGLE_ULONGLONG(0);
  mm_start_stack_ = GOOGLE_ULONGLONG(0);
  mm_start_brk_ = GOOGLE_ULONGLONG(0);
  mm_brk_ = GOOGLE_ULONGLONG(0);
  mm_arg_start_ = GOOGLE_ULONGLONG(0);
  mm_arg_end_ = GOOGLE_ULONGLONG(0);
  mm_env_start_ = GOOGLE_ULONGLONG(0);
  mm_env_end_ = GOOGLE_ULONGLONG(0);
  exe_file_id_ = 0u;
  dumpable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mm_entry::~mm_entry() {
  // @@protoc_insertion_point(destructor:mm_entry)
  SharedDtor();
}

void mm_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mm_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mm_entry_descriptor_;
}

const mm_entry& mm_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mm_2eproto();
  return *default_instance_;
}

mm_entry* mm_entry::default_instance_ = NULL;

mm_entry* mm_entry::New() const {
  return new mm_entry;
}

void mm_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mm_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mm_start_code_, mm_arg_start_);
  }
  if (_has_bits_[8 / 32] & 20224) {
    ZR_(mm_arg_end_, mm_env_end_);
    ZR_(exe_file_id_, dumpable_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mm_saved_auxv_.Clear();
  vmas_.Clear();
  aios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mm_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mm_start_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_start_code_)));
          set_has_mm_start_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mm_end_code;
        break;
      }

      // required uint64 mm_end_code = 2;
      case 2: {
        if (tag == 16) {
         parse_mm_end_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_end_code_)));
          set_has_mm_end_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mm_start_data;
        break;
      }

      // required uint64 mm_start_data = 3;
      case 3: {
        if (tag == 24) {
         parse_mm_start_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_start_data_)));
          set_has_mm_start_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mm_end_data;
        break;
      }

      // required uint64 mm_end_data = 4;
      case 4: {
        if (tag == 32) {
         parse_mm_end_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_end_data_)));
          set_has_mm_end_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mm_start_stack;
        break;
      }

      // required uint64 mm_start_stack = 5;
      case 5: {
        if (tag == 40) {
         parse_mm_start_stack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_start_stack_)));
          set_has_mm_start_stack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mm_start_brk;
        break;
      }

      // required uint64 mm_start_brk = 6;
      case 6: {
        if (tag == 48) {
         parse_mm_start_brk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_start_brk_)));
          set_has_mm_start_brk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mm_brk;
        break;
      }

      // required uint64 mm_brk = 7;
      case 7: {
        if (tag == 56) {
         parse_mm_brk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_brk_)));
          set_has_mm_brk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mm_arg_start;
        break;
      }

      // required uint64 mm_arg_start = 8;
      case 8: {
        if (tag == 64) {
         parse_mm_arg_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_arg_start_)));
          set_has_mm_arg_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mm_arg_end;
        break;
      }

      // required uint64 mm_arg_end = 9;
      case 9: {
        if (tag == 72) {
         parse_mm_arg_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_arg_end_)));
          set_has_mm_arg_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mm_env_start;
        break;
      }

      // required uint64 mm_env_start = 10;
      case 10: {
        if (tag == 80) {
         parse_mm_env_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_env_start_)));
          set_has_mm_env_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mm_env_end;
        break;
      }

      // required uint64 mm_env_end = 11;
      case 11: {
        if (tag == 88) {
         parse_mm_env_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mm_env_end_)));
          set_has_mm_env_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_exe_file_id;
        break;
      }

      // required uint32 exe_file_id = 12;
      case 12: {
        if (tag == 96) {
         parse_exe_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exe_file_id_)));
          set_has_exe_file_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mm_saved_auxv;
        break;
      }

      // repeated uint64 mm_saved_auxv = 13;
      case 13: {
        if (tag == 104) {
         parse_mm_saved_auxv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 104, input, this->mutable_mm_saved_auxv())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mm_saved_auxv())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mm_saved_auxv;
        if (input->ExpectTag(114)) goto parse_vmas;
        break;
      }

      // repeated .vma_entry vmas = 14;
      case 14: {
        if (tag == 114) {
         parse_vmas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vmas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vmas;
        if (input->ExpectTag(120)) goto parse_dumpable;
        break;
      }

      // optional int32 dumpable = 15;
      case 15: {
        if (tag == 120) {
         parse_dumpable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dumpable_)));
          set_has_dumpable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_aios;
        break;
      }

      // repeated .aio_ring_entry aios = 16;
      case 16: {
        if (tag == 130) {
         parse_aios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aios()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_aios;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_entry)
  return false;
#undef DO_
}

void mm_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_entry)
  // required uint64 mm_start_code = 1;
  if (has_mm_start_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mm_start_code(), output);
  }

  // required uint64 mm_end_code = 2;
  if (has_mm_end_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mm_end_code(), output);
  }

  // required uint64 mm_start_data = 3;
  if (has_mm_start_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mm_start_data(), output);
  }

  // required uint64 mm_end_data = 4;
  if (has_mm_end_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mm_end_data(), output);
  }

  // required uint64 mm_start_stack = 5;
  if (has_mm_start_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mm_start_stack(), output);
  }

  // required uint64 mm_start_brk = 6;
  if (has_mm_start_brk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->mm_start_brk(), output);
  }

  // required uint64 mm_brk = 7;
  if (has_mm_brk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->mm_brk(), output);
  }

  // required uint64 mm_arg_start = 8;
  if (has_mm_arg_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mm_arg_start(), output);
  }

  // required uint64 mm_arg_end = 9;
  if (has_mm_arg_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->mm_arg_end(), output);
  }

  // required uint64 mm_env_start = 10;
  if (has_mm_env_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->mm_env_start(), output);
  }

  // required uint64 mm_env_end = 11;
  if (has_mm_env_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mm_env_end(), output);
  }

  // required uint32 exe_file_id = 12;
  if (has_exe_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->exe_file_id(), output);
  }

  // repeated uint64 mm_saved_auxv = 13;
  for (int i = 0; i < this->mm_saved_auxv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      13, this->mm_saved_auxv(i), output);
  }

  // repeated .vma_entry vmas = 14;
  for (int i = 0; i < this->vmas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vmas(i), output);
  }

  // optional int32 dumpable = 15;
  if (has_dumpable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dumpable(), output);
  }

  // repeated .aio_ring_entry aios = 16;
  for (int i = 0; i < this->aios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->aios(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_entry)
}

::google::protobuf::uint8* mm_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_entry)
  // required uint64 mm_start_code = 1;
  if (has_mm_start_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mm_start_code(), target);
  }

  // required uint64 mm_end_code = 2;
  if (has_mm_end_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mm_end_code(), target);
  }

  // required uint64 mm_start_data = 3;
  if (has_mm_start_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mm_start_data(), target);
  }

  // required uint64 mm_end_data = 4;
  if (has_mm_end_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mm_end_data(), target);
  }

  // required uint64 mm_start_stack = 5;
  if (has_mm_start_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mm_start_stack(), target);
  }

  // required uint64 mm_start_brk = 6;
  if (has_mm_start_brk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->mm_start_brk(), target);
  }

  // required uint64 mm_brk = 7;
  if (has_mm_brk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->mm_brk(), target);
  }

  // required uint64 mm_arg_start = 8;
  if (has_mm_arg_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->mm_arg_start(), target);
  }

  // required uint64 mm_arg_end = 9;
  if (has_mm_arg_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->mm_arg_end(), target);
  }

  // required uint64 mm_env_start = 10;
  if (has_mm_env_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->mm_env_start(), target);
  }

  // required uint64 mm_env_end = 11;
  if (has_mm_env_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mm_env_end(), target);
  }

  // required uint32 exe_file_id = 12;
  if (has_exe_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->exe_file_id(), target);
  }

  // repeated uint64 mm_saved_auxv = 13;
  for (int i = 0; i < this->mm_saved_auxv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(13, this->mm_saved_auxv(i), target);
  }

  // repeated .vma_entry vmas = 14;
  for (int i = 0; i < this->vmas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vmas(i), target);
  }

  // optional int32 dumpable = 15;
  if (has_dumpable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dumpable(), target);
  }

  // repeated .aio_ring_entry aios = 16;
  for (int i = 0; i < this->aios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->aios(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_entry)
  return target;
}

int mm_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mm_start_code = 1;
    if (has_mm_start_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_start_code());
    }

    // required uint64 mm_end_code = 2;
    if (has_mm_end_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_end_code());
    }

    // required uint64 mm_start_data = 3;
    if (has_mm_start_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_start_data());
    }

    // required uint64 mm_end_data = 4;
    if (has_mm_end_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_end_data());
    }

    // required uint64 mm_start_stack = 5;
    if (has_mm_start_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_start_stack());
    }

    // required uint64 mm_start_brk = 6;
    if (has_mm_start_brk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_start_brk());
    }

    // required uint64 mm_brk = 7;
    if (has_mm_brk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_brk());
    }

    // required uint64 mm_arg_start = 8;
    if (has_mm_arg_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_arg_start());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 mm_arg_end = 9;
    if (has_mm_arg_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_arg_end());
    }

    // required uint64 mm_env_start = 10;
    if (has_mm_env_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_env_start());
    }

    // required uint64 mm_env_end = 11;
    if (has_mm_env_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mm_env_end());
    }

    // required uint32 exe_file_id = 12;
    if (has_exe_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exe_file_id());
    }

    // optional int32 dumpable = 15;
    if (has_dumpable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dumpable());
    }

  }
  // repeated uint64 mm_saved_auxv = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->mm_saved_auxv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mm_saved_auxv(i));
    }
    total_size += 1 * this->mm_saved_auxv_size() + data_size;
  }

  // repeated .vma_entry vmas = 14;
  total_size += 1 * this->vmas_size();
  for (int i = 0; i < this->vmas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vmas(i));
  }

  // repeated .aio_ring_entry aios = 16;
  total_size += 2 * this->aios_size();
  for (int i = 0; i < this->aios_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aios(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mm_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mm_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mm_entry::MergeFrom(const mm_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  mm_saved_auxv_.MergeFrom(from.mm_saved_auxv_);
  vmas_.MergeFrom(from.vmas_);
  aios_.MergeFrom(from.aios_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mm_start_code()) {
      set_mm_start_code(from.mm_start_code());
    }
    if (from.has_mm_end_code()) {
      set_mm_end_code(from.mm_end_code());
    }
    if (from.has_mm_start_data()) {
      set_mm_start_data(from.mm_start_data());
    }
    if (from.has_mm_end_data()) {
      set_mm_end_data(from.mm_end_data());
    }
    if (from.has_mm_start_stack()) {
      set_mm_start_stack(from.mm_start_stack());
    }
    if (from.has_mm_start_brk()) {
      set_mm_start_brk(from.mm_start_brk());
    }
    if (from.has_mm_brk()) {
      set_mm_brk(from.mm_brk());
    }
    if (from.has_mm_arg_start()) {
      set_mm_arg_start(from.mm_arg_start());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mm_arg_end()) {
      set_mm_arg_end(from.mm_arg_end());
    }
    if (from.has_mm_env_start()) {
      set_mm_env_start(from.mm_env_start());
    }
    if (from.has_mm_env_end()) {
      set_mm_env_end(from.mm_env_end());
    }
    if (from.has_exe_file_id()) {
      set_exe_file_id(from.exe_file_id());
    }
    if (from.has_dumpable()) {
      set_dumpable(from.dumpable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mm_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_entry::CopyFrom(const mm_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->vmas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->aios())) return false;
  return true;
}

void mm_entry::Swap(mm_entry* other) {
  if (other != this) {
    std::swap(mm_start_code_, other->mm_start_code_);
    std::swap(mm_end_code_, other->mm_end_code_);
    std::swap(mm_start_data_, other->mm_start_data_);
    std::swap(mm_end_data_, other->mm_end_data_);
    std::swap(mm_start_stack_, other->mm_start_stack_);
    std::swap(mm_start_brk_, other->mm_start_brk_);
    std::swap(mm_brk_, other->mm_brk_);
    std::swap(mm_arg_start_, other->mm_arg_start_);
    std::swap(mm_arg_end_, other->mm_arg_end_);
    std::swap(mm_env_start_, other->mm_env_start_);
    std::swap(mm_env_end_, other->mm_env_end_);
    std::swap(exe_file_id_, other->exe_file_id_);
    mm_saved_auxv_.Swap(&other->mm_saved_auxv_);
    vmas_.Swap(&other->vmas_);
    std::swap(dumpable_, other->dumpable_);
    aios_.Swap(&other->aios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mm_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mm_entry_descriptor_;
  metadata.reflection = mm_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
