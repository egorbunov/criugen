// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CRIU_Opts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRIU_Opts_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_opts_2eproto() {
  protobuf_AddDesc_opts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "opts.proto");
  GOOGLE_CHECK(file != NULL);
  CRIU_Opts_descriptor_ = file->message_type(0);
  static const int CRIU_Opts_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, ipadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, odev_),
  };
  CRIU_Opts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRIU_Opts_descriptor_,
      CRIU_Opts::default_instance_,
      CRIU_Opts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRIU_Opts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRIU_Opts));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_opts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRIU_Opts_descriptor_, &CRIU_Opts::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_opts_2eproto() {
  delete CRIU_Opts::default_instance_;
  delete CRIU_Opts_reflection_;
}

void protobuf_AddDesc_opts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nopts.proto\032 google/protobuf/descriptor"
    ".proto\"Q\n\tCRIU_Opts\022\013\n\003hex\030\001 \001(\010\022\r\n\005ipad"
    "d\030\002 \001(\010\022\r\n\005flags\030\003 \001(\t\022\013\n\003dev\030\004 \001(\010\022\014\n\004o"
    "dev\030\005 \001(\010:8\n\004criu\022\035.google.protobuf.Fiel"
    "dOptions\030\372\007 \001(\0132\n.CRIU_Opts", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opts.proto", &protobuf_RegisterTypes);
  CRIU_Opts::default_instance_ = new CRIU_Opts();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    1018, 11, false, false,
    &::CRIU_Opts::default_instance());
  CRIU_Opts::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_opts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_opts_2eproto {
  StaticDescriptorInitializer_opts_2eproto() {
    protobuf_AddDesc_opts_2eproto();
  }
} static_descriptor_initializer_opts_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CRIU_Opts::kHexFieldNumber;
const int CRIU_Opts::kIpaddFieldNumber;
const int CRIU_Opts::kFlagsFieldNumber;
const int CRIU_Opts::kDevFieldNumber;
const int CRIU_Opts::kOdevFieldNumber;
#endif  // !_MSC_VER

CRIU_Opts::CRIU_Opts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CRIU_Opts)
}

void CRIU_Opts::InitAsDefaultInstance() {
}

CRIU_Opts::CRIU_Opts(const CRIU_Opts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CRIU_Opts)
}

void CRIU_Opts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hex_ = false;
  ipadd_ = false;
  flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_ = false;
  odev_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRIU_Opts::~CRIU_Opts() {
  // @@protoc_insertion_point(destructor:CRIU_Opts)
  SharedDtor();
}

void CRIU_Opts::SharedDtor() {
  if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flags_;
  }
  if (this != default_instance_) {
  }
}

void CRIU_Opts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRIU_Opts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRIU_Opts_descriptor_;
}

const CRIU_Opts& CRIU_Opts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opts_2eproto();
  return *default_instance_;
}

CRIU_Opts* CRIU_Opts::default_instance_ = NULL;

CRIU_Opts* CRIU_Opts::New() const {
  return new CRIU_Opts;
}

void CRIU_Opts::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CRIU_Opts*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hex_, odev_);
    if (has_flags()) {
      if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        flags_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRIU_Opts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CRIU_Opts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hex_)));
          set_has_hex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ipadd;
        break;
      }

      // optional bool ipadd = 2;
      case 2: {
        if (tag == 16) {
         parse_ipadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ipadd_)));
          set_has_ipadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flags;
        break;
      }

      // optional string flags = 3;
      case 3: {
        if (tag == 26) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flags().data(), this->flags().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dev;
        break;
      }

      // optional bool dev = 4;
      case 4: {
        if (tag == 32) {
         parse_dev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dev_)));
          set_has_dev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_odev;
        break;
      }

      // optional bool odev = 5;
      case 5: {
        if (tag == 40) {
         parse_odev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &odev_)));
          set_has_odev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CRIU_Opts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CRIU_Opts)
  return false;
#undef DO_
}

void CRIU_Opts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CRIU_Opts)
  // optional bool hex = 1;
  if (has_hex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hex(), output);
  }

  // optional bool ipadd = 2;
  if (has_ipadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ipadd(), output);
  }

  // optional string flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->flags(), output);
  }

  // optional bool dev = 4;
  if (has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dev(), output);
  }

  // optional bool odev = 5;
  if (has_odev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->odev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CRIU_Opts)
}

::google::protobuf::uint8* CRIU_Opts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRIU_Opts)
  // optional bool hex = 1;
  if (has_hex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hex(), target);
  }

  // optional bool ipadd = 2;
  if (has_ipadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ipadd(), target);
  }

  // optional string flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->flags(), target);
  }

  // optional bool dev = 4;
  if (has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dev(), target);
  }

  // optional bool odev = 5;
  if (has_odev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->odev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRIU_Opts)
  return target;
}

int CRIU_Opts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hex = 1;
    if (has_hex()) {
      total_size += 1 + 1;
    }

    // optional bool ipadd = 2;
    if (has_ipadd()) {
      total_size += 1 + 1;
    }

    // optional string flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flags());
    }

    // optional bool dev = 4;
    if (has_dev()) {
      total_size += 1 + 1;
    }

    // optional bool odev = 5;
    if (has_odev()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRIU_Opts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRIU_Opts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRIU_Opts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRIU_Opts::MergeFrom(const CRIU_Opts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hex()) {
      set_hex(from.hex());
    }
    if (from.has_ipadd()) {
      set_ipadd(from.ipadd());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_dev()) {
      set_dev(from.dev());
    }
    if (from.has_odev()) {
      set_odev(from.odev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRIU_Opts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRIU_Opts::CopyFrom(const CRIU_Opts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRIU_Opts::IsInitialized() const {

  return true;
}

void CRIU_Opts::Swap(CRIU_Opts* other) {
  if (other != this) {
    std::swap(hex_, other->hex_);
    std::swap(ipadd_, other->ipadd_);
    std::swap(flags_, other->flags_);
    std::swap(dev_, other->dev_);
    std::swap(odev_, other->odev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRIU_Opts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRIU_Opts_descriptor_;
  metadata.reflection = CRIU_Opts_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::CRIU_Opts >, 11, false >
  criu(kCriuFieldNumber, ::CRIU_Opts::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
