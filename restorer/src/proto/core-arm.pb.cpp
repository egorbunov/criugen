// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core-arm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core-arm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* user_arm_regs_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arm_regs_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_arm_vfpstate_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arm_vfpstate_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_info_arm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_info_arm_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2darm_2eproto() {
  protobuf_AddDesc_core_2darm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core-arm.proto");
  GOOGLE_CHECK(file != NULL);
  user_arm_regs_entry_descriptor_ = file->message_type(0);
  static const int user_arm_regs_entry_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, r10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, cpsr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, orig_r0_),
  };
  user_arm_regs_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arm_regs_entry_descriptor_,
      user_arm_regs_entry::default_instance_,
      user_arm_regs_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_regs_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arm_regs_entry));
  user_arm_vfpstate_entry_descriptor_ = file->message_type(1);
  static const int user_arm_vfpstate_entry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, vfp_regs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, fpscr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, fpexc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, fpinst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, fpinst2_),
  };
  user_arm_vfpstate_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arm_vfpstate_entry_descriptor_,
      user_arm_vfpstate_entry::default_instance_,
      user_arm_vfpstate_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arm_vfpstate_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arm_vfpstate_entry));
  thread_info_arm_descriptor_ = file->message_type(2);
  static const int thread_info_arm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, clear_tid_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, tls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, gpregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, fpstate_),
  };
  thread_info_arm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_info_arm_descriptor_,
      thread_info_arm::default_instance_,
      thread_info_arm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_arm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_info_arm));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2darm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arm_regs_entry_descriptor_, &user_arm_regs_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arm_vfpstate_entry_descriptor_, &user_arm_vfpstate_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_info_arm_descriptor_, &thread_info_arm::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2darm_2eproto() {
  delete user_arm_regs_entry::default_instance_;
  delete user_arm_regs_entry_reflection_;
  delete user_arm_vfpstate_entry::default_instance_;
  delete user_arm_vfpstate_entry_reflection_;
  delete thread_info_arm::default_instance_;
  delete thread_info_arm_reflection_;
}

void protobuf_AddDesc_core_2darm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016core-arm.proto\"\365\001\n\023user_arm_regs_entry"
    "\022\n\n\002r0\030\001 \002(\r\022\n\n\002r1\030\002 \002(\r\022\n\n\002r2\030\003 \002(\r\022\n\n\002"
    "r3\030\004 \002(\r\022\n\n\002r4\030\005 \002(\r\022\n\n\002r5\030\006 \002(\r\022\n\n\002r6\030\007"
    " \002(\r\022\n\n\002r7\030\010 \002(\r\022\n\n\002r8\030\t \002(\r\022\n\n\002r9\030\n \002(\r"
    "\022\013\n\003r10\030\013 \002(\r\022\n\n\002fp\030\014 \002(\r\022\n\n\002ip\030\r \002(\r\022\n\n"
    "\002sp\030\016 \002(\r\022\n\n\002lr\030\017 \002(\r\022\n\n\002pc\030\020 \002(\r\022\014\n\004cps"
    "r\030\021 \002(\r\022\017\n\007orig_r0\030\022 \002(\r\"j\n\027user_arm_vfp"
    "state_entry\022\020\n\010vfp_regs\030\001 \003(\004\022\r\n\005fpscr\030\002"
    " \002(\r\022\r\n\005fpexc\030\003 \002(\r\022\016\n\006fpinst\030\004 \002(\r\022\017\n\007f"
    "pinst2\030\005 \002(\r\"\207\001\n\017thread_info_arm\022\026\n\016clea"
    "r_tid_addr\030\001 \002(\004\022\013\n\003tls\030\002 \002(\r\022$\n\006gpregs\030"
    "\003 \002(\0132\024.user_arm_regs_entry\022)\n\007fpstate\030\004"
    " \002(\0132\030.user_arm_vfpstate_entry", 510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core-arm.proto", &protobuf_RegisterTypes);
  user_arm_regs_entry::default_instance_ = new user_arm_regs_entry();
  user_arm_vfpstate_entry::default_instance_ = new user_arm_vfpstate_entry();
  thread_info_arm::default_instance_ = new thread_info_arm();
  user_arm_regs_entry::default_instance_->InitAsDefaultInstance();
  user_arm_vfpstate_entry::default_instance_->InitAsDefaultInstance();
  thread_info_arm::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2darm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2darm_2eproto {
  StaticDescriptorInitializer_core_2darm_2eproto() {
    protobuf_AddDesc_core_2darm_2eproto();
  }
} static_descriptor_initializer_core_2darm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int user_arm_regs_entry::kR0FieldNumber;
const int user_arm_regs_entry::kR1FieldNumber;
const int user_arm_regs_entry::kR2FieldNumber;
const int user_arm_regs_entry::kR3FieldNumber;
const int user_arm_regs_entry::kR4FieldNumber;
const int user_arm_regs_entry::kR5FieldNumber;
const int user_arm_regs_entry::kR6FieldNumber;
const int user_arm_regs_entry::kR7FieldNumber;
const int user_arm_regs_entry::kR8FieldNumber;
const int user_arm_regs_entry::kR9FieldNumber;
const int user_arm_regs_entry::kR10FieldNumber;
const int user_arm_regs_entry::kFpFieldNumber;
const int user_arm_regs_entry::kIpFieldNumber;
const int user_arm_regs_entry::kSpFieldNumber;
const int user_arm_regs_entry::kLrFieldNumber;
const int user_arm_regs_entry::kPcFieldNumber;
const int user_arm_regs_entry::kCpsrFieldNumber;
const int user_arm_regs_entry::kOrigR0FieldNumber;
#endif  // !_MSC_VER

user_arm_regs_entry::user_arm_regs_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_arm_regs_entry)
}

void user_arm_regs_entry::InitAsDefaultInstance() {
}

user_arm_regs_entry::user_arm_regs_entry(const user_arm_regs_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_arm_regs_entry)
}

void user_arm_regs_entry::SharedCtor() {
  _cached_size_ = 0;
  r0_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  r5_ = 0u;
  r6_ = 0u;
  r7_ = 0u;
  r8_ = 0u;
  r9_ = 0u;
  r10_ = 0u;
  fp_ = 0u;
  ip_ = 0u;
  sp_ = 0u;
  lr_ = 0u;
  pc_ = 0u;
  cpsr_ = 0u;
  orig_r0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arm_regs_entry::~user_arm_regs_entry() {
  // @@protoc_insertion_point(destructor:user_arm_regs_entry)
  SharedDtor();
}

void user_arm_regs_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_arm_regs_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arm_regs_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arm_regs_entry_descriptor_;
}

const user_arm_regs_entry& user_arm_regs_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2darm_2eproto();
  return *default_instance_;
}

user_arm_regs_entry* user_arm_regs_entry::default_instance_ = NULL;

user_arm_regs_entry* user_arm_regs_entry::New() const {
  return new user_arm_regs_entry;
}

void user_arm_regs_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_arm_regs_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r0_, r7_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(r8_, pc_);
  }
  ZR_(cpsr_, orig_r0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arm_regs_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_arm_regs_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 r0 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r0_)));
          set_has_r0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r1;
        break;
      }

      // required uint32 r1 = 2;
      case 2: {
        if (tag == 16) {
         parse_r1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r2;
        break;
      }

      // required uint32 r2 = 3;
      case 3: {
        if (tag == 24) {
         parse_r2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_r3;
        break;
      }

      // required uint32 r3 = 4;
      case 4: {
        if (tag == 32) {
         parse_r3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_r4;
        break;
      }

      // required uint32 r4 = 5;
      case 5: {
        if (tag == 40) {
         parse_r4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_r5;
        break;
      }

      // required uint32 r5 = 6;
      case 6: {
        if (tag == 48) {
         parse_r5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r5_)));
          set_has_r5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_r6;
        break;
      }

      // required uint32 r6 = 7;
      case 7: {
        if (tag == 56) {
         parse_r6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r6_)));
          set_has_r6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_r7;
        break;
      }

      // required uint32 r7 = 8;
      case 8: {
        if (tag == 64) {
         parse_r7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r7_)));
          set_has_r7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_r8;
        break;
      }

      // required uint32 r8 = 9;
      case 9: {
        if (tag == 72) {
         parse_r8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r8_)));
          set_has_r8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_r9;
        break;
      }

      // required uint32 r9 = 10;
      case 10: {
        if (tag == 80) {
         parse_r9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r9_)));
          set_has_r9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_r10;
        break;
      }

      // required uint32 r10 = 11;
      case 11: {
        if (tag == 88) {
         parse_r10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r10_)));
          set_has_r10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fp;
        break;
      }

      // required uint32 fp = 12;
      case 12: {
        if (tag == 96) {
         parse_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fp_)));
          set_has_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ip;
        break;
      }

      // required uint32 ip = 13;
      case 13: {
        if (tag == 104) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sp;
        break;
      }

      // required uint32 sp = 14;
      case 14: {
        if (tag == 112) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_lr;
        break;
      }

      // required uint32 lr = 15;
      case 15: {
        if (tag == 120) {
         parse_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lr_)));
          set_has_lr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pc;
        break;
      }

      // required uint32 pc = 16;
      case 16: {
        if (tag == 128) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cpsr;
        break;
      }

      // required uint32 cpsr = 17;
      case 17: {
        if (tag == 136) {
         parse_cpsr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpsr_)));
          set_has_cpsr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_orig_r0;
        break;
      }

      // required uint32 orig_r0 = 18;
      case 18: {
        if (tag == 144) {
         parse_orig_r0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orig_r0_)));
          set_has_orig_r0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_arm_regs_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_arm_regs_entry)
  return false;
#undef DO_
}

void user_arm_regs_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_arm_regs_entry)
  // required uint32 r0 = 1;
  if (has_r0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r0(), output);
  }

  // required uint32 r1 = 2;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r1(), output);
  }

  // required uint32 r2 = 3;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r2(), output);
  }

  // required uint32 r3 = 4;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r3(), output);
  }

  // required uint32 r4 = 5;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r4(), output);
  }

  // required uint32 r5 = 6;
  if (has_r5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->r5(), output);
  }

  // required uint32 r6 = 7;
  if (has_r6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->r6(), output);
  }

  // required uint32 r7 = 8;
  if (has_r7()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->r7(), output);
  }

  // required uint32 r8 = 9;
  if (has_r8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->r8(), output);
  }

  // required uint32 r9 = 10;
  if (has_r9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->r9(), output);
  }

  // required uint32 r10 = 11;
  if (has_r10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->r10(), output);
  }

  // required uint32 fp = 12;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->fp(), output);
  }

  // required uint32 ip = 13;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ip(), output);
  }

  // required uint32 sp = 14;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->sp(), output);
  }

  // required uint32 lr = 15;
  if (has_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->lr(), output);
  }

  // required uint32 pc = 16;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pc(), output);
  }

  // required uint32 cpsr = 17;
  if (has_cpsr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cpsr(), output);
  }

  // required uint32 orig_r0 = 18;
  if (has_orig_r0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->orig_r0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_arm_regs_entry)
}

::google::protobuf::uint8* user_arm_regs_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_arm_regs_entry)
  // required uint32 r0 = 1;
  if (has_r0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r0(), target);
  }

  // required uint32 r1 = 2;
  if (has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->r1(), target);
  }

  // required uint32 r2 = 3;
  if (has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r2(), target);
  }

  // required uint32 r3 = 4;
  if (has_r3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->r3(), target);
  }

  // required uint32 r4 = 5;
  if (has_r4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->r4(), target);
  }

  // required uint32 r5 = 6;
  if (has_r5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->r5(), target);
  }

  // required uint32 r6 = 7;
  if (has_r6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->r6(), target);
  }

  // required uint32 r7 = 8;
  if (has_r7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->r7(), target);
  }

  // required uint32 r8 = 9;
  if (has_r8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->r8(), target);
  }

  // required uint32 r9 = 10;
  if (has_r9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->r9(), target);
  }

  // required uint32 r10 = 11;
  if (has_r10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->r10(), target);
  }

  // required uint32 fp = 12;
  if (has_fp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->fp(), target);
  }

  // required uint32 ip = 13;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ip(), target);
  }

  // required uint32 sp = 14;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->sp(), target);
  }

  // required uint32 lr = 15;
  if (has_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->lr(), target);
  }

  // required uint32 pc = 16;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pc(), target);
  }

  // required uint32 cpsr = 17;
  if (has_cpsr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cpsr(), target);
  }

  // required uint32 orig_r0 = 18;
  if (has_orig_r0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->orig_r0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_arm_regs_entry)
  return target;
}

int user_arm_regs_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 r0 = 1;
    if (has_r0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r0());
    }

    // required uint32 r1 = 2;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 r2 = 3;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 r3 = 4;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 r4 = 5;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

    // required uint32 r5 = 6;
    if (has_r5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r5());
    }

    // required uint32 r6 = 7;
    if (has_r6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r6());
    }

    // required uint32 r7 = 8;
    if (has_r7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r7());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 r8 = 9;
    if (has_r8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r8());
    }

    // required uint32 r9 = 10;
    if (has_r9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r9());
    }

    // required uint32 r10 = 11;
    if (has_r10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r10());
    }

    // required uint32 fp = 12;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fp());
    }

    // required uint32 ip = 13;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 sp = 14;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp());
    }

    // required uint32 lr = 15;
    if (has_lr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lr());
    }

    // required uint32 pc = 16;
    if (has_pc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pc());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 cpsr = 17;
    if (has_cpsr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpsr());
    }

    // required uint32 orig_r0 = 18;
    if (has_orig_r0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orig_r0());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arm_regs_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arm_regs_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arm_regs_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arm_regs_entry::MergeFrom(const user_arm_regs_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r0()) {
      set_r0(from.r0());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
    if (from.has_r5()) {
      set_r5(from.r5());
    }
    if (from.has_r6()) {
      set_r6(from.r6());
    }
    if (from.has_r7()) {
      set_r7(from.r7());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_r8()) {
      set_r8(from.r8());
    }
    if (from.has_r9()) {
      set_r9(from.r9());
    }
    if (from.has_r10()) {
      set_r10(from.r10());
    }
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_lr()) {
      set_lr(from.lr());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cpsr()) {
      set_cpsr(from.cpsr());
    }
    if (from.has_orig_r0()) {
      set_orig_r0(from.orig_r0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arm_regs_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arm_regs_entry::CopyFrom(const user_arm_regs_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arm_regs_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void user_arm_regs_entry::Swap(user_arm_regs_entry* other) {
  if (other != this) {
    std::swap(r0_, other->r0_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(r5_, other->r5_);
    std::swap(r6_, other->r6_);
    std::swap(r7_, other->r7_);
    std::swap(r8_, other->r8_);
    std::swap(r9_, other->r9_);
    std::swap(r10_, other->r10_);
    std::swap(fp_, other->fp_);
    std::swap(ip_, other->ip_);
    std::swap(sp_, other->sp_);
    std::swap(lr_, other->lr_);
    std::swap(pc_, other->pc_);
    std::swap(cpsr_, other->cpsr_);
    std::swap(orig_r0_, other->orig_r0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arm_regs_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arm_regs_entry_descriptor_;
  metadata.reflection = user_arm_regs_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_arm_vfpstate_entry::kVfpRegsFieldNumber;
const int user_arm_vfpstate_entry::kFpscrFieldNumber;
const int user_arm_vfpstate_entry::kFpexcFieldNumber;
const int user_arm_vfpstate_entry::kFpinstFieldNumber;
const int user_arm_vfpstate_entry::kFpinst2FieldNumber;
#endif  // !_MSC_VER

user_arm_vfpstate_entry::user_arm_vfpstate_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_arm_vfpstate_entry)
}

void user_arm_vfpstate_entry::InitAsDefaultInstance() {
}

user_arm_vfpstate_entry::user_arm_vfpstate_entry(const user_arm_vfpstate_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_arm_vfpstate_entry)
}

void user_arm_vfpstate_entry::SharedCtor() {
  _cached_size_ = 0;
  fpscr_ = 0u;
  fpexc_ = 0u;
  fpinst_ = 0u;
  fpinst2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arm_vfpstate_entry::~user_arm_vfpstate_entry() {
  // @@protoc_insertion_point(destructor:user_arm_vfpstate_entry)
  SharedDtor();
}

void user_arm_vfpstate_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_arm_vfpstate_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arm_vfpstate_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arm_vfpstate_entry_descriptor_;
}

const user_arm_vfpstate_entry& user_arm_vfpstate_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2darm_2eproto();
  return *default_instance_;
}

user_arm_vfpstate_entry* user_arm_vfpstate_entry::default_instance_ = NULL;

user_arm_vfpstate_entry* user_arm_vfpstate_entry::New() const {
  return new user_arm_vfpstate_entry;
}

void user_arm_vfpstate_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_arm_vfpstate_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fpscr_, fpinst2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  vfp_regs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arm_vfpstate_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_arm_vfpstate_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 vfp_regs = 1;
      case 1: {
        if (tag == 8) {
         parse_vfp_regs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_vfp_regs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vfp_regs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_vfp_regs;
        if (input->ExpectTag(16)) goto parse_fpscr;
        break;
      }

      // required uint32 fpscr = 2;
      case 2: {
        if (tag == 16) {
         parse_fpscr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpscr_)));
          set_has_fpscr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fpexc;
        break;
      }

      // required uint32 fpexc = 3;
      case 3: {
        if (tag == 24) {
         parse_fpexc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpexc_)));
          set_has_fpexc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fpinst;
        break;
      }

      // required uint32 fpinst = 4;
      case 4: {
        if (tag == 32) {
         parse_fpinst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpinst_)));
          set_has_fpinst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fpinst2;
        break;
      }

      // required uint32 fpinst2 = 5;
      case 5: {
        if (tag == 40) {
         parse_fpinst2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpinst2_)));
          set_has_fpinst2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_arm_vfpstate_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_arm_vfpstate_entry)
  return false;
#undef DO_
}

void user_arm_vfpstate_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_arm_vfpstate_entry)
  // repeated uint64 vfp_regs = 1;
  for (int i = 0; i < this->vfp_regs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->vfp_regs(i), output);
  }

  // required uint32 fpscr = 2;
  if (has_fpscr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fpscr(), output);
  }

  // required uint32 fpexc = 3;
  if (has_fpexc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fpexc(), output);
  }

  // required uint32 fpinst = 4;
  if (has_fpinst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fpinst(), output);
  }

  // required uint32 fpinst2 = 5;
  if (has_fpinst2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fpinst2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_arm_vfpstate_entry)
}

::google::protobuf::uint8* user_arm_vfpstate_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_arm_vfpstate_entry)
  // repeated uint64 vfp_regs = 1;
  for (int i = 0; i < this->vfp_regs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->vfp_regs(i), target);
  }

  // required uint32 fpscr = 2;
  if (has_fpscr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fpscr(), target);
  }

  // required uint32 fpexc = 3;
  if (has_fpexc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fpexc(), target);
  }

  // required uint32 fpinst = 4;
  if (has_fpinst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fpinst(), target);
  }

  // required uint32 fpinst2 = 5;
  if (has_fpinst2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fpinst2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_arm_vfpstate_entry)
  return target;
}

int user_arm_vfpstate_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 fpscr = 2;
    if (has_fpscr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpscr());
    }

    // required uint32 fpexc = 3;
    if (has_fpexc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpexc());
    }

    // required uint32 fpinst = 4;
    if (has_fpinst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpinst());
    }

    // required uint32 fpinst2 = 5;
    if (has_fpinst2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpinst2());
    }

  }
  // repeated uint64 vfp_regs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vfp_regs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vfp_regs(i));
    }
    total_size += 1 * this->vfp_regs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arm_vfpstate_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arm_vfpstate_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arm_vfpstate_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arm_vfpstate_entry::MergeFrom(const user_arm_vfpstate_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  vfp_regs_.MergeFrom(from.vfp_regs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fpscr()) {
      set_fpscr(from.fpscr());
    }
    if (from.has_fpexc()) {
      set_fpexc(from.fpexc());
    }
    if (from.has_fpinst()) {
      set_fpinst(from.fpinst());
    }
    if (from.has_fpinst2()) {
      set_fpinst2(from.fpinst2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arm_vfpstate_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arm_vfpstate_entry::CopyFrom(const user_arm_vfpstate_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arm_vfpstate_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void user_arm_vfpstate_entry::Swap(user_arm_vfpstate_entry* other) {
  if (other != this) {
    vfp_regs_.Swap(&other->vfp_regs_);
    std::swap(fpscr_, other->fpscr_);
    std::swap(fpexc_, other->fpexc_);
    std::swap(fpinst_, other->fpinst_);
    std::swap(fpinst2_, other->fpinst2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arm_vfpstate_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arm_vfpstate_entry_descriptor_;
  metadata.reflection = user_arm_vfpstate_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_info_arm::kClearTidAddrFieldNumber;
const int thread_info_arm::kTlsFieldNumber;
const int thread_info_arm::kGpregsFieldNumber;
const int thread_info_arm::kFpstateFieldNumber;
#endif  // !_MSC_VER

thread_info_arm::thread_info_arm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_info_arm)
}

void thread_info_arm::InitAsDefaultInstance() {
  gpregs_ = const_cast< ::user_arm_regs_entry*>(&::user_arm_regs_entry::default_instance());
  fpstate_ = const_cast< ::user_arm_vfpstate_entry*>(&::user_arm_vfpstate_entry::default_instance());
}

thread_info_arm::thread_info_arm(const thread_info_arm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_info_arm)
}

void thread_info_arm::SharedCtor() {
  _cached_size_ = 0;
  clear_tid_addr_ = GOOGLE_ULONGLONG(0);
  tls_ = 0u;
  gpregs_ = NULL;
  fpstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_info_arm::~thread_info_arm() {
  // @@protoc_insertion_point(destructor:thread_info_arm)
  SharedDtor();
}

void thread_info_arm::SharedDtor() {
  if (this != default_instance_) {
    delete gpregs_;
    delete fpstate_;
  }
}

void thread_info_arm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_info_arm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_info_arm_descriptor_;
}

const thread_info_arm& thread_info_arm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2darm_2eproto();
  return *default_instance_;
}

thread_info_arm* thread_info_arm::default_instance_ = NULL;

thread_info_arm* thread_info_arm::New() const {
  return new thread_info_arm;
}

void thread_info_arm::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    clear_tid_addr_ = GOOGLE_ULONGLONG(0);
    tls_ = 0u;
    if (has_gpregs()) {
      if (gpregs_ != NULL) gpregs_->::user_arm_regs_entry::Clear();
    }
    if (has_fpstate()) {
      if (fpstate_ != NULL) fpstate_->::user_arm_vfpstate_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_info_arm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_info_arm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clear_tid_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clear_tid_addr_)));
          set_has_clear_tid_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tls;
        break;
      }

      // required uint32 tls = 2;
      case 2: {
        if (tag == 16) {
         parse_tls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tls_)));
          set_has_tls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gpregs;
        break;
      }

      // required .user_arm_regs_entry gpregs = 3;
      case 3: {
        if (tag == 26) {
         parse_gpregs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpregs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fpstate;
        break;
      }

      // required .user_arm_vfpstate_entry fpstate = 4;
      case 4: {
        if (tag == 34) {
         parse_fpstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_info_arm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_info_arm)
  return false;
#undef DO_
}

void thread_info_arm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_info_arm)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clear_tid_addr(), output);
  }

  // required uint32 tls = 2;
  if (has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tls(), output);
  }

  // required .user_arm_regs_entry gpregs = 3;
  if (has_gpregs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gpregs(), output);
  }

  // required .user_arm_vfpstate_entry fpstate = 4;
  if (has_fpstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fpstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_info_arm)
}

::google::protobuf::uint8* thread_info_arm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_info_arm)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clear_tid_addr(), target);
  }

  // required uint32 tls = 2;
  if (has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tls(), target);
  }

  // required .user_arm_regs_entry gpregs = 3;
  if (has_gpregs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gpregs(), target);
  }

  // required .user_arm_vfpstate_entry fpstate = 4;
  if (has_fpstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fpstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_info_arm)
  return target;
}

int thread_info_arm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 clear_tid_addr = 1;
    if (has_clear_tid_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clear_tid_addr());
    }

    // required uint32 tls = 2;
    if (has_tls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tls());
    }

    // required .user_arm_regs_entry gpregs = 3;
    if (has_gpregs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpregs());
    }

    // required .user_arm_vfpstate_entry fpstate = 4;
    if (has_fpstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_info_arm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_info_arm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_info_arm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_info_arm::MergeFrom(const thread_info_arm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_tid_addr()) {
      set_clear_tid_addr(from.clear_tid_addr());
    }
    if (from.has_tls()) {
      set_tls(from.tls());
    }
    if (from.has_gpregs()) {
      mutable_gpregs()->::user_arm_regs_entry::MergeFrom(from.gpregs());
    }
    if (from.has_fpstate()) {
      mutable_fpstate()->::user_arm_vfpstate_entry::MergeFrom(from.fpstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_info_arm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_info_arm::CopyFrom(const thread_info_arm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_info_arm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_gpregs()) {
    if (!this->gpregs().IsInitialized()) return false;
  }
  if (has_fpstate()) {
    if (!this->fpstate().IsInitialized()) return false;
  }
  return true;
}

void thread_info_arm::Swap(thread_info_arm* other) {
  if (other != this) {
    std::swap(clear_tid_addr_, other->clear_tid_addr_);
    std::swap(tls_, other->tls_);
    std::swap(gpregs_, other->gpregs_);
    std::swap(fpstate_, other->fpstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_info_arm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_info_arm_descriptor_;
  metadata.reflection = thread_info_arm_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
