// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fown.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fown.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* fown_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fown_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fown_2eproto() {
  protobuf_AddDesc_fown_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fown.proto");
  GOOGLE_CHECK(file != NULL);
  fown_entry_descriptor_ = file->message_type(0);
  static const int fown_entry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, signum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, pid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, pid_),
  };
  fown_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fown_entry_descriptor_,
      fown_entry::default_instance_,
      fown_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fown_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fown_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fown_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fown_entry_descriptor_, &fown_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fown_2eproto() {
  delete fown_entry::default_instance_;
  delete fown_entry_reflection_;
}

void protobuf_AddDesc_fown_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nfown.proto\"V\n\nfown_entry\022\013\n\003uid\030\001 \002(\r\022"
    "\014\n\004euid\030\002 \002(\r\022\016\n\006signum\030\003 \002(\r\022\020\n\010pid_typ"
    "e\030\004 \002(\r\022\013\n\003pid\030\005 \002(\r", 100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fown.proto", &protobuf_RegisterTypes);
  fown_entry::default_instance_ = new fown_entry();
  fown_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fown_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fown_2eproto {
  StaticDescriptorInitializer_fown_2eproto() {
    protobuf_AddDesc_fown_2eproto();
  }
} static_descriptor_initializer_fown_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int fown_entry::kUidFieldNumber;
const int fown_entry::kEuidFieldNumber;
const int fown_entry::kSignumFieldNumber;
const int fown_entry::kPidTypeFieldNumber;
const int fown_entry::kPidFieldNumber;
#endif  // !_MSC_VER

fown_entry::fown_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fown_entry)
}

void fown_entry::InitAsDefaultInstance() {
}

fown_entry::fown_entry(const fown_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fown_entry)
}

void fown_entry::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  euid_ = 0u;
  signum_ = 0u;
  pid_type_ = 0u;
  pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fown_entry::~fown_entry() {
  // @@protoc_insertion_point(destructor:fown_entry)
  SharedDtor();
}

void fown_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fown_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fown_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fown_entry_descriptor_;
}

const fown_entry& fown_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fown_2eproto();
  return *default_instance_;
}

fown_entry* fown_entry::default_instance_ = NULL;

fown_entry* fown_entry::New() const {
  return new fown_entry;
}

void fown_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fown_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, pid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fown_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fown_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_euid;
        break;
      }

      // required uint32 euid = 2;
      case 2: {
        if (tag == 16) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_signum;
        break;
      }

      // required uint32 signum = 3;
      case 3: {
        if (tag == 24) {
         parse_signum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signum_)));
          set_has_signum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pid_type;
        break;
      }

      // required uint32 pid_type = 4;
      case 4: {
        if (tag == 32) {
         parse_pid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_type_)));
          set_has_pid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // required uint32 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fown_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fown_entry)
  return false;
#undef DO_
}

void fown_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fown_entry)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 euid = 2;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->euid(), output);
  }

  // required uint32 signum = 3;
  if (has_signum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->signum(), output);
  }

  // required uint32 pid_type = 4;
  if (has_pid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pid_type(), output);
  }

  // required uint32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fown_entry)
}

::google::protobuf::uint8* fown_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fown_entry)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 euid = 2;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->euid(), target);
  }

  // required uint32 signum = 3;
  if (has_signum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->signum(), target);
  }

  // required uint32 pid_type = 4;
  if (has_pid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pid_type(), target);
  }

  // required uint32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fown_entry)
  return target;
}

int fown_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 euid = 2;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->euid());
    }

    // required uint32 signum = 3;
    if (has_signum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signum());
    }

    // required uint32 pid_type = 4;
    if (has_pid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid_type());
    }

    // required uint32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fown_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fown_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fown_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fown_entry::MergeFrom(const fown_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_signum()) {
      set_signum(from.signum());
    }
    if (from.has_pid_type()) {
      set_pid_type(from.pid_type());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fown_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fown_entry::CopyFrom(const fown_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fown_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void fown_entry::Swap(fown_entry* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(euid_, other->euid_);
    std::swap(signum_, other->signum_);
    std::swap(pid_type_, other->pid_type_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fown_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fown_entry_descriptor_;
  metadata.reflection = fown_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
