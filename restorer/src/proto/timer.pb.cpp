// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "timer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* itimer_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itimer_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* posix_timer_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  posix_timer_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_timers_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_timers_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_timer_2eproto() {
  protobuf_AddDesc_timer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "timer.proto");
  GOOGLE_CHECK(file != NULL);
  itimer_entry_descriptor_ = file->message_type(0);
  static const int itimer_entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, isec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, iusec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, vsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, vusec_),
  };
  itimer_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itimer_entry_descriptor_,
      itimer_entry::default_instance_,
      itimer_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itimer_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itimer_entry));
  posix_timer_entry_descriptor_ = file->message_type(1);
  static const int posix_timer_entry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, it_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, clock_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, si_signo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, it_sigev_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, sival_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, overrun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, isec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, insec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, vsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, vnsec_),
  };
  posix_timer_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      posix_timer_entry_descriptor_,
      posix_timer_entry::default_instance_,
      posix_timer_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(posix_timer_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(posix_timer_entry));
  task_timers_entry_descriptor_ = file->message_type(2);
  static const int task_timers_entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, virt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, posix_),
  };
  task_timers_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_timers_entry_descriptor_,
      task_timers_entry::default_instance_,
      task_timers_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_timers_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_timers_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_timer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itimer_entry_descriptor_, &itimer_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    posix_timer_entry_descriptor_, &posix_timer_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_timers_entry_descriptor_, &task_timers_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_timer_2eproto() {
  delete itimer_entry::default_instance_;
  delete itimer_entry_reflection_;
  delete posix_timer_entry::default_instance_;
  delete posix_timer_entry_reflection_;
  delete task_timers_entry::default_instance_;
  delete task_timers_entry_reflection_;
}

void protobuf_AddDesc_timer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013timer.proto\"H\n\014itimer_entry\022\014\n\004isec\030\001 "
    "\002(\004\022\r\n\005iusec\030\002 \002(\004\022\014\n\004vsec\030\003 \002(\004\022\r\n\005vuse"
    "c\030\004 \002(\004\"\275\001\n\021posix_timer_entry\022\r\n\005it_id\030\001"
    " \002(\r\022\020\n\010clock_id\030\002 \002(\r\022\020\n\010si_signo\030\003 \002(\r"
    "\022\027\n\017it_sigev_notify\030\004 \002(\r\022\021\n\tsival_ptr\030\005"
    " \002(\004\022\017\n\007overrun\030\006 \002(\r\022\014\n\004isec\030\007 \002(\004\022\r\n\005i"
    "nsec\030\010 \002(\004\022\014\n\004vsec\030\t \002(\004\022\r\n\005vnsec\030\n \002(\004\""
    "\215\001\n\021task_timers_entry\022\033\n\004real\030\001 \002(\0132\r.it"
    "imer_entry\022\033\n\004virt\030\002 \002(\0132\r.itimer_entry\022"
    "\033\n\004prof\030\003 \002(\0132\r.itimer_entry\022!\n\005posix\030\004 "
    "\003(\0132\022.posix_timer_entry", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "timer.proto", &protobuf_RegisterTypes);
  itimer_entry::default_instance_ = new itimer_entry();
  posix_timer_entry::default_instance_ = new posix_timer_entry();
  task_timers_entry::default_instance_ = new task_timers_entry();
  itimer_entry::default_instance_->InitAsDefaultInstance();
  posix_timer_entry::default_instance_->InitAsDefaultInstance();
  task_timers_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_timer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_timer_2eproto {
  StaticDescriptorInitializer_timer_2eproto() {
    protobuf_AddDesc_timer_2eproto();
  }
} static_descriptor_initializer_timer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int itimer_entry::kIsecFieldNumber;
const int itimer_entry::kIusecFieldNumber;
const int itimer_entry::kVsecFieldNumber;
const int itimer_entry::kVusecFieldNumber;
#endif  // !_MSC_VER

itimer_entry::itimer_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:itimer_entry)
}

void itimer_entry::InitAsDefaultInstance() {
}

itimer_entry::itimer_entry(const itimer_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:itimer_entry)
}

void itimer_entry::SharedCtor() {
  _cached_size_ = 0;
  isec_ = GOOGLE_ULONGLONG(0);
  iusec_ = GOOGLE_ULONGLONG(0);
  vsec_ = GOOGLE_ULONGLONG(0);
  vusec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itimer_entry::~itimer_entry() {
  // @@protoc_insertion_point(destructor:itimer_entry)
  SharedDtor();
}

void itimer_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void itimer_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itimer_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itimer_entry_descriptor_;
}

const itimer_entry& itimer_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_2eproto();
  return *default_instance_;
}

itimer_entry* itimer_entry::default_instance_ = NULL;

itimer_entry* itimer_entry::New() const {
  return new itimer_entry;
}

void itimer_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<itimer_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(isec_, vusec_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itimer_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:itimer_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 isec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &isec_)));
          set_has_isec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iusec;
        break;
      }

      // required uint64 iusec = 2;
      case 2: {
        if (tag == 16) {
         parse_iusec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iusec_)));
          set_has_iusec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vsec;
        break;
      }

      // required uint64 vsec = 3;
      case 3: {
        if (tag == 24) {
         parse_vsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vsec_)));
          set_has_vsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vusec;
        break;
      }

      // required uint64 vusec = 4;
      case 4: {
        if (tag == 32) {
         parse_vusec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vusec_)));
          set_has_vusec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:itimer_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:itimer_entry)
  return false;
#undef DO_
}

void itimer_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:itimer_entry)
  // required uint64 isec = 1;
  if (has_isec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->isec(), output);
  }

  // required uint64 iusec = 2;
  if (has_iusec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->iusec(), output);
  }

  // required uint64 vsec = 3;
  if (has_vsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->vsec(), output);
  }

  // required uint64 vusec = 4;
  if (has_vusec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->vusec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:itimer_entry)
}

::google::protobuf::uint8* itimer_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:itimer_entry)
  // required uint64 isec = 1;
  if (has_isec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->isec(), target);
  }

  // required uint64 iusec = 2;
  if (has_iusec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->iusec(), target);
  }

  // required uint64 vsec = 3;
  if (has_vsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->vsec(), target);
  }

  // required uint64 vusec = 4;
  if (has_vusec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->vusec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itimer_entry)
  return target;
}

int itimer_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 isec = 1;
    if (has_isec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->isec());
    }

    // required uint64 iusec = 2;
    if (has_iusec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iusec());
    }

    // required uint64 vsec = 3;
    if (has_vsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vsec());
    }

    // required uint64 vusec = 4;
    if (has_vusec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vusec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itimer_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itimer_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itimer_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itimer_entry::MergeFrom(const itimer_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isec()) {
      set_isec(from.isec());
    }
    if (from.has_iusec()) {
      set_iusec(from.iusec());
    }
    if (from.has_vsec()) {
      set_vsec(from.vsec());
    }
    if (from.has_vusec()) {
      set_vusec(from.vusec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itimer_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itimer_entry::CopyFrom(const itimer_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itimer_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void itimer_entry::Swap(itimer_entry* other) {
  if (other != this) {
    std::swap(isec_, other->isec_);
    std::swap(iusec_, other->iusec_);
    std::swap(vsec_, other->vsec_);
    std::swap(vusec_, other->vusec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itimer_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itimer_entry_descriptor_;
  metadata.reflection = itimer_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int posix_timer_entry::kItIdFieldNumber;
const int posix_timer_entry::kClockIdFieldNumber;
const int posix_timer_entry::kSiSignoFieldNumber;
const int posix_timer_entry::kItSigevNotifyFieldNumber;
const int posix_timer_entry::kSivalPtrFieldNumber;
const int posix_timer_entry::kOverrunFieldNumber;
const int posix_timer_entry::kIsecFieldNumber;
const int posix_timer_entry::kInsecFieldNumber;
const int posix_timer_entry::kVsecFieldNumber;
const int posix_timer_entry::kVnsecFieldNumber;
#endif  // !_MSC_VER

posix_timer_entry::posix_timer_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:posix_timer_entry)
}

void posix_timer_entry::InitAsDefaultInstance() {
}

posix_timer_entry::posix_timer_entry(const posix_timer_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:posix_timer_entry)
}

void posix_timer_entry::SharedCtor() {
  _cached_size_ = 0;
  it_id_ = 0u;
  clock_id_ = 0u;
  si_signo_ = 0u;
  it_sigev_notify_ = 0u;
  sival_ptr_ = GOOGLE_ULONGLONG(0);
  overrun_ = 0u;
  isec_ = GOOGLE_ULONGLONG(0);
  insec_ = GOOGLE_ULONGLONG(0);
  vsec_ = GOOGLE_ULONGLONG(0);
  vnsec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

posix_timer_entry::~posix_timer_entry() {
  // @@protoc_insertion_point(destructor:posix_timer_entry)
  SharedDtor();
}

void posix_timer_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void posix_timer_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* posix_timer_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return posix_timer_entry_descriptor_;
}

const posix_timer_entry& posix_timer_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_2eproto();
  return *default_instance_;
}

posix_timer_entry* posix_timer_entry::default_instance_ = NULL;

posix_timer_entry* posix_timer_entry::New() const {
  return new posix_timer_entry;
}

void posix_timer_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<posix_timer_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(it_id_, insec_);
    overrun_ = 0u;
  }
  ZR_(vsec_, vnsec_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool posix_timer_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:posix_timer_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 it_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &it_id_)));
          set_has_it_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clock_id;
        break;
      }

      // required uint32 clock_id = 2;
      case 2: {
        if (tag == 16) {
         parse_clock_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clock_id_)));
          set_has_clock_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_si_signo;
        break;
      }

      // required uint32 si_signo = 3;
      case 3: {
        if (tag == 24) {
         parse_si_signo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &si_signo_)));
          set_has_si_signo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_it_sigev_notify;
        break;
      }

      // required uint32 it_sigev_notify = 4;
      case 4: {
        if (tag == 32) {
         parse_it_sigev_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &it_sigev_notify_)));
          set_has_it_sigev_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sival_ptr;
        break;
      }

      // required uint64 sival_ptr = 5;
      case 5: {
        if (tag == 40) {
         parse_sival_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sival_ptr_)));
          set_has_sival_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_overrun;
        break;
      }

      // required uint32 overrun = 6;
      case 6: {
        if (tag == 48) {
         parse_overrun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overrun_)));
          set_has_overrun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isec;
        break;
      }

      // required uint64 isec = 7;
      case 7: {
        if (tag == 56) {
         parse_isec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &isec_)));
          set_has_isec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_insec;
        break;
      }

      // required uint64 insec = 8;
      case 8: {
        if (tag == 64) {
         parse_insec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &insec_)));
          set_has_insec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vsec;
        break;
      }

      // required uint64 vsec = 9;
      case 9: {
        if (tag == 72) {
         parse_vsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vsec_)));
          set_has_vsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vnsec;
        break;
      }

      // required uint64 vnsec = 10;
      case 10: {
        if (tag == 80) {
         parse_vnsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vnsec_)));
          set_has_vnsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:posix_timer_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:posix_timer_entry)
  return false;
#undef DO_
}

void posix_timer_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:posix_timer_entry)
  // required uint32 it_id = 1;
  if (has_it_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->it_id(), output);
  }

  // required uint32 clock_id = 2;
  if (has_clock_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clock_id(), output);
  }

  // required uint32 si_signo = 3;
  if (has_si_signo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->si_signo(), output);
  }

  // required uint32 it_sigev_notify = 4;
  if (has_it_sigev_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->it_sigev_notify(), output);
  }

  // required uint64 sival_ptr = 5;
  if (has_sival_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sival_ptr(), output);
  }

  // required uint32 overrun = 6;
  if (has_overrun()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->overrun(), output);
  }

  // required uint64 isec = 7;
  if (has_isec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->isec(), output);
  }

  // required uint64 insec = 8;
  if (has_insec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->insec(), output);
  }

  // required uint64 vsec = 9;
  if (has_vsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->vsec(), output);
  }

  // required uint64 vnsec = 10;
  if (has_vnsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->vnsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:posix_timer_entry)
}

::google::protobuf::uint8* posix_timer_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:posix_timer_entry)
  // required uint32 it_id = 1;
  if (has_it_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->it_id(), target);
  }

  // required uint32 clock_id = 2;
  if (has_clock_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clock_id(), target);
  }

  // required uint32 si_signo = 3;
  if (has_si_signo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->si_signo(), target);
  }

  // required uint32 it_sigev_notify = 4;
  if (has_it_sigev_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->it_sigev_notify(), target);
  }

  // required uint64 sival_ptr = 5;
  if (has_sival_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sival_ptr(), target);
  }

  // required uint32 overrun = 6;
  if (has_overrun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->overrun(), target);
  }

  // required uint64 isec = 7;
  if (has_isec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->isec(), target);
  }

  // required uint64 insec = 8;
  if (has_insec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->insec(), target);
  }

  // required uint64 vsec = 9;
  if (has_vsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->vsec(), target);
  }

  // required uint64 vnsec = 10;
  if (has_vnsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->vnsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:posix_timer_entry)
  return target;
}

int posix_timer_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 it_id = 1;
    if (has_it_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->it_id());
    }

    // required uint32 clock_id = 2;
    if (has_clock_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clock_id());
    }

    // required uint32 si_signo = 3;
    if (has_si_signo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->si_signo());
    }

    // required uint32 it_sigev_notify = 4;
    if (has_it_sigev_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->it_sigev_notify());
    }

    // required uint64 sival_ptr = 5;
    if (has_sival_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sival_ptr());
    }

    // required uint32 overrun = 6;
    if (has_overrun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overrun());
    }

    // required uint64 isec = 7;
    if (has_isec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->isec());
    }

    // required uint64 insec = 8;
    if (has_insec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->insec());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 vsec = 9;
    if (has_vsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vsec());
    }

    // required uint64 vnsec = 10;
    if (has_vnsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vnsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void posix_timer_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const posix_timer_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const posix_timer_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void posix_timer_entry::MergeFrom(const posix_timer_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_it_id()) {
      set_it_id(from.it_id());
    }
    if (from.has_clock_id()) {
      set_clock_id(from.clock_id());
    }
    if (from.has_si_signo()) {
      set_si_signo(from.si_signo());
    }
    if (from.has_it_sigev_notify()) {
      set_it_sigev_notify(from.it_sigev_notify());
    }
    if (from.has_sival_ptr()) {
      set_sival_ptr(from.sival_ptr());
    }
    if (from.has_overrun()) {
      set_overrun(from.overrun());
    }
    if (from.has_isec()) {
      set_isec(from.isec());
    }
    if (from.has_insec()) {
      set_insec(from.insec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vsec()) {
      set_vsec(from.vsec());
    }
    if (from.has_vnsec()) {
      set_vnsec(from.vnsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void posix_timer_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void posix_timer_entry::CopyFrom(const posix_timer_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool posix_timer_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void posix_timer_entry::Swap(posix_timer_entry* other) {
  if (other != this) {
    std::swap(it_id_, other->it_id_);
    std::swap(clock_id_, other->clock_id_);
    std::swap(si_signo_, other->si_signo_);
    std::swap(it_sigev_notify_, other->it_sigev_notify_);
    std::swap(sival_ptr_, other->sival_ptr_);
    std::swap(overrun_, other->overrun_);
    std::swap(isec_, other->isec_);
    std::swap(insec_, other->insec_);
    std::swap(vsec_, other->vsec_);
    std::swap(vnsec_, other->vnsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata posix_timer_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = posix_timer_entry_descriptor_;
  metadata.reflection = posix_timer_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_timers_entry::kRealFieldNumber;
const int task_timers_entry::kVirtFieldNumber;
const int task_timers_entry::kProfFieldNumber;
const int task_timers_entry::kPosixFieldNumber;
#endif  // !_MSC_VER

task_timers_entry::task_timers_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_timers_entry)
}

void task_timers_entry::InitAsDefaultInstance() {
  real_ = const_cast< ::itimer_entry*>(&::itimer_entry::default_instance());
  virt_ = const_cast< ::itimer_entry*>(&::itimer_entry::default_instance());
  prof_ = const_cast< ::itimer_entry*>(&::itimer_entry::default_instance());
}

task_timers_entry::task_timers_entry(const task_timers_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_timers_entry)
}

void task_timers_entry::SharedCtor() {
  _cached_size_ = 0;
  real_ = NULL;
  virt_ = NULL;
  prof_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_timers_entry::~task_timers_entry() {
  // @@protoc_insertion_point(destructor:task_timers_entry)
  SharedDtor();
}

void task_timers_entry::SharedDtor() {
  if (this != default_instance_) {
    delete real_;
    delete virt_;
    delete prof_;
  }
}

void task_timers_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_timers_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_timers_entry_descriptor_;
}

const task_timers_entry& task_timers_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_timer_2eproto();
  return *default_instance_;
}

task_timers_entry* task_timers_entry::default_instance_ = NULL;

task_timers_entry* task_timers_entry::New() const {
  return new task_timers_entry;
}

void task_timers_entry::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_real()) {
      if (real_ != NULL) real_->::itimer_entry::Clear();
    }
    if (has_virt()) {
      if (virt_ != NULL) virt_->::itimer_entry::Clear();
    }
    if (has_prof()) {
      if (prof_ != NULL) prof_->::itimer_entry::Clear();
    }
  }
  posix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_timers_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_timers_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .itimer_entry real = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_virt;
        break;
      }

      // required .itimer_entry virt = 2;
      case 2: {
        if (tag == 18) {
         parse_virt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prof;
        break;
      }

      // required .itimer_entry prof = 3;
      case 3: {
        if (tag == 26) {
         parse_prof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_posix;
        break;
      }

      // repeated .posix_timer_entry posix = 4;
      case 4: {
        if (tag == 34) {
         parse_posix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_posix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_posix;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_timers_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_timers_entry)
  return false;
#undef DO_
}

void task_timers_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_timers_entry)
  // required .itimer_entry real = 1;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->real(), output);
  }

  // required .itimer_entry virt = 2;
  if (has_virt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->virt(), output);
  }

  // required .itimer_entry prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prof(), output);
  }

  // repeated .posix_timer_entry posix = 4;
  for (int i = 0; i < this->posix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->posix(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_timers_entry)
}

::google::protobuf::uint8* task_timers_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_timers_entry)
  // required .itimer_entry real = 1;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->real(), target);
  }

  // required .itimer_entry virt = 2;
  if (has_virt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->virt(), target);
  }

  // required .itimer_entry prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prof(), target);
  }

  // repeated .posix_timer_entry posix = 4;
  for (int i = 0; i < this->posix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->posix(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_timers_entry)
  return target;
}

int task_timers_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .itimer_entry real = 1;
    if (has_real()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real());
    }

    // required .itimer_entry virt = 2;
    if (has_virt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virt());
    }

    // required .itimer_entry prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prof());
    }

  }
  // repeated .posix_timer_entry posix = 4;
  total_size += 1 * this->posix_size();
  for (int i = 0; i < this->posix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->posix(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_timers_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_timers_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_timers_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_timers_entry::MergeFrom(const task_timers_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  posix_.MergeFrom(from.posix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real()) {
      mutable_real()->::itimer_entry::MergeFrom(from.real());
    }
    if (from.has_virt()) {
      mutable_virt()->::itimer_entry::MergeFrom(from.virt());
    }
    if (from.has_prof()) {
      mutable_prof()->::itimer_entry::MergeFrom(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_timers_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_timers_entry::CopyFrom(const task_timers_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_timers_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_real()) {
    if (!this->real().IsInitialized()) return false;
  }
  if (has_virt()) {
    if (!this->virt().IsInitialized()) return false;
  }
  if (has_prof()) {
    if (!this->prof().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->posix())) return false;
  return true;
}

void task_timers_entry::Swap(task_timers_entry* other) {
  if (other != this) {
    std::swap(real_, other->real_);
    std::swap(virt_, other->virt_);
    std::swap(prof_, other->prof_);
    posix_.Swap(&other->posix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_timers_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_timers_entry_descriptor_;
  metadata.reflection = task_timers_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
