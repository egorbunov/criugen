// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fdinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fdinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* fdinfo_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fdinfo_entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* fd_types_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fdinfo_2eproto() {
  protobuf_AddDesc_fdinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fdinfo.proto");
  GOOGLE_CHECK(file != NULL);
  fdinfo_entry_descriptor_ = file->message_type(0);
  static const int fdinfo_entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, fd_),
  };
  fdinfo_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fdinfo_entry_descriptor_,
      fdinfo_entry::default_instance_,
      fdinfo_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fdinfo_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fdinfo_entry));
  fd_types_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fdinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fdinfo_entry_descriptor_, &fdinfo_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fdinfo_2eproto() {
  delete fdinfo_entry::default_instance_;
  delete fdinfo_entry_reflection_;
}

void protobuf_AddDesc_fdinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014fdinfo.proto\"N\n\014fdinfo_entry\022\n\n\002id\030\001 \002"
    "(\r\022\r\n\005flags\030\002 \002(\r\022\027\n\004type\030\003 \002(\0162\t.fd_typ"
    "es\022\n\n\002fd\030\004 \002(\r*\333\001\n\010fd_types\022\007\n\003UND\020\000\022\007\n\003"
    "REG\020\001\022\010\n\004PIPE\020\002\022\010\n\004FIFO\020\003\022\n\n\006INETSK\020\004\022\n\n"
    "\006UNIXSK\020\005\022\013\n\007EVENTFD\020\006\022\r\n\tEVENTPOLL\020\007\022\013\n"
    "\007INOTIFY\020\010\022\014\n\010SIGNALFD\020\t\022\014\n\010PACKETSK\020\n\022\007"
    "\n\003TTY\020\013\022\014\n\010FANOTIFY\020\014\022\r\n\tNETLINKSK\020\r\022\006\n\002"
    "NS\020\016\022\010\n\004TUNF\020\017\022\007\n\003EXT\020\020\022\013\n\007TIMERFD\020\021", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fdinfo.proto", &protobuf_RegisterTypes);
  fdinfo_entry::default_instance_ = new fdinfo_entry();
  fdinfo_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fdinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fdinfo_2eproto {
  StaticDescriptorInitializer_fdinfo_2eproto() {
    protobuf_AddDesc_fdinfo_2eproto();
  }
} static_descriptor_initializer_fdinfo_2eproto_;
const ::google::protobuf::EnumDescriptor* fd_types_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fd_types_descriptor_;
}
bool fd_types_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int fdinfo_entry::kIdFieldNumber;
const int fdinfo_entry::kFlagsFieldNumber;
const int fdinfo_entry::kTypeFieldNumber;
const int fdinfo_entry::kFdFieldNumber;
#endif  // !_MSC_VER

fdinfo_entry::fdinfo_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fdinfo_entry)
}

void fdinfo_entry::InitAsDefaultInstance() {
}

fdinfo_entry::fdinfo_entry(const fdinfo_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fdinfo_entry)
}

void fdinfo_entry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  flags_ = 0u;
  type_ = 0;
  fd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fdinfo_entry::~fdinfo_entry() {
  // @@protoc_insertion_point(destructor:fdinfo_entry)
  SharedDtor();
}

void fdinfo_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fdinfo_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fdinfo_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fdinfo_entry_descriptor_;
}

const fdinfo_entry& fdinfo_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fdinfo_2eproto();
  return *default_instance_;
}

fdinfo_entry* fdinfo_entry::default_instance_ = NULL;

fdinfo_entry* fdinfo_entry::New() const {
  return new fdinfo_entry;
}

void fdinfo_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fdinfo_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, fd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fdinfo_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fdinfo_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .fd_types type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fd_types_IsValid(value)) {
            set_type(static_cast< ::fd_types >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }

      // required uint32 fd = 4;
      case 4: {
        if (tag == 32) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fdinfo_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fdinfo_entry)
  return false;
#undef DO_
}

void fdinfo_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fdinfo_entry)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // required .fd_types type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 fd = 4;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fdinfo_entry)
}

::google::protobuf::uint8* fdinfo_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fdinfo_entry)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // required .fd_types type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 fd = 4;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fdinfo_entry)
  return target;
}

int fdinfo_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required .fd_types type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fdinfo_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fdinfo_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fdinfo_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fdinfo_entry::MergeFrom(const fdinfo_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fdinfo_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fdinfo_entry::CopyFrom(const fdinfo_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fdinfo_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void fdinfo_entry::Swap(fdinfo_entry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(type_, other->type_);
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fdinfo_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fdinfo_entry_descriptor_;
  metadata.reflection = fdinfo_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
