// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pstree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pstree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pstree_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pstree_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pstree_2eproto() {
  protobuf_AddDesc_pstree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pstree.proto");
  GOOGLE_CHECK(file != NULL);
  pstree_entry_descriptor_ = file->message_type(0);
  static const int pstree_entry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, ppid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, pgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, threads_),
  };
  pstree_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pstree_entry_descriptor_,
      pstree_entry::default_instance_,
      pstree_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pstree_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pstree_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pstree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pstree_entry_descriptor_, &pstree_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pstree_2eproto() {
  delete pstree_entry::default_instance_;
  delete pstree_entry_reflection_;
}

void protobuf_AddDesc_pstree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pstree.proto\"U\n\014pstree_entry\022\013\n\003pid\030\001 "
    "\002(\r\022\014\n\004ppid\030\002 \002(\r\022\014\n\004pgid\030\003 \002(\r\022\013\n\003sid\030\004"
    " \002(\r\022\017\n\007threads\030\005 \003(\r", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pstree.proto", &protobuf_RegisterTypes);
  pstree_entry::default_instance_ = new pstree_entry();
  pstree_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pstree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pstree_2eproto {
  StaticDescriptorInitializer_pstree_2eproto() {
    protobuf_AddDesc_pstree_2eproto();
  }
} static_descriptor_initializer_pstree_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pstree_entry::kPidFieldNumber;
const int pstree_entry::kPpidFieldNumber;
const int pstree_entry::kPgidFieldNumber;
const int pstree_entry::kSidFieldNumber;
const int pstree_entry::kThreadsFieldNumber;
#endif  // !_MSC_VER

pstree_entry::pstree_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pstree_entry)
}

void pstree_entry::InitAsDefaultInstance() {
}

pstree_entry::pstree_entry(const pstree_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pstree_entry)
}

void pstree_entry::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  ppid_ = 0u;
  pgid_ = 0u;
  sid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pstree_entry::~pstree_entry() {
  // @@protoc_insertion_point(destructor:pstree_entry)
  SharedDtor();
}

void pstree_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pstree_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pstree_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pstree_entry_descriptor_;
}

const pstree_entry& pstree_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pstree_2eproto();
  return *default_instance_;
}

pstree_entry* pstree_entry::default_instance_ = NULL;

pstree_entry* pstree_entry::New() const {
  return new pstree_entry;
}

void pstree_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pstree_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, sid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  threads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pstree_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pstree_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ppid;
        break;
      }

      // required uint32 ppid = 2;
      case 2: {
        if (tag == 16) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pgid;
        break;
      }

      // required uint32 pgid = 3;
      case 3: {
        if (tag == 24) {
         parse_pgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pgid_)));
          set_has_pgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // required uint32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_threads;
        break;
      }

      // repeated uint32 threads = 5;
      case 5: {
        if (tag == 40) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_threads())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_threads())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_threads;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pstree_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pstree_entry)
  return false;
#undef DO_
}

void pstree_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pstree_entry)
  // required uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // required uint32 ppid = 2;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ppid(), output);
  }

  // required uint32 pgid = 3;
  if (has_pgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pgid(), output);
  }

  // required uint32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sid(), output);
  }

  // repeated uint32 threads = 5;
  for (int i = 0; i < this->threads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->threads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pstree_entry)
}

::google::protobuf::uint8* pstree_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pstree_entry)
  // required uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // required uint32 ppid = 2;
  if (has_ppid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ppid(), target);
  }

  // required uint32 pgid = 3;
  if (has_pgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pgid(), target);
  }

  // required uint32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sid(), target);
  }

  // repeated uint32 threads = 5;
  for (int i = 0; i < this->threads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->threads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pstree_entry)
  return target;
}

int pstree_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // required uint32 ppid = 2;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ppid());
    }

    // required uint32 pgid = 3;
    if (has_pgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pgid());
    }

    // required uint32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

  }
  // repeated uint32 threads = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->threads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->threads(i));
    }
    total_size += 1 * this->threads_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pstree_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pstree_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pstree_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pstree_entry::MergeFrom(const pstree_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  threads_.MergeFrom(from.threads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
    if (from.has_pgid()) {
      set_pgid(from.pgid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pstree_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pstree_entry::CopyFrom(const pstree_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pstree_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pstree_entry::Swap(pstree_entry* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(ppid_, other->ppid_);
    std::swap(pgid_, other->pgid_);
    std::swap(sid_, other->sid_);
    threads_.Swap(&other->threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pstree_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pstree_entry_descriptor_;
  metadata.reflection = pstree_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
