// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core-ppc64.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "core-ppc64.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* user_ppc64_regs_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_ppc64_regs_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_ppc64_fpstate_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_ppc64_fpstate_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_ppc64_vrstate_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_ppc64_vrstate_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_ppc64_vsxstate_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_ppc64_vsxstate_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* thread_info_ppc64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thread_info_ppc64_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_core_2dppc64_2eproto() {
  protobuf_AddDesc_core_2dppc64_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "core-ppc64.proto");
  GOOGLE_CHECK(file != NULL);
  user_ppc64_regs_entry_descriptor_ = file->message_type(0);
  static const int user_ppc64_regs_entry_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, gpr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, nip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, msr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, orig_gpr3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, ctr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, xer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, ccr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, trap_),
  };
  user_ppc64_regs_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_ppc64_regs_entry_descriptor_,
      user_ppc64_regs_entry::default_instance_,
      user_ppc64_regs_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_regs_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_ppc64_regs_entry));
  user_ppc64_fpstate_entry_descriptor_ = file->message_type(1);
  static const int user_ppc64_fpstate_entry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_fpstate_entry, fpregs_),
  };
  user_ppc64_fpstate_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_ppc64_fpstate_entry_descriptor_,
      user_ppc64_fpstate_entry::default_instance_,
      user_ppc64_fpstate_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_fpstate_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_fpstate_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_ppc64_fpstate_entry));
  user_ppc64_vrstate_entry_descriptor_ = file->message_type(2);
  static const int user_ppc64_vrstate_entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vrstate_entry, vrregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vrstate_entry, vrsave_),
  };
  user_ppc64_vrstate_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_ppc64_vrstate_entry_descriptor_,
      user_ppc64_vrstate_entry::default_instance_,
      user_ppc64_vrstate_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vrstate_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vrstate_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_ppc64_vrstate_entry));
  user_ppc64_vsxstate_entry_descriptor_ = file->message_type(3);
  static const int user_ppc64_vsxstate_entry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vsxstate_entry, vsxregs_),
  };
  user_ppc64_vsxstate_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_ppc64_vsxstate_entry_descriptor_,
      user_ppc64_vsxstate_entry::default_instance_,
      user_ppc64_vsxstate_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vsxstate_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_ppc64_vsxstate_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_ppc64_vsxstate_entry));
  thread_info_ppc64_descriptor_ = file->message_type(4);
  static const int thread_info_ppc64_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, clear_tid_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, gpregs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, fpstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, vrstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, vsxstate_),
  };
  thread_info_ppc64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thread_info_ppc64_descriptor_,
      thread_info_ppc64::default_instance_,
      thread_info_ppc64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thread_info_ppc64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thread_info_ppc64));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_core_2dppc64_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_ppc64_regs_entry_descriptor_, &user_ppc64_regs_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_ppc64_fpstate_entry_descriptor_, &user_ppc64_fpstate_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_ppc64_vrstate_entry_descriptor_, &user_ppc64_vrstate_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_ppc64_vsxstate_entry_descriptor_, &user_ppc64_vsxstate_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thread_info_ppc64_descriptor_, &thread_info_ppc64::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_core_2dppc64_2eproto() {
  delete user_ppc64_regs_entry::default_instance_;
  delete user_ppc64_regs_entry_reflection_;
  delete user_ppc64_fpstate_entry::default_instance_;
  delete user_ppc64_fpstate_entry_reflection_;
  delete user_ppc64_vrstate_entry::default_instance_;
  delete user_ppc64_vrstate_entry_reflection_;
  delete user_ppc64_vsxstate_entry::default_instance_;
  delete user_ppc64_vsxstate_entry_reflection_;
  delete thread_info_ppc64::default_instance_;
  delete thread_info_ppc64_reflection_;
}

void protobuf_AddDesc_core_2dppc64_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020core-ppc64.proto\"\224\001\n\025user_ppc64_regs_e"
    "ntry\022\013\n\003gpr\030\001 \003(\004\022\013\n\003nip\030\002 \002(\004\022\013\n\003msr\030\003 "
    "\002(\004\022\021\n\torig_gpr3\030\004 \002(\004\022\013\n\003ctr\030\005 \002(\004\022\014\n\004l"
    "ink\030\006 \002(\004\022\013\n\003xer\030\007 \002(\004\022\013\n\003ccr\030\010 \002(\004\022\014\n\004t"
    "rap\030\t \002(\004\"*\n\030user_ppc64_fpstate_entry\022\016\n"
    "\006fpregs\030\001 \003(\004\":\n\030user_ppc64_vrstate_entr"
    "y\022\016\n\006vrregs\030\001 \003(\004\022\016\n\006vrsave\030\002 \002(\r\",\n\031use"
    "r_ppc64_vsxstate_entry\022\017\n\007vsxregs\030\001 \003(\004\""
    "\331\001\n\021thread_info_ppc64\022\026\n\016clear_tid_addr\030"
    "\001 \002(\004\022&\n\006gpregs\030\002 \002(\0132\026.user_ppc64_regs_"
    "entry\022*\n\007fpstate\030\003 \001(\0132\031.user_ppc64_fpst"
    "ate_entry\022*\n\007vrstate\030\004 \001(\0132\031.user_ppc64_"
    "vrstate_entry\022,\n\010vsxstate\030\005 \001(\0132\032.user_p"
    "pc64_vsxstate_entry", 539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core-ppc64.proto", &protobuf_RegisterTypes);
  user_ppc64_regs_entry::default_instance_ = new user_ppc64_regs_entry();
  user_ppc64_fpstate_entry::default_instance_ = new user_ppc64_fpstate_entry();
  user_ppc64_vrstate_entry::default_instance_ = new user_ppc64_vrstate_entry();
  user_ppc64_vsxstate_entry::default_instance_ = new user_ppc64_vsxstate_entry();
  thread_info_ppc64::default_instance_ = new thread_info_ppc64();
  user_ppc64_regs_entry::default_instance_->InitAsDefaultInstance();
  user_ppc64_fpstate_entry::default_instance_->InitAsDefaultInstance();
  user_ppc64_vrstate_entry::default_instance_->InitAsDefaultInstance();
  user_ppc64_vsxstate_entry::default_instance_->InitAsDefaultInstance();
  thread_info_ppc64::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_core_2dppc64_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_core_2dppc64_2eproto {
  StaticDescriptorInitializer_core_2dppc64_2eproto() {
    protobuf_AddDesc_core_2dppc64_2eproto();
  }
} static_descriptor_initializer_core_2dppc64_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int user_ppc64_regs_entry::kGprFieldNumber;
const int user_ppc64_regs_entry::kNipFieldNumber;
const int user_ppc64_regs_entry::kMsrFieldNumber;
const int user_ppc64_regs_entry::kOrigGpr3FieldNumber;
const int user_ppc64_regs_entry::kCtrFieldNumber;
const int user_ppc64_regs_entry::kLinkFieldNumber;
const int user_ppc64_regs_entry::kXerFieldNumber;
const int user_ppc64_regs_entry::kCcrFieldNumber;
const int user_ppc64_regs_entry::kTrapFieldNumber;
#endif  // !_MSC_VER

user_ppc64_regs_entry::user_ppc64_regs_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_ppc64_regs_entry)
}

void user_ppc64_regs_entry::InitAsDefaultInstance() {
}

user_ppc64_regs_entry::user_ppc64_regs_entry(const user_ppc64_regs_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_ppc64_regs_entry)
}

void user_ppc64_regs_entry::SharedCtor() {
  _cached_size_ = 0;
  nip_ = GOOGLE_ULONGLONG(0);
  msr_ = GOOGLE_ULONGLONG(0);
  orig_gpr3_ = GOOGLE_ULONGLONG(0);
  ctr_ = GOOGLE_ULONGLONG(0);
  link_ = GOOGLE_ULONGLONG(0);
  xer_ = GOOGLE_ULONGLONG(0);
  ccr_ = GOOGLE_ULONGLONG(0);
  trap_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_ppc64_regs_entry::~user_ppc64_regs_entry() {
  // @@protoc_insertion_point(destructor:user_ppc64_regs_entry)
  SharedDtor();
}

void user_ppc64_regs_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_ppc64_regs_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_ppc64_regs_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_ppc64_regs_entry_descriptor_;
}

const user_ppc64_regs_entry& user_ppc64_regs_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dppc64_2eproto();
  return *default_instance_;
}

user_ppc64_regs_entry* user_ppc64_regs_entry::default_instance_ = NULL;

user_ppc64_regs_entry* user_ppc64_regs_entry::New() const {
  return new user_ppc64_regs_entry;
}

void user_ppc64_regs_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_ppc64_regs_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(nip_, ccr_);
  }
  trap_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  gpr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_ppc64_regs_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_ppc64_regs_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 gpr = 1;
      case 1: {
        if (tag == 8) {
         parse_gpr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_gpr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_gpr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_gpr;
        if (input->ExpectTag(16)) goto parse_nip;
        break;
      }

      // required uint64 nip = 2;
      case 2: {
        if (tag == 16) {
         parse_nip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nip_)));
          set_has_nip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msr;
        break;
      }

      // required uint64 msr = 3;
      case 3: {
        if (tag == 24) {
         parse_msr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msr_)));
          set_has_msr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orig_gpr3;
        break;
      }

      // required uint64 orig_gpr3 = 4;
      case 4: {
        if (tag == 32) {
         parse_orig_gpr3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orig_gpr3_)));
          set_has_orig_gpr3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ctr;
        break;
      }

      // required uint64 ctr = 5;
      case 5: {
        if (tag == 40) {
         parse_ctr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctr_)));
          set_has_ctr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_link;
        break;
      }

      // required uint64 link = 6;
      case 6: {
        if (tag == 48) {
         parse_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_)));
          set_has_link();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_xer;
        break;
      }

      // required uint64 xer = 7;
      case 7: {
        if (tag == 56) {
         parse_xer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xer_)));
          set_has_xer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ccr;
        break;
      }

      // required uint64 ccr = 8;
      case 8: {
        if (tag == 64) {
         parse_ccr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ccr_)));
          set_has_ccr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_trap;
        break;
      }

      // required uint64 trap = 9;
      case 9: {
        if (tag == 72) {
         parse_trap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trap_)));
          set_has_trap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_ppc64_regs_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_ppc64_regs_entry)
  return false;
#undef DO_
}

void user_ppc64_regs_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_ppc64_regs_entry)
  // repeated uint64 gpr = 1;
  for (int i = 0; i < this->gpr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->gpr(i), output);
  }

  // required uint64 nip = 2;
  if (has_nip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nip(), output);
  }

  // required uint64 msr = 3;
  if (has_msr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msr(), output);
  }

  // required uint64 orig_gpr3 = 4;
  if (has_orig_gpr3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->orig_gpr3(), output);
  }

  // required uint64 ctr = 5;
  if (has_ctr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ctr(), output);
  }

  // required uint64 link = 6;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->link(), output);
  }

  // required uint64 xer = 7;
  if (has_xer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->xer(), output);
  }

  // required uint64 ccr = 8;
  if (has_ccr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ccr(), output);
  }

  // required uint64 trap = 9;
  if (has_trap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->trap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_ppc64_regs_entry)
}

::google::protobuf::uint8* user_ppc64_regs_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_ppc64_regs_entry)
  // repeated uint64 gpr = 1;
  for (int i = 0; i < this->gpr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->gpr(i), target);
  }

  // required uint64 nip = 2;
  if (has_nip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nip(), target);
  }

  // required uint64 msr = 3;
  if (has_msr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msr(), target);
  }

  // required uint64 orig_gpr3 = 4;
  if (has_orig_gpr3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->orig_gpr3(), target);
  }

  // required uint64 ctr = 5;
  if (has_ctr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ctr(), target);
  }

  // required uint64 link = 6;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->link(), target);
  }

  // required uint64 xer = 7;
  if (has_xer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->xer(), target);
  }

  // required uint64 ccr = 8;
  if (has_ccr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ccr(), target);
  }

  // required uint64 trap = 9;
  if (has_trap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->trap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_ppc64_regs_entry)
  return target;
}

int user_ppc64_regs_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 nip = 2;
    if (has_nip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nip());
    }

    // required uint64 msr = 3;
    if (has_msr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msr());
    }

    // required uint64 orig_gpr3 = 4;
    if (has_orig_gpr3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orig_gpr3());
    }

    // required uint64 ctr = 5;
    if (has_ctr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctr());
    }

    // required uint64 link = 6;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link());
    }

    // required uint64 xer = 7;
    if (has_xer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->xer());
    }

    // required uint64 ccr = 8;
    if (has_ccr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ccr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 trap = 9;
    if (has_trap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trap());
    }

  }
  // repeated uint64 gpr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gpr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->gpr(i));
    }
    total_size += 1 * this->gpr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_ppc64_regs_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_ppc64_regs_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_ppc64_regs_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_ppc64_regs_entry::MergeFrom(const user_ppc64_regs_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpr_.MergeFrom(from.gpr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nip()) {
      set_nip(from.nip());
    }
    if (from.has_msr()) {
      set_msr(from.msr());
    }
    if (from.has_orig_gpr3()) {
      set_orig_gpr3(from.orig_gpr3());
    }
    if (from.has_ctr()) {
      set_ctr(from.ctr());
    }
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_xer()) {
      set_xer(from.xer());
    }
    if (from.has_ccr()) {
      set_ccr(from.ccr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trap()) {
      set_trap(from.trap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_ppc64_regs_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_ppc64_regs_entry::CopyFrom(const user_ppc64_regs_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_ppc64_regs_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fe) != 0x000001fe) return false;

  return true;
}

void user_ppc64_regs_entry::Swap(user_ppc64_regs_entry* other) {
  if (other != this) {
    gpr_.Swap(&other->gpr_);
    std::swap(nip_, other->nip_);
    std::swap(msr_, other->msr_);
    std::swap(orig_gpr3_, other->orig_gpr3_);
    std::swap(ctr_, other->ctr_);
    std::swap(link_, other->link_);
    std::swap(xer_, other->xer_);
    std::swap(ccr_, other->ccr_);
    std::swap(trap_, other->trap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_ppc64_regs_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_ppc64_regs_entry_descriptor_;
  metadata.reflection = user_ppc64_regs_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_ppc64_fpstate_entry::kFpregsFieldNumber;
#endif  // !_MSC_VER

user_ppc64_fpstate_entry::user_ppc64_fpstate_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_ppc64_fpstate_entry)
}

void user_ppc64_fpstate_entry::InitAsDefaultInstance() {
}

user_ppc64_fpstate_entry::user_ppc64_fpstate_entry(const user_ppc64_fpstate_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_ppc64_fpstate_entry)
}

void user_ppc64_fpstate_entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_ppc64_fpstate_entry::~user_ppc64_fpstate_entry() {
  // @@protoc_insertion_point(destructor:user_ppc64_fpstate_entry)
  SharedDtor();
}

void user_ppc64_fpstate_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_ppc64_fpstate_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_ppc64_fpstate_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_ppc64_fpstate_entry_descriptor_;
}

const user_ppc64_fpstate_entry& user_ppc64_fpstate_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dppc64_2eproto();
  return *default_instance_;
}

user_ppc64_fpstate_entry* user_ppc64_fpstate_entry::default_instance_ = NULL;

user_ppc64_fpstate_entry* user_ppc64_fpstate_entry::New() const {
  return new user_ppc64_fpstate_entry;
}

void user_ppc64_fpstate_entry::Clear() {
  fpregs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_ppc64_fpstate_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_ppc64_fpstate_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 fpregs = 1;
      case 1: {
        if (tag == 8) {
         parse_fpregs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_fpregs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fpregs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_fpregs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_ppc64_fpstate_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_ppc64_fpstate_entry)
  return false;
#undef DO_
}

void user_ppc64_fpstate_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_ppc64_fpstate_entry)
  // repeated uint64 fpregs = 1;
  for (int i = 0; i < this->fpregs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->fpregs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_ppc64_fpstate_entry)
}

::google::protobuf::uint8* user_ppc64_fpstate_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_ppc64_fpstate_entry)
  // repeated uint64 fpregs = 1;
  for (int i = 0; i < this->fpregs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->fpregs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_ppc64_fpstate_entry)
  return target;
}

int user_ppc64_fpstate_entry::ByteSize() const {
  int total_size = 0;

  // repeated uint64 fpregs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fpregs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fpregs(i));
    }
    total_size += 1 * this->fpregs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_ppc64_fpstate_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_ppc64_fpstate_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_ppc64_fpstate_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_ppc64_fpstate_entry::MergeFrom(const user_ppc64_fpstate_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  fpregs_.MergeFrom(from.fpregs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_ppc64_fpstate_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_ppc64_fpstate_entry::CopyFrom(const user_ppc64_fpstate_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_ppc64_fpstate_entry::IsInitialized() const {

  return true;
}

void user_ppc64_fpstate_entry::Swap(user_ppc64_fpstate_entry* other) {
  if (other != this) {
    fpregs_.Swap(&other->fpregs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_ppc64_fpstate_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_ppc64_fpstate_entry_descriptor_;
  metadata.reflection = user_ppc64_fpstate_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_ppc64_vrstate_entry::kVrregsFieldNumber;
const int user_ppc64_vrstate_entry::kVrsaveFieldNumber;
#endif  // !_MSC_VER

user_ppc64_vrstate_entry::user_ppc64_vrstate_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_ppc64_vrstate_entry)
}

void user_ppc64_vrstate_entry::InitAsDefaultInstance() {
}

user_ppc64_vrstate_entry::user_ppc64_vrstate_entry(const user_ppc64_vrstate_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_ppc64_vrstate_entry)
}

void user_ppc64_vrstate_entry::SharedCtor() {
  _cached_size_ = 0;
  vrsave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_ppc64_vrstate_entry::~user_ppc64_vrstate_entry() {
  // @@protoc_insertion_point(destructor:user_ppc64_vrstate_entry)
  SharedDtor();
}

void user_ppc64_vrstate_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_ppc64_vrstate_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_ppc64_vrstate_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_ppc64_vrstate_entry_descriptor_;
}

const user_ppc64_vrstate_entry& user_ppc64_vrstate_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dppc64_2eproto();
  return *default_instance_;
}

user_ppc64_vrstate_entry* user_ppc64_vrstate_entry::default_instance_ = NULL;

user_ppc64_vrstate_entry* user_ppc64_vrstate_entry::New() const {
  return new user_ppc64_vrstate_entry;
}

void user_ppc64_vrstate_entry::Clear() {
  vrsave_ = 0u;
  vrregs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_ppc64_vrstate_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_ppc64_vrstate_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 vrregs = 1;
      case 1: {
        if (tag == 8) {
         parse_vrregs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_vrregs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vrregs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_vrregs;
        if (input->ExpectTag(16)) goto parse_vrsave;
        break;
      }

      // required uint32 vrsave = 2;
      case 2: {
        if (tag == 16) {
         parse_vrsave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrsave_)));
          set_has_vrsave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_ppc64_vrstate_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_ppc64_vrstate_entry)
  return false;
#undef DO_
}

void user_ppc64_vrstate_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_ppc64_vrstate_entry)
  // repeated uint64 vrregs = 1;
  for (int i = 0; i < this->vrregs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->vrregs(i), output);
  }

  // required uint32 vrsave = 2;
  if (has_vrsave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vrsave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_ppc64_vrstate_entry)
}

::google::protobuf::uint8* user_ppc64_vrstate_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_ppc64_vrstate_entry)
  // repeated uint64 vrregs = 1;
  for (int i = 0; i < this->vrregs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->vrregs(i), target);
  }

  // required uint32 vrsave = 2;
  if (has_vrsave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vrsave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_ppc64_vrstate_entry)
  return target;
}

int user_ppc64_vrstate_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 vrsave = 2;
    if (has_vrsave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vrsave());
    }

  }
  // repeated uint64 vrregs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vrregs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vrregs(i));
    }
    total_size += 1 * this->vrregs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_ppc64_vrstate_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_ppc64_vrstate_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_ppc64_vrstate_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_ppc64_vrstate_entry::MergeFrom(const user_ppc64_vrstate_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  vrregs_.MergeFrom(from.vrregs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vrsave()) {
      set_vrsave(from.vrsave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_ppc64_vrstate_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_ppc64_vrstate_entry::CopyFrom(const user_ppc64_vrstate_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_ppc64_vrstate_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void user_ppc64_vrstate_entry::Swap(user_ppc64_vrstate_entry* other) {
  if (other != this) {
    vrregs_.Swap(&other->vrregs_);
    std::swap(vrsave_, other->vrsave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_ppc64_vrstate_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_ppc64_vrstate_entry_descriptor_;
  metadata.reflection = user_ppc64_vrstate_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_ppc64_vsxstate_entry::kVsxregsFieldNumber;
#endif  // !_MSC_VER

user_ppc64_vsxstate_entry::user_ppc64_vsxstate_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user_ppc64_vsxstate_entry)
}

void user_ppc64_vsxstate_entry::InitAsDefaultInstance() {
}

user_ppc64_vsxstate_entry::user_ppc64_vsxstate_entry(const user_ppc64_vsxstate_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user_ppc64_vsxstate_entry)
}

void user_ppc64_vsxstate_entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_ppc64_vsxstate_entry::~user_ppc64_vsxstate_entry() {
  // @@protoc_insertion_point(destructor:user_ppc64_vsxstate_entry)
  SharedDtor();
}

void user_ppc64_vsxstate_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_ppc64_vsxstate_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_ppc64_vsxstate_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_ppc64_vsxstate_entry_descriptor_;
}

const user_ppc64_vsxstate_entry& user_ppc64_vsxstate_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dppc64_2eproto();
  return *default_instance_;
}

user_ppc64_vsxstate_entry* user_ppc64_vsxstate_entry::default_instance_ = NULL;

user_ppc64_vsxstate_entry* user_ppc64_vsxstate_entry::New() const {
  return new user_ppc64_vsxstate_entry;
}

void user_ppc64_vsxstate_entry::Clear() {
  vsxregs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_ppc64_vsxstate_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:user_ppc64_vsxstate_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 vsxregs = 1;
      case 1: {
        if (tag == 8) {
         parse_vsxregs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_vsxregs())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vsxregs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_vsxregs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user_ppc64_vsxstate_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user_ppc64_vsxstate_entry)
  return false;
#undef DO_
}

void user_ppc64_vsxstate_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user_ppc64_vsxstate_entry)
  // repeated uint64 vsxregs = 1;
  for (int i = 0; i < this->vsxregs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->vsxregs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:user_ppc64_vsxstate_entry)
}

::google::protobuf::uint8* user_ppc64_vsxstate_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:user_ppc64_vsxstate_entry)
  // repeated uint64 vsxregs = 1;
  for (int i = 0; i < this->vsxregs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->vsxregs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:user_ppc64_vsxstate_entry)
  return target;
}

int user_ppc64_vsxstate_entry::ByteSize() const {
  int total_size = 0;

  // repeated uint64 vsxregs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vsxregs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vsxregs(i));
    }
    total_size += 1 * this->vsxregs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_ppc64_vsxstate_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_ppc64_vsxstate_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_ppc64_vsxstate_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_ppc64_vsxstate_entry::MergeFrom(const user_ppc64_vsxstate_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  vsxregs_.MergeFrom(from.vsxregs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_ppc64_vsxstate_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_ppc64_vsxstate_entry::CopyFrom(const user_ppc64_vsxstate_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_ppc64_vsxstate_entry::IsInitialized() const {

  return true;
}

void user_ppc64_vsxstate_entry::Swap(user_ppc64_vsxstate_entry* other) {
  if (other != this) {
    vsxregs_.Swap(&other->vsxregs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_ppc64_vsxstate_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_ppc64_vsxstate_entry_descriptor_;
  metadata.reflection = user_ppc64_vsxstate_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thread_info_ppc64::kClearTidAddrFieldNumber;
const int thread_info_ppc64::kGpregsFieldNumber;
const int thread_info_ppc64::kFpstateFieldNumber;
const int thread_info_ppc64::kVrstateFieldNumber;
const int thread_info_ppc64::kVsxstateFieldNumber;
#endif  // !_MSC_VER

thread_info_ppc64::thread_info_ppc64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:thread_info_ppc64)
}

void thread_info_ppc64::InitAsDefaultInstance() {
  gpregs_ = const_cast< ::user_ppc64_regs_entry*>(&::user_ppc64_regs_entry::default_instance());
  fpstate_ = const_cast< ::user_ppc64_fpstate_entry*>(&::user_ppc64_fpstate_entry::default_instance());
  vrstate_ = const_cast< ::user_ppc64_vrstate_entry*>(&::user_ppc64_vrstate_entry::default_instance());
  vsxstate_ = const_cast< ::user_ppc64_vsxstate_entry*>(&::user_ppc64_vsxstate_entry::default_instance());
}

thread_info_ppc64::thread_info_ppc64(const thread_info_ppc64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thread_info_ppc64)
}

void thread_info_ppc64::SharedCtor() {
  _cached_size_ = 0;
  clear_tid_addr_ = GOOGLE_ULONGLONG(0);
  gpregs_ = NULL;
  fpstate_ = NULL;
  vrstate_ = NULL;
  vsxstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thread_info_ppc64::~thread_info_ppc64() {
  // @@protoc_insertion_point(destructor:thread_info_ppc64)
  SharedDtor();
}

void thread_info_ppc64::SharedDtor() {
  if (this != default_instance_) {
    delete gpregs_;
    delete fpstate_;
    delete vrstate_;
    delete vsxstate_;
  }
}

void thread_info_ppc64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thread_info_ppc64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thread_info_ppc64_descriptor_;
}

const thread_info_ppc64& thread_info_ppc64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_core_2dppc64_2eproto();
  return *default_instance_;
}

thread_info_ppc64* thread_info_ppc64::default_instance_ = NULL;

thread_info_ppc64* thread_info_ppc64::New() const {
  return new thread_info_ppc64;
}

void thread_info_ppc64::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    clear_tid_addr_ = GOOGLE_ULONGLONG(0);
    if (has_gpregs()) {
      if (gpregs_ != NULL) gpregs_->::user_ppc64_regs_entry::Clear();
    }
    if (has_fpstate()) {
      if (fpstate_ != NULL) fpstate_->::user_ppc64_fpstate_entry::Clear();
    }
    if (has_vrstate()) {
      if (vrstate_ != NULL) vrstate_->::user_ppc64_vrstate_entry::Clear();
    }
    if (has_vsxstate()) {
      if (vsxstate_ != NULL) vsxstate_->::user_ppc64_vsxstate_entry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thread_info_ppc64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thread_info_ppc64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clear_tid_addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clear_tid_addr_)));
          set_has_clear_tid_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gpregs;
        break;
      }

      // required .user_ppc64_regs_entry gpregs = 2;
      case 2: {
        if (tag == 18) {
         parse_gpregs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpregs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fpstate;
        break;
      }

      // optional .user_ppc64_fpstate_entry fpstate = 3;
      case 3: {
        if (tag == 26) {
         parse_fpstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vrstate;
        break;
      }

      // optional .user_ppc64_vrstate_entry vrstate = 4;
      case 4: {
        if (tag == 34) {
         parse_vrstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vrstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vsxstate;
        break;
      }

      // optional .user_ppc64_vsxstate_entry vsxstate = 5;
      case 5: {
        if (tag == 42) {
         parse_vsxstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vsxstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thread_info_ppc64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thread_info_ppc64)
  return false;
#undef DO_
}

void thread_info_ppc64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thread_info_ppc64)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clear_tid_addr(), output);
  }

  // required .user_ppc64_regs_entry gpregs = 2;
  if (has_gpregs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gpregs(), output);
  }

  // optional .user_ppc64_fpstate_entry fpstate = 3;
  if (has_fpstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fpstate(), output);
  }

  // optional .user_ppc64_vrstate_entry vrstate = 4;
  if (has_vrstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vrstate(), output);
  }

  // optional .user_ppc64_vsxstate_entry vsxstate = 5;
  if (has_vsxstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vsxstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thread_info_ppc64)
}

::google::protobuf::uint8* thread_info_ppc64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:thread_info_ppc64)
  // required uint64 clear_tid_addr = 1;
  if (has_clear_tid_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clear_tid_addr(), target);
  }

  // required .user_ppc64_regs_entry gpregs = 2;
  if (has_gpregs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gpregs(), target);
  }

  // optional .user_ppc64_fpstate_entry fpstate = 3;
  if (has_fpstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fpstate(), target);
  }

  // optional .user_ppc64_vrstate_entry vrstate = 4;
  if (has_vrstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vrstate(), target);
  }

  // optional .user_ppc64_vsxstate_entry vsxstate = 5;
  if (has_vsxstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vsxstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thread_info_ppc64)
  return target;
}

int thread_info_ppc64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 clear_tid_addr = 1;
    if (has_clear_tid_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clear_tid_addr());
    }

    // required .user_ppc64_regs_entry gpregs = 2;
    if (has_gpregs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpregs());
    }

    // optional .user_ppc64_fpstate_entry fpstate = 3;
    if (has_fpstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpstate());
    }

    // optional .user_ppc64_vrstate_entry vrstate = 4;
    if (has_vrstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vrstate());
    }

    // optional .user_ppc64_vsxstate_entry vsxstate = 5;
    if (has_vsxstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vsxstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thread_info_ppc64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thread_info_ppc64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thread_info_ppc64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thread_info_ppc64::MergeFrom(const thread_info_ppc64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_tid_addr()) {
      set_clear_tid_addr(from.clear_tid_addr());
    }
    if (from.has_gpregs()) {
      mutable_gpregs()->::user_ppc64_regs_entry::MergeFrom(from.gpregs());
    }
    if (from.has_fpstate()) {
      mutable_fpstate()->::user_ppc64_fpstate_entry::MergeFrom(from.fpstate());
    }
    if (from.has_vrstate()) {
      mutable_vrstate()->::user_ppc64_vrstate_entry::MergeFrom(from.vrstate());
    }
    if (from.has_vsxstate()) {
      mutable_vsxstate()->::user_ppc64_vsxstate_entry::MergeFrom(from.vsxstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thread_info_ppc64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thread_info_ppc64::CopyFrom(const thread_info_ppc64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thread_info_ppc64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gpregs()) {
    if (!this->gpregs().IsInitialized()) return false;
  }
  if (has_vrstate()) {
    if (!this->vrstate().IsInitialized()) return false;
  }
  return true;
}

void thread_info_ppc64::Swap(thread_info_ppc64* other) {
  if (other != this) {
    std::swap(clear_tid_addr_, other->clear_tid_addr_);
    std::swap(gpregs_, other->gpregs_);
    std::swap(fpstate_, other->fpstate_);
    std::swap(vrstate_, other->vrstate_);
    std::swap(vsxstate_, other->vsxstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thread_info_ppc64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thread_info_ppc64_descriptor_;
  metadata.reflection = thread_info_ppc64_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
