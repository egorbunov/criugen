// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regfile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "regfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* reg_file_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reg_file_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_regfile_2eproto() {
  protobuf_AddDesc_regfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "regfile.proto");
  GOOGLE_CHECK(file != NULL);
  reg_file_entry_descriptor_ = file->message_type(0);
  static const int reg_file_entry_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, fown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, mnt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, mode_),
  };
  reg_file_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reg_file_entry_descriptor_,
      reg_file_entry::default_instance_,
      reg_file_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reg_file_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reg_file_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_regfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reg_file_entry_descriptor_, &reg_file_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_regfile_2eproto() {
  delete reg_file_entry::default_instance_;
  delete reg_file_entry_reflection_;
}

void protobuf_AddDesc_regfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_opts_2eproto();
  ::protobuf_AddDesc_fown_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rregfile.proto\032\nopts.proto\032\nfown.proto\""
    "\260\001\n\016reg_file_entry\022\n\n\002id\030\001 \002(\r\022\037\n\005flags\030"
    "\002 \002(\rB\020\322\?\r\032\013rfile.flags\022\013\n\003pos\030\003 \002(\004\022\031\n\004"
    "fown\030\005 \002(\0132\013.fown_entry\022\014\n\004name\030\006 \002(\t\022\022\n"
    "\006mnt_id\030\007 \001(\021:\002-1\022\014\n\004size\030\010 \001(\004\022\013\n\003ext\030\t"
    " \001(\010\022\014\n\004mode\030\n \001(\r", 218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "regfile.proto", &protobuf_RegisterTypes);
  reg_file_entry::default_instance_ = new reg_file_entry();
  reg_file_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_regfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_regfile_2eproto {
  StaticDescriptorInitializer_regfile_2eproto() {
    protobuf_AddDesc_regfile_2eproto();
  }
} static_descriptor_initializer_regfile_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int reg_file_entry::kIdFieldNumber;
const int reg_file_entry::kFlagsFieldNumber;
const int reg_file_entry::kPosFieldNumber;
const int reg_file_entry::kFownFieldNumber;
const int reg_file_entry::kNameFieldNumber;
const int reg_file_entry::kMntIdFieldNumber;
const int reg_file_entry::kSizeFieldNumber;
const int reg_file_entry::kExtFieldNumber;
const int reg_file_entry::kModeFieldNumber;
#endif  // !_MSC_VER

reg_file_entry::reg_file_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reg_file_entry)
}

void reg_file_entry::InitAsDefaultInstance() {
  fown_ = const_cast< ::fown_entry*>(&::fown_entry::default_instance());
}

reg_file_entry::reg_file_entry(const reg_file_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:reg_file_entry)
}

void reg_file_entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  flags_ = 0u;
  pos_ = GOOGLE_ULONGLONG(0);
  fown_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnt_id_ = -1;
  size_ = GOOGLE_ULONGLONG(0);
  ext_ = false;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reg_file_entry::~reg_file_entry() {
  // @@protoc_insertion_point(destructor:reg_file_entry)
  SharedDtor();
}

void reg_file_entry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete fown_;
  }
}

void reg_file_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reg_file_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reg_file_entry_descriptor_;
}

const reg_file_entry& reg_file_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regfile_2eproto();
  return *default_instance_;
}

reg_file_entry* reg_file_entry::default_instance_ = NULL;

reg_file_entry* reg_file_entry::New() const {
  return new reg_file_entry;
}

void reg_file_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<reg_file_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, pos_);
    if (has_fown()) {
      if (fown_ != NULL) fown_->::fown_entry::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    mnt_id_ = -1;
    size_ = GOOGLE_ULONGLONG(0);
    ext_ = false;
  }
  mode_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reg_file_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:reg_file_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required uint64 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fown;
        break;
      }

      // required .fown_entry fown = 5;
      case 5: {
        if (tag == 42) {
         parse_fown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mnt_id;
        break;
      }

      // optional sint32 mnt_id = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_mnt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mnt_id_)));
          set_has_mnt_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // optional uint64 size = 8;
      case 8: {
        if (tag == 64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ext;
        break;
      }

      // optional bool ext = 9;
      case 9: {
        if (tag == 72) {
         parse_ext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ext_)));
          set_has_ext();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mode;
        break;
      }

      // optional uint32 mode = 10;
      case 10: {
        if (tag == 80) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reg_file_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reg_file_entry)
  return false;
#undef DO_
}

void reg_file_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reg_file_entry)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // required uint64 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pos(), output);
  }

  // required .fown_entry fown = 5;
  if (has_fown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fown(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional sint32 mnt_id = 7 [default = -1];
  if (has_mnt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->mnt_id(), output);
  }

  // optional uint64 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->size(), output);
  }

  // optional bool ext = 9;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ext(), output);
  }

  // optional uint32 mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:reg_file_entry)
}

::google::protobuf::uint8* reg_file_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:reg_file_entry)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // required uint64 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pos(), target);
  }

  // required .fown_entry fown = 5;
  if (has_fown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fown(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional sint32 mnt_id = 7 [default = -1];
  if (has_mnt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->mnt_id(), target);
  }

  // optional uint64 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->size(), target);
  }

  // optional bool ext = 9;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ext(), target);
  }

  // optional uint32 mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reg_file_entry)
  return target;
}

int reg_file_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint64 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pos());
    }

    // required .fown_entry fown = 5;
    if (has_fown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fown());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 mnt_id = 7 [default = -1];
    if (has_mnt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mnt_id());
    }

    // optional uint64 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional bool ext = 9;
    if (has_ext()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mode = 10;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reg_file_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reg_file_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reg_file_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reg_file_entry::MergeFrom(const reg_file_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_fown()) {
      mutable_fown()->::fown_entry::MergeFrom(from.fown());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mnt_id()) {
      set_mnt_id(from.mnt_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reg_file_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reg_file_entry::CopyFrom(const reg_file_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reg_file_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_fown()) {
    if (!this->fown().IsInitialized()) return false;
  }
  return true;
}

void reg_file_entry::Swap(reg_file_entry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(pos_, other->pos_);
    std::swap(fown_, other->fown_);
    std::swap(name_, other->name_);
    std::swap(mnt_id_, other->mnt_id_);
    std::swap(size_, other->size_);
    std::swap(ext_, other->ext_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reg_file_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reg_file_entry_descriptor_;
  metadata.reflection = reg_file_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
