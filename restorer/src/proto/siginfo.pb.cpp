// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: siginfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "siginfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* siginfo_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  siginfo_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* signal_queue_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signal_queue_entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_siginfo_2eproto() {
  protobuf_AddDesc_siginfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "siginfo.proto");
  GOOGLE_CHECK(file != NULL);
  siginfo_entry_descriptor_ = file->message_type(0);
  static const int siginfo_entry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siginfo_entry, siginfo_),
  };
  siginfo_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      siginfo_entry_descriptor_,
      siginfo_entry::default_instance_,
      siginfo_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siginfo_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(siginfo_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(siginfo_entry));
  signal_queue_entry_descriptor_ = file->message_type(1);
  static const int signal_queue_entry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_queue_entry, signals_),
  };
  signal_queue_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      signal_queue_entry_descriptor_,
      signal_queue_entry::default_instance_,
      signal_queue_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_queue_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal_queue_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(signal_queue_entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_siginfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    siginfo_entry_descriptor_, &siginfo_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    signal_queue_entry_descriptor_, &signal_queue_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_siginfo_2eproto() {
  delete siginfo_entry::default_instance_;
  delete siginfo_entry_reflection_;
  delete signal_queue_entry::default_instance_;
  delete signal_queue_entry_reflection_;
}

void protobuf_AddDesc_siginfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsiginfo.proto\" \n\rsiginfo_entry\022\017\n\007sigi"
    "nfo\030\001 \002(\014\"5\n\022signal_queue_entry\022\037\n\007signa"
    "ls\030\001 \003(\0132\016.siginfo_entry", 104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "siginfo.proto", &protobuf_RegisterTypes);
  siginfo_entry::default_instance_ = new siginfo_entry();
  signal_queue_entry::default_instance_ = new signal_queue_entry();
  siginfo_entry::default_instance_->InitAsDefaultInstance();
  signal_queue_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_siginfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_siginfo_2eproto {
  StaticDescriptorInitializer_siginfo_2eproto() {
    protobuf_AddDesc_siginfo_2eproto();
  }
} static_descriptor_initializer_siginfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int siginfo_entry::kSiginfoFieldNumber;
#endif  // !_MSC_VER

siginfo_entry::siginfo_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:siginfo_entry)
}

void siginfo_entry::InitAsDefaultInstance() {
}

siginfo_entry::siginfo_entry(const siginfo_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:siginfo_entry)
}

void siginfo_entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  siginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

siginfo_entry::~siginfo_entry() {
  // @@protoc_insertion_point(destructor:siginfo_entry)
  SharedDtor();
}

void siginfo_entry::SharedDtor() {
  if (siginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete siginfo_;
  }
  if (this != default_instance_) {
  }
}

void siginfo_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* siginfo_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return siginfo_entry_descriptor_;
}

const siginfo_entry& siginfo_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_siginfo_2eproto();
  return *default_instance_;
}

siginfo_entry* siginfo_entry::default_instance_ = NULL;

siginfo_entry* siginfo_entry::New() const {
  return new siginfo_entry;
}

void siginfo_entry::Clear() {
  if (has_siginfo()) {
    if (siginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      siginfo_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool siginfo_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:siginfo_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes siginfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_siginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:siginfo_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:siginfo_entry)
  return false;
#undef DO_
}

void siginfo_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:siginfo_entry)
  // required bytes siginfo = 1;
  if (has_siginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->siginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:siginfo_entry)
}

::google::protobuf::uint8* siginfo_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:siginfo_entry)
  // required bytes siginfo = 1;
  if (has_siginfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->siginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:siginfo_entry)
  return target;
}

int siginfo_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes siginfo = 1;
    if (has_siginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->siginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void siginfo_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const siginfo_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const siginfo_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void siginfo_entry::MergeFrom(const siginfo_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_siginfo()) {
      set_siginfo(from.siginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void siginfo_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void siginfo_entry::CopyFrom(const siginfo_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool siginfo_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void siginfo_entry::Swap(siginfo_entry* other) {
  if (other != this) {
    std::swap(siginfo_, other->siginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata siginfo_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = siginfo_entry_descriptor_;
  metadata.reflection = siginfo_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int signal_queue_entry::kSignalsFieldNumber;
#endif  // !_MSC_VER

signal_queue_entry::signal_queue_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_queue_entry)
}

void signal_queue_entry::InitAsDefaultInstance() {
}

signal_queue_entry::signal_queue_entry(const signal_queue_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signal_queue_entry)
}

void signal_queue_entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

signal_queue_entry::~signal_queue_entry() {
  // @@protoc_insertion_point(destructor:signal_queue_entry)
  SharedDtor();
}

void signal_queue_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void signal_queue_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signal_queue_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signal_queue_entry_descriptor_;
}

const signal_queue_entry& signal_queue_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_siginfo_2eproto();
  return *default_instance_;
}

signal_queue_entry* signal_queue_entry::default_instance_ = NULL;

signal_queue_entry* signal_queue_entry::New() const {
  return new signal_queue_entry;
}

void signal_queue_entry::Clear() {
  signals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool signal_queue_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signal_queue_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .siginfo_entry signals = 1;
      case 1: {
        if (tag == 10) {
         parse_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_signals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signal_queue_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signal_queue_entry)
  return false;
#undef DO_
}

void signal_queue_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signal_queue_entry)
  // repeated .siginfo_entry signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:signal_queue_entry)
}

::google::protobuf::uint8* signal_queue_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_queue_entry)
  // repeated .siginfo_entry signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_queue_entry)
  return target;
}

int signal_queue_entry::ByteSize() const {
  int total_size = 0;

  // repeated .siginfo_entry signals = 1;
  total_size += 1 * this->signals_size();
  for (int i = 0; i < this->signals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signal_queue_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const signal_queue_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const signal_queue_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void signal_queue_entry::MergeFrom(const signal_queue_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  signals_.MergeFrom(from.signals_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void signal_queue_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signal_queue_entry::CopyFrom(const signal_queue_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signal_queue_entry::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->signals())) return false;
  return true;
}

void signal_queue_entry::Swap(signal_queue_entry* other) {
  if (other != this) {
    signals_.Swap(&other->signals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata signal_queue_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signal_queue_entry_descriptor_;
  metadata.reflection = signal_queue_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
