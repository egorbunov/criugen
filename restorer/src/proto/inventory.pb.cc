// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inventory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* inventory_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  inventory_entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* lsmtype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_inventory_2eproto() {
  protobuf_AddDesc_inventory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inventory.proto");
  GOOGLE_CHECK(file != NULL);
  inventory_entry_descriptor_ = file->message_type(0);
  static const int inventory_entry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, img_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, fdinfo_per_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, root_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, ns_per_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, root_cg_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, lsmtype_),
  };
  inventory_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      inventory_entry_descriptor_,
      inventory_entry::default_instance_,
      inventory_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(inventory_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(inventory_entry));
  lsmtype_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inventory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    inventory_entry_descriptor_, &inventory_entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inventory_2eproto() {
  delete inventory_entry::default_instance_;
  delete inventory_entry_reflection_;
}

void protobuf_AddDesc_inventory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_core_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017inventory.proto\032\ncore.proto\"\250\001\n\017invent"
    "ory_entry\022\023\n\013img_version\030\001 \002(\r\022\025\n\rfdinfo"
    "_per_id\030\002 \001(\010\022&\n\010root_ids\030\003 \001(\0132\024.task_k"
    "obj_ids_entry\022\021\n\tns_per_id\030\004 \001(\010\022\023\n\013root"
    "_cg_set\030\005 \001(\r\022\031\n\007lsmtype\030\006 \001(\0162\010.lsmtype"
    "*0\n\007lsmtype\022\n\n\006NO_LSM\020\000\022\013\n\007SELINUX\020\001\022\014\n\010"
    "APPARMOR\020\002", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inventory.proto", &protobuf_RegisterTypes);
  inventory_entry::default_instance_ = new inventory_entry();
  inventory_entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inventory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inventory_2eproto {
  StaticDescriptorInitializer_inventory_2eproto() {
    protobuf_AddDesc_inventory_2eproto();
  }
} static_descriptor_initializer_inventory_2eproto_;
const ::google::protobuf::EnumDescriptor* lsmtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lsmtype_descriptor_;
}
bool lsmtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int inventory_entry::kImgVersionFieldNumber;
const int inventory_entry::kFdinfoPerIdFieldNumber;
const int inventory_entry::kRootIdsFieldNumber;
const int inventory_entry::kNsPerIdFieldNumber;
const int inventory_entry::kRootCgSetFieldNumber;
const int inventory_entry::kLsmtypeFieldNumber;
#endif  // !_MSC_VER

inventory_entry::inventory_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:inventory_entry)
}

void inventory_entry::InitAsDefaultInstance() {
  root_ids_ = const_cast< ::task_kobj_ids_entry*>(&::task_kobj_ids_entry::default_instance());
}

inventory_entry::inventory_entry(const inventory_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:inventory_entry)
}

void inventory_entry::SharedCtor() {
  _cached_size_ = 0;
  img_version_ = 0u;
  fdinfo_per_id_ = false;
  root_ids_ = NULL;
  ns_per_id_ = false;
  root_cg_set_ = 0u;
  lsmtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

inventory_entry::~inventory_entry() {
  // @@protoc_insertion_point(destructor:inventory_entry)
  SharedDtor();
}

void inventory_entry::SharedDtor() {
  if (this != default_instance_) {
    delete root_ids_;
  }
}

void inventory_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* inventory_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return inventory_entry_descriptor_;
}

const inventory_entry& inventory_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inventory_2eproto();
  return *default_instance_;
}

inventory_entry* inventory_entry::default_instance_ = NULL;

inventory_entry* inventory_entry::New() const {
  return new inventory_entry;
}

void inventory_entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<inventory_entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(img_version_, ns_per_id_);
    ZR_(root_cg_set_, lsmtype_);
    if (has_root_ids()) {
      if (root_ids_ != NULL) root_ids_->::task_kobj_ids_entry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool inventory_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inventory_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 img_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_version_)));
          set_has_img_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fdinfo_per_id;
        break;
      }

      // optional bool fdinfo_per_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fdinfo_per_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fdinfo_per_id_)));
          set_has_fdinfo_per_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_root_ids;
        break;
      }

      // optional .task_kobj_ids_entry root_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_root_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ns_per_id;
        break;
      }

      // optional bool ns_per_id = 4;
      case 4: {
        if (tag == 32) {
         parse_ns_per_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ns_per_id_)));
          set_has_ns_per_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_root_cg_set;
        break;
      }

      // optional uint32 root_cg_set = 5;
      case 5: {
        if (tag == 40) {
         parse_root_cg_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &root_cg_set_)));
          set_has_root_cg_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lsmtype;
        break;
      }

      // optional .lsmtype lsmtype = 6;
      case 6: {
        if (tag == 48) {
         parse_lsmtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lsmtype_IsValid(value)) {
            set_lsmtype(static_cast< ::lsmtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inventory_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inventory_entry)
  return false;
#undef DO_
}

void inventory_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inventory_entry)
  // required uint32 img_version = 1;
  if (has_img_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->img_version(), output);
  }

  // optional bool fdinfo_per_id = 2;
  if (has_fdinfo_per_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fdinfo_per_id(), output);
  }

  // optional .task_kobj_ids_entry root_ids = 3;
  if (has_root_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->root_ids(), output);
  }

  // optional bool ns_per_id = 4;
  if (has_ns_per_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ns_per_id(), output);
  }

  // optional uint32 root_cg_set = 5;
  if (has_root_cg_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->root_cg_set(), output);
  }

  // optional .lsmtype lsmtype = 6;
  if (has_lsmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->lsmtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:inventory_entry)
}

::google::protobuf::uint8* inventory_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inventory_entry)
  // required uint32 img_version = 1;
  if (has_img_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->img_version(), target);
  }

  // optional bool fdinfo_per_id = 2;
  if (has_fdinfo_per_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fdinfo_per_id(), target);
  }

  // optional .task_kobj_ids_entry root_ids = 3;
  if (has_root_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->root_ids(), target);
  }

  // optional bool ns_per_id = 4;
  if (has_ns_per_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ns_per_id(), target);
  }

  // optional uint32 root_cg_set = 5;
  if (has_root_cg_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->root_cg_set(), target);
  }

  // optional .lsmtype lsmtype = 6;
  if (has_lsmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->lsmtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inventory_entry)
  return target;
}

int inventory_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 img_version = 1;
    if (has_img_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->img_version());
    }

    // optional bool fdinfo_per_id = 2;
    if (has_fdinfo_per_id()) {
      total_size += 1 + 1;
    }

    // optional .task_kobj_ids_entry root_ids = 3;
    if (has_root_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_ids());
    }

    // optional bool ns_per_id = 4;
    if (has_ns_per_id()) {
      total_size += 1 + 1;
    }

    // optional uint32 root_cg_set = 5;
    if (has_root_cg_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->root_cg_set());
    }

    // optional .lsmtype lsmtype = 6;
    if (has_lsmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lsmtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void inventory_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const inventory_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const inventory_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void inventory_entry::MergeFrom(const inventory_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_version()) {
      set_img_version(from.img_version());
    }
    if (from.has_fdinfo_per_id()) {
      set_fdinfo_per_id(from.fdinfo_per_id());
    }
    if (from.has_root_ids()) {
      mutable_root_ids()->::task_kobj_ids_entry::MergeFrom(from.root_ids());
    }
    if (from.has_ns_per_id()) {
      set_ns_per_id(from.ns_per_id());
    }
    if (from.has_root_cg_set()) {
      set_root_cg_set(from.root_cg_set());
    }
    if (from.has_lsmtype()) {
      set_lsmtype(from.lsmtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void inventory_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inventory_entry::CopyFrom(const inventory_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inventory_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_root_ids()) {
    if (!this->root_ids().IsInitialized()) return false;
  }
  return true;
}

void inventory_entry::Swap(inventory_entry* other) {
  if (other != this) {
    std::swap(img_version_, other->img_version_);
    std::swap(fdinfo_per_id_, other->fdinfo_per_id_);
    std::swap(root_ids_, other->root_ids_);
    std::swap(ns_per_id_, other->ns_per_id_);
    std::swap(root_cg_set_, other->root_cg_set_);
    std::swap(lsmtype_, other->lsmtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata inventory_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = inventory_entry_descriptor_;
  metadata.reflection = inventory_entry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
