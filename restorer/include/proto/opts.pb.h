// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opts.proto

#ifndef PROTOBUF_opts_2eproto__INCLUDED
#define PROTOBUF_opts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_opts_2eproto();
void protobuf_AssignDesc_opts_2eproto();
void protobuf_ShutdownFile_opts_2eproto();

class CRIU_Opts;

// ===================================================================

class CRIU_Opts : public ::google::protobuf::Message {
 public:
  CRIU_Opts();
  virtual ~CRIU_Opts();

  CRIU_Opts(const CRIU_Opts& from);

  inline CRIU_Opts& operator=(const CRIU_Opts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CRIU_Opts& default_instance();

  void Swap(CRIU_Opts* other);

  // implements Message ----------------------------------------------

  CRIU_Opts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRIU_Opts& from);
  void MergeFrom(const CRIU_Opts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hex = 1;
  inline bool has_hex() const;
  inline void clear_hex();
  static const int kHexFieldNumber = 1;
  inline bool hex() const;
  inline void set_hex(bool value);

  // optional bool ipadd = 2;
  inline bool has_ipadd() const;
  inline void clear_ipadd();
  static const int kIpaddFieldNumber = 2;
  inline bool ipadd() const;
  inline void set_ipadd(bool value);

  // optional string flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline const ::std::string& flags() const;
  inline void set_flags(const ::std::string& value);
  inline void set_flags(const char* value);
  inline void set_flags(const char* value, size_t size);
  inline ::std::string* mutable_flags();
  inline ::std::string* release_flags();
  inline void set_allocated_flags(::std::string* flags);

  // optional bool dev = 4;
  inline bool has_dev() const;
  inline void clear_dev();
  static const int kDevFieldNumber = 4;
  inline bool dev() const;
  inline void set_dev(bool value);

  // optional bool odev = 5;
  inline bool has_odev() const;
  inline void clear_odev();
  static const int kOdevFieldNumber = 5;
  inline bool odev() const;
  inline void set_odev(bool value);

  // @@protoc_insertion_point(class_scope:CRIU_Opts)
 private:
  inline void set_has_hex();
  inline void clear_has_hex();
  inline void set_has_ipadd();
  inline void clear_has_ipadd();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_dev();
  inline void clear_has_dev();
  inline void set_has_odev();
  inline void clear_has_odev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flags_;
  bool hex_;
  bool ipadd_;
  bool dev_;
  bool odev_;
  friend void  protobuf_AddDesc_opts_2eproto();
  friend void protobuf_AssignDesc_opts_2eproto();
  friend void protobuf_ShutdownFile_opts_2eproto();

  void InitAsDefaultInstance();
  static CRIU_Opts* default_instance_;
};
// ===================================================================

static const int kCriuFieldNumber = 1018;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::CRIU_Opts >, 11, false >
  criu;

// ===================================================================

// CRIU_Opts

// optional bool hex = 1;
inline bool CRIU_Opts::has_hex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRIU_Opts::set_has_hex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRIU_Opts::clear_has_hex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRIU_Opts::clear_hex() {
  hex_ = false;
  clear_has_hex();
}
inline bool CRIU_Opts::hex() const {
  // @@protoc_insertion_point(field_get:CRIU_Opts.hex)
  return hex_;
}
inline void CRIU_Opts::set_hex(bool value) {
  set_has_hex();
  hex_ = value;
  // @@protoc_insertion_point(field_set:CRIU_Opts.hex)
}

// optional bool ipadd = 2;
inline bool CRIU_Opts::has_ipadd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CRIU_Opts::set_has_ipadd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CRIU_Opts::clear_has_ipadd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CRIU_Opts::clear_ipadd() {
  ipadd_ = false;
  clear_has_ipadd();
}
inline bool CRIU_Opts::ipadd() const {
  // @@protoc_insertion_point(field_get:CRIU_Opts.ipadd)
  return ipadd_;
}
inline void CRIU_Opts::set_ipadd(bool value) {
  set_has_ipadd();
  ipadd_ = value;
  // @@protoc_insertion_point(field_set:CRIU_Opts.ipadd)
}

// optional string flags = 3;
inline bool CRIU_Opts::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CRIU_Opts::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CRIU_Opts::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CRIU_Opts::clear_flags() {
  if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flags_->clear();
  }
  clear_has_flags();
}
inline const ::std::string& CRIU_Opts::flags() const {
  // @@protoc_insertion_point(field_get:CRIU_Opts.flags)
  return *flags_;
}
inline void CRIU_Opts::set_flags(const ::std::string& value) {
  set_has_flags();
  if (flags_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flags_ = new ::std::string;
  }
  flags_->assign(value);
  // @@protoc_insertion_point(field_set:CRIU_Opts.flags)
}
inline void CRIU_Opts::set_flags(const char* value) {
  set_has_flags();
  if (flags_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flags_ = new ::std::string;
  }
  flags_->assign(value);
  // @@protoc_insertion_point(field_set_char:CRIU_Opts.flags)
}
inline void CRIU_Opts::set_flags(const char* value, size_t size) {
  set_has_flags();
  if (flags_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flags_ = new ::std::string;
  }
  flags_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRIU_Opts.flags)
}
inline ::std::string* CRIU_Opts::mutable_flags() {
  set_has_flags();
  if (flags_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flags_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CRIU_Opts.flags)
  return flags_;
}
inline ::std::string* CRIU_Opts::release_flags() {
  clear_has_flags();
  if (flags_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flags_;
    flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CRIU_Opts::set_allocated_flags(::std::string* flags) {
  if (flags_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flags_;
  }
  if (flags) {
    set_has_flags();
    flags_ = flags;
  } else {
    clear_has_flags();
    flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CRIU_Opts.flags)
}

// optional bool dev = 4;
inline bool CRIU_Opts::has_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CRIU_Opts::set_has_dev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CRIU_Opts::clear_has_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CRIU_Opts::clear_dev() {
  dev_ = false;
  clear_has_dev();
}
inline bool CRIU_Opts::dev() const {
  // @@protoc_insertion_point(field_get:CRIU_Opts.dev)
  return dev_;
}
inline void CRIU_Opts::set_dev(bool value) {
  set_has_dev();
  dev_ = value;
  // @@protoc_insertion_point(field_set:CRIU_Opts.dev)
}

// optional bool odev = 5;
inline bool CRIU_Opts::has_odev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CRIU_Opts::set_has_odev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CRIU_Opts::clear_has_odev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CRIU_Opts::clear_odev() {
  odev_ = false;
  clear_has_odev();
}
inline bool CRIU_Opts::odev() const {
  // @@protoc_insertion_point(field_get:CRIU_Opts.odev)
  return odev_;
}
inline void CRIU_Opts::set_odev(bool value) {
  set_has_odev();
  odev_ = value;
  // @@protoc_insertion_point(field_set:CRIU_Opts.odev)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_opts_2eproto__INCLUDED
