// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fdinfo.proto

#ifndef PROTOBUF_fdinfo_2eproto__INCLUDED
#define PROTOBUF_fdinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fdinfo_2eproto();
void protobuf_AssignDesc_fdinfo_2eproto();
void protobuf_ShutdownFile_fdinfo_2eproto();

class fdinfo_entry;

enum fd_types {
  UND = 0,
  REG = 1,
  PIPE = 2,
  FIFO = 3,
  INETSK = 4,
  UNIXSK = 5,
  EVENTFD = 6,
  EVENTPOLL = 7,
  INOTIFY = 8,
  SIGNALFD = 9,
  PACKETSK = 10,
  TTY = 11,
  FANOTIFY = 12,
  NETLINKSK = 13,
  NS = 14,
  TUNF = 15,
  EXT = 16,
  TIMERFD = 17
};
bool fd_types_IsValid(int value);
const fd_types fd_types_MIN = UND;
const fd_types fd_types_MAX = TIMERFD;
const int fd_types_ARRAYSIZE = fd_types_MAX + 1;

const ::google::protobuf::EnumDescriptor* fd_types_descriptor();
inline const ::std::string& fd_types_Name(fd_types value) {
  return ::google::protobuf::internal::NameOfEnum(
    fd_types_descriptor(), value);
}
inline bool fd_types_Parse(
    const ::std::string& name, fd_types* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fd_types>(
    fd_types_descriptor(), name, value);
}
// ===================================================================

class fdinfo_entry : public ::google::protobuf::Message {
 public:
  fdinfo_entry();
  virtual ~fdinfo_entry();

  fdinfo_entry(const fdinfo_entry& from);

  inline fdinfo_entry& operator=(const fdinfo_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fdinfo_entry& default_instance();

  void Swap(fdinfo_entry* other);

  // implements Message ----------------------------------------------

  fdinfo_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fdinfo_entry& from);
  void MergeFrom(const fdinfo_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 flags = 2;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // required .fd_types type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::fd_types type() const;
  inline void set_type(::fd_types value);

  // required uint32 fd = 4;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 4;
  inline ::google::protobuf::uint32 fd() const;
  inline void set_fd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fdinfo_entry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fd();
  inline void clear_has_fd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  int type_;
  ::google::protobuf::uint32 fd_;
  friend void  protobuf_AddDesc_fdinfo_2eproto();
  friend void protobuf_AssignDesc_fdinfo_2eproto();
  friend void protobuf_ShutdownFile_fdinfo_2eproto();

  void InitAsDefaultInstance();
  static fdinfo_entry* default_instance_;
};
// ===================================================================


// ===================================================================

// fdinfo_entry

// required uint32 id = 1;
inline bool fdinfo_entry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fdinfo_entry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fdinfo_entry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fdinfo_entry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 fdinfo_entry::id() const {
  // @@protoc_insertion_point(field_get:fdinfo_entry.id)
  return id_;
}
inline void fdinfo_entry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fdinfo_entry.id)
}

// required uint32 flags = 2;
inline bool fdinfo_entry::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fdinfo_entry::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fdinfo_entry::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fdinfo_entry::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 fdinfo_entry::flags() const {
  // @@protoc_insertion_point(field_get:fdinfo_entry.flags)
  return flags_;
}
inline void fdinfo_entry::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:fdinfo_entry.flags)
}

// required .fd_types type = 3;
inline bool fdinfo_entry::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fdinfo_entry::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fdinfo_entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fdinfo_entry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fd_types fdinfo_entry::type() const {
  // @@protoc_insertion_point(field_get:fdinfo_entry.type)
  return static_cast< ::fd_types >(type_);
}
inline void fdinfo_entry::set_type(::fd_types value) {
  assert(::fd_types_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fdinfo_entry.type)
}

// required uint32 fd = 4;
inline bool fdinfo_entry::has_fd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fdinfo_entry::set_has_fd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fdinfo_entry::clear_has_fd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fdinfo_entry::clear_fd() {
  fd_ = 0u;
  clear_has_fd();
}
inline ::google::protobuf::uint32 fdinfo_entry::fd() const {
  // @@protoc_insertion_point(field_get:fdinfo_entry.fd)
  return fd_;
}
inline void fdinfo_entry::set_fd(::google::protobuf::uint32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:fdinfo_entry.fd)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fd_types> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fd_types>() {
  return ::fd_types_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fdinfo_2eproto__INCLUDED
