// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pstree.proto

#ifndef PROTOBUF_pstree_2eproto__INCLUDED
#define PROTOBUF_pstree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pstree_2eproto();
void protobuf_AssignDesc_pstree_2eproto();
void protobuf_ShutdownFile_pstree_2eproto();

class pstree_entry;

// ===================================================================

class pstree_entry : public ::google::protobuf::Message {
 public:
  pstree_entry();
  virtual ~pstree_entry();

  pstree_entry(const pstree_entry& from);

  inline pstree_entry& operator=(const pstree_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pstree_entry& default_instance();

  void Swap(pstree_entry* other);

  // implements Message ----------------------------------------------

  pstree_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pstree_entry& from);
  void MergeFrom(const pstree_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // required uint32 ppid = 2;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 2;
  inline ::google::protobuf::uint32 ppid() const;
  inline void set_ppid(::google::protobuf::uint32 value);

  // required uint32 pgid = 3;
  inline bool has_pgid() const;
  inline void clear_pgid();
  static const int kPgidFieldNumber = 3;
  inline ::google::protobuf::uint32 pgid() const;
  inline void set_pgid(::google::protobuf::uint32 value);

  // required uint32 sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline ::google::protobuf::uint32 sid() const;
  inline void set_sid(::google::protobuf::uint32 value);

  // repeated uint32 threads = 5;
  inline int threads_size() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 5;
  inline ::google::protobuf::uint32 threads(int index) const;
  inline void set_threads(int index, ::google::protobuf::uint32 value);
  inline void add_threads(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      threads() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_threads();

  // @@protoc_insertion_point(class_scope:pstree_entry)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  inline void set_has_pgid();
  inline void clear_has_pgid();
  inline void set_has_sid();
  inline void clear_has_sid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 ppid_;
  ::google::protobuf::uint32 pgid_;
  ::google::protobuf::uint32 sid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > threads_;
  friend void  protobuf_AddDesc_pstree_2eproto();
  friend void protobuf_AssignDesc_pstree_2eproto();
  friend void protobuf_ShutdownFile_pstree_2eproto();

  void InitAsDefaultInstance();
  static pstree_entry* default_instance_;
};
// ===================================================================


// ===================================================================

// pstree_entry

// required uint32 pid = 1;
inline bool pstree_entry::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pstree_entry::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pstree_entry::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pstree_entry::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 pstree_entry::pid() const {
  // @@protoc_insertion_point(field_get:pstree_entry.pid)
  return pid_;
}
inline void pstree_entry::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:pstree_entry.pid)
}

// required uint32 ppid = 2;
inline bool pstree_entry::has_ppid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pstree_entry::set_has_ppid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pstree_entry::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pstree_entry::clear_ppid() {
  ppid_ = 0u;
  clear_has_ppid();
}
inline ::google::protobuf::uint32 pstree_entry::ppid() const {
  // @@protoc_insertion_point(field_get:pstree_entry.ppid)
  return ppid_;
}
inline void pstree_entry::set_ppid(::google::protobuf::uint32 value) {
  set_has_ppid();
  ppid_ = value;
  // @@protoc_insertion_point(field_set:pstree_entry.ppid)
}

// required uint32 pgid = 3;
inline bool pstree_entry::has_pgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pstree_entry::set_has_pgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pstree_entry::clear_has_pgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pstree_entry::clear_pgid() {
  pgid_ = 0u;
  clear_has_pgid();
}
inline ::google::protobuf::uint32 pstree_entry::pgid() const {
  // @@protoc_insertion_point(field_get:pstree_entry.pgid)
  return pgid_;
}
inline void pstree_entry::set_pgid(::google::protobuf::uint32 value) {
  set_has_pgid();
  pgid_ = value;
  // @@protoc_insertion_point(field_set:pstree_entry.pgid)
}

// required uint32 sid = 4;
inline bool pstree_entry::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pstree_entry::set_has_sid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pstree_entry::clear_has_sid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pstree_entry::clear_sid() {
  sid_ = 0u;
  clear_has_sid();
}
inline ::google::protobuf::uint32 pstree_entry::sid() const {
  // @@protoc_insertion_point(field_get:pstree_entry.sid)
  return sid_;
}
inline void pstree_entry::set_sid(::google::protobuf::uint32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:pstree_entry.sid)
}

// repeated uint32 threads = 5;
inline int pstree_entry::threads_size() const {
  return threads_.size();
}
inline void pstree_entry::clear_threads() {
  threads_.Clear();
}
inline ::google::protobuf::uint32 pstree_entry::threads(int index) const {
  // @@protoc_insertion_point(field_get:pstree_entry.threads)
  return threads_.Get(index);
}
inline void pstree_entry::set_threads(int index, ::google::protobuf::uint32 value) {
  threads_.Set(index, value);
  // @@protoc_insertion_point(field_set:pstree_entry.threads)
}
inline void pstree_entry::add_threads(::google::protobuf::uint32 value) {
  threads_.Add(value);
  // @@protoc_insertion_point(field_add:pstree_entry.threads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
pstree_entry::threads() const {
  // @@protoc_insertion_point(field_list:pstree_entry.threads)
  return threads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
pstree_entry::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:pstree_entry.threads)
  return &threads_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pstree_2eproto__INCLUDED
