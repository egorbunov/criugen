// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto

#ifndef PROTOBUF_inventory_2eproto__INCLUDED
#define PROTOBUF_inventory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "core.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_inventory_2eproto();
void protobuf_AssignDesc_inventory_2eproto();
void protobuf_ShutdownFile_inventory_2eproto();

class inventory_entry;

enum lsmtype {
  NO_LSM = 0,
  SELINUX = 1,
  APPARMOR = 2
};
bool lsmtype_IsValid(int value);
const lsmtype lsmtype_MIN = NO_LSM;
const lsmtype lsmtype_MAX = APPARMOR;
const int lsmtype_ARRAYSIZE = lsmtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* lsmtype_descriptor();
inline const ::std::string& lsmtype_Name(lsmtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    lsmtype_descriptor(), value);
}
inline bool lsmtype_Parse(
    const ::std::string& name, lsmtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<lsmtype>(
    lsmtype_descriptor(), name, value);
}
// ===================================================================

class inventory_entry : public ::google::protobuf::Message {
 public:
  inventory_entry();
  virtual ~inventory_entry();

  inventory_entry(const inventory_entry& from);

  inline inventory_entry& operator=(const inventory_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inventory_entry& default_instance();

  void Swap(inventory_entry* other);

  // implements Message ----------------------------------------------

  inventory_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const inventory_entry& from);
  void MergeFrom(const inventory_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 img_version = 1;
  inline bool has_img_version() const;
  inline void clear_img_version();
  static const int kImgVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 img_version() const;
  inline void set_img_version(::google::protobuf::uint32 value);

  // optional bool fdinfo_per_id = 2;
  inline bool has_fdinfo_per_id() const;
  inline void clear_fdinfo_per_id();
  static const int kFdinfoPerIdFieldNumber = 2;
  inline bool fdinfo_per_id() const;
  inline void set_fdinfo_per_id(bool value);

  // optional .task_kobj_ids_entry root_ids = 3;
  inline bool has_root_ids() const;
  inline void clear_root_ids();
  static const int kRootIdsFieldNumber = 3;
  inline const ::task_kobj_ids_entry& root_ids() const;
  inline ::task_kobj_ids_entry* mutable_root_ids();
  inline ::task_kobj_ids_entry* release_root_ids();
  inline void set_allocated_root_ids(::task_kobj_ids_entry* root_ids);

  // optional bool ns_per_id = 4;
  inline bool has_ns_per_id() const;
  inline void clear_ns_per_id();
  static const int kNsPerIdFieldNumber = 4;
  inline bool ns_per_id() const;
  inline void set_ns_per_id(bool value);

  // optional uint32 root_cg_set = 5;
  inline bool has_root_cg_set() const;
  inline void clear_root_cg_set();
  static const int kRootCgSetFieldNumber = 5;
  inline ::google::protobuf::uint32 root_cg_set() const;
  inline void set_root_cg_set(::google::protobuf::uint32 value);

  // optional .lsmtype lsmtype = 6;
  inline bool has_lsmtype() const;
  inline void clear_lsmtype();
  static const int kLsmtypeFieldNumber = 6;
  inline ::lsmtype lsmtype() const;
  inline void set_lsmtype(::lsmtype value);

  // @@protoc_insertion_point(class_scope:inventory_entry)
 private:
  inline void set_has_img_version();
  inline void clear_has_img_version();
  inline void set_has_fdinfo_per_id();
  inline void clear_has_fdinfo_per_id();
  inline void set_has_root_ids();
  inline void clear_has_root_ids();
  inline void set_has_ns_per_id();
  inline void clear_has_ns_per_id();
  inline void set_has_root_cg_set();
  inline void clear_has_root_cg_set();
  inline void set_has_lsmtype();
  inline void clear_has_lsmtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 img_version_;
  bool fdinfo_per_id_;
  bool ns_per_id_;
  ::task_kobj_ids_entry* root_ids_;
  ::google::protobuf::uint32 root_cg_set_;
  int lsmtype_;
  friend void  protobuf_AddDesc_inventory_2eproto();
  friend void protobuf_AssignDesc_inventory_2eproto();
  friend void protobuf_ShutdownFile_inventory_2eproto();

  void InitAsDefaultInstance();
  static inventory_entry* default_instance_;
};
// ===================================================================


// ===================================================================

// inventory_entry

// required uint32 img_version = 1;
inline bool inventory_entry::has_img_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inventory_entry::set_has_img_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inventory_entry::clear_has_img_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inventory_entry::clear_img_version() {
  img_version_ = 0u;
  clear_has_img_version();
}
inline ::google::protobuf::uint32 inventory_entry::img_version() const {
  // @@protoc_insertion_point(field_get:inventory_entry.img_version)
  return img_version_;
}
inline void inventory_entry::set_img_version(::google::protobuf::uint32 value) {
  set_has_img_version();
  img_version_ = value;
  // @@protoc_insertion_point(field_set:inventory_entry.img_version)
}

// optional bool fdinfo_per_id = 2;
inline bool inventory_entry::has_fdinfo_per_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inventory_entry::set_has_fdinfo_per_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inventory_entry::clear_has_fdinfo_per_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inventory_entry::clear_fdinfo_per_id() {
  fdinfo_per_id_ = false;
  clear_has_fdinfo_per_id();
}
inline bool inventory_entry::fdinfo_per_id() const {
  // @@protoc_insertion_point(field_get:inventory_entry.fdinfo_per_id)
  return fdinfo_per_id_;
}
inline void inventory_entry::set_fdinfo_per_id(bool value) {
  set_has_fdinfo_per_id();
  fdinfo_per_id_ = value;
  // @@protoc_insertion_point(field_set:inventory_entry.fdinfo_per_id)
}

// optional .task_kobj_ids_entry root_ids = 3;
inline bool inventory_entry::has_root_ids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inventory_entry::set_has_root_ids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inventory_entry::clear_has_root_ids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inventory_entry::clear_root_ids() {
  if (root_ids_ != NULL) root_ids_->::task_kobj_ids_entry::Clear();
  clear_has_root_ids();
}
inline const ::task_kobj_ids_entry& inventory_entry::root_ids() const {
  // @@protoc_insertion_point(field_get:inventory_entry.root_ids)
  return root_ids_ != NULL ? *root_ids_ : *default_instance_->root_ids_;
}
inline ::task_kobj_ids_entry* inventory_entry::mutable_root_ids() {
  set_has_root_ids();
  if (root_ids_ == NULL) root_ids_ = new ::task_kobj_ids_entry;
  // @@protoc_insertion_point(field_mutable:inventory_entry.root_ids)
  return root_ids_;
}
inline ::task_kobj_ids_entry* inventory_entry::release_root_ids() {
  clear_has_root_ids();
  ::task_kobj_ids_entry* temp = root_ids_;
  root_ids_ = NULL;
  return temp;
}
inline void inventory_entry::set_allocated_root_ids(::task_kobj_ids_entry* root_ids) {
  delete root_ids_;
  root_ids_ = root_ids;
  if (root_ids) {
    set_has_root_ids();
  } else {
    clear_has_root_ids();
  }
  // @@protoc_insertion_point(field_set_allocated:inventory_entry.root_ids)
}

// optional bool ns_per_id = 4;
inline bool inventory_entry::has_ns_per_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void inventory_entry::set_has_ns_per_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void inventory_entry::clear_has_ns_per_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void inventory_entry::clear_ns_per_id() {
  ns_per_id_ = false;
  clear_has_ns_per_id();
}
inline bool inventory_entry::ns_per_id() const {
  // @@protoc_insertion_point(field_get:inventory_entry.ns_per_id)
  return ns_per_id_;
}
inline void inventory_entry::set_ns_per_id(bool value) {
  set_has_ns_per_id();
  ns_per_id_ = value;
  // @@protoc_insertion_point(field_set:inventory_entry.ns_per_id)
}

// optional uint32 root_cg_set = 5;
inline bool inventory_entry::has_root_cg_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void inventory_entry::set_has_root_cg_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void inventory_entry::clear_has_root_cg_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void inventory_entry::clear_root_cg_set() {
  root_cg_set_ = 0u;
  clear_has_root_cg_set();
}
inline ::google::protobuf::uint32 inventory_entry::root_cg_set() const {
  // @@protoc_insertion_point(field_get:inventory_entry.root_cg_set)
  return root_cg_set_;
}
inline void inventory_entry::set_root_cg_set(::google::protobuf::uint32 value) {
  set_has_root_cg_set();
  root_cg_set_ = value;
  // @@protoc_insertion_point(field_set:inventory_entry.root_cg_set)
}

// optional .lsmtype lsmtype = 6;
inline bool inventory_entry::has_lsmtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void inventory_entry::set_has_lsmtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void inventory_entry::clear_has_lsmtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void inventory_entry::clear_lsmtype() {
  lsmtype_ = 0;
  clear_has_lsmtype();
}
inline ::lsmtype inventory_entry::lsmtype() const {
  // @@protoc_insertion_point(field_get:inventory_entry.lsmtype)
  return static_cast< ::lsmtype >(lsmtype_);
}
inline void inventory_entry::set_lsmtype(::lsmtype value) {
  assert(::lsmtype_IsValid(value));
  set_has_lsmtype();
  lsmtype_ = value;
  // @@protoc_insertion_point(field_set:inventory_entry.lsmtype)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lsmtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lsmtype>() {
  return ::lsmtype_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inventory_2eproto__INCLUDED
