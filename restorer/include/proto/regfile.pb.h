// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regfile.proto

#ifndef PROTOBUF_regfile_2eproto__INCLUDED
#define PROTOBUF_regfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "opts.pb.h"
#include "fown.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_regfile_2eproto();
void protobuf_AssignDesc_regfile_2eproto();
void protobuf_ShutdownFile_regfile_2eproto();

class reg_file_entry;

// ===================================================================

class reg_file_entry : public ::google::protobuf::Message {
 public:
  reg_file_entry();
  virtual ~reg_file_entry();

  reg_file_entry(const reg_file_entry& from);

  inline reg_file_entry& operator=(const reg_file_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reg_file_entry& default_instance();

  void Swap(reg_file_entry* other);

  // implements Message ----------------------------------------------

  reg_file_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reg_file_entry& from);
  void MergeFrom(const reg_file_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 flags = 2;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // required uint64 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint64 pos() const;
  inline void set_pos(::google::protobuf::uint64 value);

  // required .fown_entry fown = 5;
  inline bool has_fown() const;
  inline void clear_fown();
  static const int kFownFieldNumber = 5;
  inline const ::fown_entry& fown() const;
  inline ::fown_entry* mutable_fown();
  inline ::fown_entry* release_fown();
  inline void set_allocated_fown(::fown_entry* fown);

  // required string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint32 mnt_id = 7 [default = -1];
  inline bool has_mnt_id() const;
  inline void clear_mnt_id();
  static const int kMntIdFieldNumber = 7;
  inline ::google::protobuf::int32 mnt_id() const;
  inline void set_mnt_id(::google::protobuf::int32 value);

  // optional uint64 size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional bool ext = 9;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 9;
  inline bool ext() const;
  inline void set_ext(bool value);

  // optional uint32 mode = 10;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 10;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:reg_file_entry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_fown();
  inline void clear_has_fown();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mnt_id();
  inline void clear_has_mnt_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint64 pos_;
  ::fown_entry* fown_;
  ::std::string* name_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int32 mnt_id_;
  bool ext_;
  ::google::protobuf::uint32 mode_;
  friend void  protobuf_AddDesc_regfile_2eproto();
  friend void protobuf_AssignDesc_regfile_2eproto();
  friend void protobuf_ShutdownFile_regfile_2eproto();

  void InitAsDefaultInstance();
  static reg_file_entry* default_instance_;
};
// ===================================================================


// ===================================================================

// reg_file_entry

// required uint32 id = 1;
inline bool reg_file_entry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reg_file_entry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reg_file_entry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reg_file_entry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 reg_file_entry::id() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.id)
  return id_;
}
inline void reg_file_entry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.id)
}

// required uint32 flags = 2;
inline bool reg_file_entry::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reg_file_entry::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reg_file_entry::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reg_file_entry::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 reg_file_entry::flags() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.flags)
  return flags_;
}
inline void reg_file_entry::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.flags)
}

// required uint64 pos = 3;
inline bool reg_file_entry::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reg_file_entry::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reg_file_entry::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reg_file_entry::clear_pos() {
  pos_ = GOOGLE_ULONGLONG(0);
  clear_has_pos();
}
inline ::google::protobuf::uint64 reg_file_entry::pos() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.pos)
  return pos_;
}
inline void reg_file_entry::set_pos(::google::protobuf::uint64 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.pos)
}

// required .fown_entry fown = 5;
inline bool reg_file_entry::has_fown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reg_file_entry::set_has_fown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reg_file_entry::clear_has_fown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reg_file_entry::clear_fown() {
  if (fown_ != NULL) fown_->::fown_entry::Clear();
  clear_has_fown();
}
inline const ::fown_entry& reg_file_entry::fown() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.fown)
  return fown_ != NULL ? *fown_ : *default_instance_->fown_;
}
inline ::fown_entry* reg_file_entry::mutable_fown() {
  set_has_fown();
  if (fown_ == NULL) fown_ = new ::fown_entry;
  // @@protoc_insertion_point(field_mutable:reg_file_entry.fown)
  return fown_;
}
inline ::fown_entry* reg_file_entry::release_fown() {
  clear_has_fown();
  ::fown_entry* temp = fown_;
  fown_ = NULL;
  return temp;
}
inline void reg_file_entry::set_allocated_fown(::fown_entry* fown) {
  delete fown_;
  fown_ = fown;
  if (fown) {
    set_has_fown();
  } else {
    clear_has_fown();
  }
  // @@protoc_insertion_point(field_set_allocated:reg_file_entry.fown)
}

// required string name = 6;
inline bool reg_file_entry::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reg_file_entry::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reg_file_entry::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reg_file_entry::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& reg_file_entry::name() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.name)
  return *name_;
}
inline void reg_file_entry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:reg_file_entry.name)
}
inline void reg_file_entry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:reg_file_entry.name)
}
inline void reg_file_entry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reg_file_entry.name)
}
inline ::std::string* reg_file_entry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:reg_file_entry.name)
  return name_;
}
inline ::std::string* reg_file_entry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void reg_file_entry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:reg_file_entry.name)
}

// optional sint32 mnt_id = 7 [default = -1];
inline bool reg_file_entry::has_mnt_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void reg_file_entry::set_has_mnt_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void reg_file_entry::clear_has_mnt_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void reg_file_entry::clear_mnt_id() {
  mnt_id_ = -1;
  clear_has_mnt_id();
}
inline ::google::protobuf::int32 reg_file_entry::mnt_id() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.mnt_id)
  return mnt_id_;
}
inline void reg_file_entry::set_mnt_id(::google::protobuf::int32 value) {
  set_has_mnt_id();
  mnt_id_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.mnt_id)
}

// optional uint64 size = 8;
inline bool reg_file_entry::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void reg_file_entry::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void reg_file_entry::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void reg_file_entry::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 reg_file_entry::size() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.size)
  return size_;
}
inline void reg_file_entry::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.size)
}

// optional bool ext = 9;
inline bool reg_file_entry::has_ext() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void reg_file_entry::set_has_ext() {
  _has_bits_[0] |= 0x00000080u;
}
inline void reg_file_entry::clear_has_ext() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void reg_file_entry::clear_ext() {
  ext_ = false;
  clear_has_ext();
}
inline bool reg_file_entry::ext() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.ext)
  return ext_;
}
inline void reg_file_entry::set_ext(bool value) {
  set_has_ext();
  ext_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.ext)
}

// optional uint32 mode = 10;
inline bool reg_file_entry::has_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void reg_file_entry::set_has_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void reg_file_entry::clear_has_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void reg_file_entry::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 reg_file_entry::mode() const {
  // @@protoc_insertion_point(field_get:reg_file_entry.mode)
  return mode_;
}
inline void reg_file_entry::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:reg_file_entry.mode)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_regfile_2eproto__INCLUDED
